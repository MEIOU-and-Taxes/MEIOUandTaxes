# country 
on_startup = {
	if = {
		limit = {
			tag = AAA
		}
		set_key = { lhs = LegalismDate value = 1000 }
		set_key = { lhs = MeritocracyDate value = 1000 }
		set_key = { lhs = BankingDate value = 1350 }

		if = {
			limit = {
				NOT = { has_global_flag = Global_Modi_Set }
			}
			Modi_Global = yes
			set_global_flag = Global_Modi_Set
		}
        country_event = { ### Apply Pass system
            id = POP_StartInit.001
        }
	}
	emperor = {
		save_global_event_target_as = Emperor
	}
	if = {
		limit = {
			is_emperor_of_china = yes
		}
		save_global_event_target_as = EmperorOfChina
	}
	# System Setup
	if = {
		limit = {
			NOT = {
				has_global_flag = POP_RanInit
			}
		}
		AAA = {
			every_province = {
				limit = {
					OR = {
						continent = north_america
						continent = south_america
						has_province_modifier = trading_post_province
						region = australia_region
						area = maui_area
						region = west_siberia_region
						region = east_siberia_region
						region = east_manchuria_region
						region = outer_mongolia_region
						AND = {
							has_province_modifier = remote_island
							NOT = { continent = oceania }
						}
						province_id = 481 #Bermuda
						province_id = 368 #Madeira
						province_id = 367 #Azores
					}
				}
				set_province_flag = ColonyBecomesOwner
			}
			every_province = {
				limit = {
					OR = {
						region = indonesia_region
						region = philippines_region
						area = hokkaido_area
					}
				}
				set_province_flag = NoRandomSpread
			}
			if = {
				limit = {
					# always = yes when not running a sim
					# always = no when running a sim
					MAP = { ai = yes }
				}
				# set_global_flag = LogGraphing # Enables in-game observer logging
				set_global_flag = China_Broken
				### pre-clean data
				country_event = { id = POP_StartUp.018 } 
				## load sim file
				country_event = { id = POP_Init.001 }
				country_event = { id = POP_Init.002 }
				country_event = { id = POP_Init.003 }
				## load additional prov data
				country_event = { id = distance_calc.1 }  # Reset province position values from generated files
				country_event = { id = POP_Rugged.001 } 
				### startup for post-sim
				country_event = { id = POP_StartUp.019 } 
				
				#TN_AssignSectorID = yes
				# flavor and CB setup
				country_event = { id = steppe.1 }
				country_event = { id = setup_event.1 }
				country_event = { id = calcul_byoa.1 }
				country_event = { id = ghazi.4 }

				country_event = { id = setup_event.11 }
				
				country_event = { id = cb_types.1 }
				
				country_event = { id = SYS_Pulse.005 }
				
				# Reload DG data
				country_event = { id = POP_DG.001 }
				
				# Finish post-sim startup
				country_event = { id = POP_Census.0093 }
				country_event = { id = POP_StartUp.020 }
				country_event = { id = AI_Tax.005 }
				country_event = { id = POP_StartUp.022 }

				# Diplomacy Startup
				country_event = { id = mec_diplomacy.002 }

				# TagID System
				country_event = { id = SYS_Local.001 }
			}
			else = {
				if = { ### Alert us to double TN provs
					limit = {
						NOT = { check_key = { lhs = iter value = 1 } }
					}
					set_key = { lhs = iter value = 0 }
					set_key = { lhs = iter_max value = 350 }
				}
				MAP = { country_event = { id = POP_StartUp.009 } }
			}
		}
		set_global_flag = not_samerica_smallpox #cleared when smallpox appears in south america
		set_global_flag = not_namerica_smallpox #cleared when smallpox appears in north america
		set_global_flag = not_camerica_smallpox #cleared when smallpox appears in central america
		set_global_flag = POP_RanInit
		east_manchuria_region = {
			limit = {
				owned_by = YUA
			}
			Rights_NOGov1Apply = yes
			Rights_NOObl1Apply = yes
			Rights_NOTen3Apply = yes
			Rights_NOSer1Apply = yes
			Rights_BGCom5Apply = yes
			Rights_BGGov3Apply = yes
			Rights_CLHie3Apply = yes
			Rights_CLObl3Apply = yes
			Rights_CLTax3Apply = yes
			Rights_BUTax1Apply = yes
			Privilege_NOProcessing0Apply = yes
			Privilege_NOGame0Apply = yes
			Privilege_NOForestry0Apply = yes
			Privilege_NOSeigneurial0Apply = yes
			Privilege_NOTitles1Apply = yes
			Privilege_NOAutonomy3Apply = yes
			Privilege_NODiplomacy0Apply = yes
			Privilege_NODynastic1Apply = yes
			Privilege_NOHierarchy0Apply = yes
			Privilege_NOTaxE3Apply = yes
			Privilege_NOServiceE3Apply = yes
			
			Privilege_BUOffice1Apply = yes
			Privilege_BUFarm0Apply = yes
			Privilege_BUTenure0Apply = yes
			Privilege_BUWages1Apply = yes
			Privilege_BUHierarchy0Apply = yes
			Privilege_BUHire0Apply = yes
			Privilege_BUExams0Apply = yes
			Privilege_BUOversight0Apply = yes
			Privilege_BUEnlist0Apply = yes
			Privilege_BUStructure0Apply = yes
			Privilege_BUCourts0Apply = yes
			Privilege_BUPolitics0Apply = yes
			Privilege_BURotate0Apply = yes
		}
		west_manchuria_region = {
			limit = {
				owned_by = YUA
			}
			Rights_NOGov1Apply = yes
			Rights_NOObl1Apply = yes
			Rights_NOTen3Apply = yes
			Rights_NOSer1Apply = yes
			Rights_BGCom5Apply = yes
			Rights_BGGov3Apply = yes
			Rights_CLHie3Apply = yes
			Rights_CLObl3Apply = yes
			Rights_CLTax3Apply = yes
			Rights_BUTax1Apply = yes
			Privilege_NOProcessing0Apply = yes
			Privilege_NOGame0Apply = yes
			Privilege_NOForestry0Apply = yes
			Privilege_NOSeigneurial0Apply = yes
			Privilege_NOTitles1Apply = yes
			Privilege_NOAutonomy3Apply = yes
			Privilege_NODiplomacy0Apply = yes
			Privilege_NODynastic1Apply = yes
			Privilege_NOHierarchy0Apply = yes
			Privilege_NOTaxE3Apply = yes
			Privilege_NOServiceE3Apply = yes
			
			Privilege_BUOffice1Apply = yes
			Privilege_BUFarm0Apply = yes
			Privilege_BUTenure0Apply = yes
			Privilege_BUWages1Apply = yes
			Privilege_BUHierarchy0Apply = yes
			Privilege_BUHire0Apply = yes
			Privilege_BUExams0Apply = yes
			Privilege_BUOversight0Apply = yes
			Privilege_BUEnlist0Apply = yes
			Privilege_BUStructure0Apply = yes
			Privilege_BUCourts0Apply = yes
			Privilege_BUPolitics0Apply = yes
			Privilege_BURotate0Apply = yes
		}
		inner_mongolia_region = {
			limit = {
				owned_by = YUA
			}
			Rights_NOGov1Apply = yes
			Rights_NOObl1Apply = yes
			Rights_NOTen3Apply = yes
			Rights_NOSer1Apply = yes
			Rights_BGCom5Apply = yes
			Rights_BGGov3Apply = yes
			Rights_CLHie3Apply = yes
			Rights_CLObl3Apply = yes
			Rights_CLTax3Apply = yes
			Rights_BUTax1Apply = yes
			Privilege_NOProcessing0Apply = yes
			Privilege_NOGame0Apply = yes
			Privilege_NOForestry0Apply = yes
			Privilege_NOSeigneurial0Apply = yes
			Privilege_NOTitles1Apply = yes
			Privilege_NOAutonomy3Apply = yes
			Privilege_NODiplomacy0Apply = yes
			Privilege_NODynastic1Apply = yes
			Privilege_NOHierarchy0Apply = yes
			Privilege_NOTaxE3Apply = yes
			Privilege_NOServiceE3Apply = yes
			
			Privilege_BUOffice1Apply = yes
			Privilege_BUFarm0Apply = yes
			Privilege_BUTenure0Apply = yes
			Privilege_BUWages1Apply = yes
			Privilege_BUHierarchy0Apply = yes
			Privilege_BUHire0Apply = yes
			Privilege_BUExams0Apply = yes
			Privilege_BUOversight0Apply = yes
			Privilege_BUEnlist0Apply = yes
			Privilege_BUStructure0Apply = yes
			Privilege_BUCourts0Apply = yes
			Privilege_BUPolitics0Apply = yes
			Privilege_BURotate0Apply = yes
		}
		outer_mongolia_region = {
			limit = {
				owned_by = YUA
			}
			Rights_NOGov1Apply = yes
			Rights_NOObl1Apply = yes
			Rights_NOTen3Apply = yes
			Rights_NOSer1Apply = yes
			Rights_BGCom5Apply = yes
			Rights_BGGov3Apply = yes
			Rights_CLHie3Apply = yes
			Rights_CLObl3Apply = yes
			Rights_CLTax3Apply = yes
			Rights_BUTax1Apply = yes
			Privilege_NOProcessing0Apply = yes
			Privilege_NOGame0Apply = yes
			Privilege_NOForestry0Apply = yes
			Privilege_NOSeigneurial0Apply = yes
			Privilege_NOTitles1Apply = yes
			Privilege_NOAutonomy3Apply = yes
			Privilege_NODiplomacy0Apply = yes
			Privilege_NODynastic1Apply = yes
			Privilege_NOHierarchy0Apply = yes
			Privilege_NOTaxE3Apply = yes
			Privilege_NOServiceE3Apply = yes
			
			Privilege_BUOffice1Apply = yes
			Privilege_BUFarm0Apply = yes
			Privilege_BUTenure0Apply = yes
			Privilege_BUWages1Apply = yes
			Privilege_BUHierarchy0Apply = yes
			Privilege_BUHire0Apply = yes
			Privilege_BUExams0Apply = yes
			Privilege_BUOversight0Apply = yes
			Privilege_BUEnlist0Apply = yes
			Privilege_BUStructure0Apply = yes
			Privilege_BUCourts0Apply = yes
			Privilege_BUPolitics0Apply = yes
			Privilege_BURotate0Apply = yes
		}
	}
	if = {
		limit = {
			tag = AAA
			has_country_flag = Done_SimInit
		}
		country_event = {
			id = POP_DG.007
		}
        set_key = { lhs = ID_TN value = 1 }

		every_province = {
            remove_province_modifier = river_notify
            set_key = { lhs = ID_TN value = 0 }
			set_key = { lhs = BU_SpendMPMaintSave which = BU_SpendMPMaint }
		}
        tradenode_centers = { # Assign unique trade node center ID's
			if = { ### Alert us to double TN provs
				limit = {
					check_key = {
						lhs = ID_TN
						value = 1
					}
				}
				add_permanent_province_modifier = {
					name = river_notify
					duration = -1
				}
			}
			if = {
				limit = {
					NOT = { is_wasteland = yes }
				}
            	set_key = { lhs = ID_TN which = PREV }
			}
			else = {
				add_permanent_province_modifier = {
					name = river_notify
					duration = -1
				}
			}

			every_trade_node_member_province = {
				if = { ### Alert us to double TN provs 
					limit = {
						NOT = { province_id = PREV }
					}
					if = {
						limit = {
					        NOT = { is_wasteland = yes }
							NOT = {
								check_key = { lhs = ID_TN value = 1 }
							}
						}
						set_key = { lhs = ID_TN which = PREV }
					}
					else = {
						add_permanent_province_modifier = {
							name = river_notify
							duration = -1
						}
					}
				}
			}

            PREV = {
                change_key = { lhs = ID_TN value = 1 }
            }
        }
		every_province = {
			if = {
				limit = {
					OR = {
						owned_by = AAA
						is_wasteland = yes
					}
				}
				set_key = { lhs = Land_PSize value = 0 }
				clr_province_flag = Data
			}
		}
		country_event = {
			id = POP_Census.002
		}
		country_event = { id = distance_calc.1 }  # Reset province position values from generated files
	}
	if = {
		limit = {
			OR = {
				tag = TEU
				tag = LVO
			}
			ai = no
		}
		every_province = {
			limit = {
				OR = {
					has_province_modifier = Teuton_Commandery_High
					has_province_modifier = Teuton_Commandery_Med
					has_province_modifier = Teuton_Commandery_Low
				}
			}
			if = {
				limit = {
					has_province_modifier = Teuton_Commandery_High
				}
				remove_province_modifier = Teuton_Commandery_High
				add_permanent_province_modifier = { name = Teuton_Commandery_High_trade duration = -1 }
			}
			else_if = {
				limit = {
					has_province_modifier = Teuton_Commandery_Med
				}
				remove_province_modifier = Teuton_Commandery_Med
				add_permanent_province_modifier = { name = Teuton_Commandery_Med_trade duration = -1 }
			}
			else_if = {
				limit = {
					has_province_modifier = Teuton_Commandery_Low
				}
				remove_province_modifier = Teuton_Commandery_Low
				add_permanent_province_modifier = { name = Teuton_Commandery_Low_trade duration = -1 }
			}
		}
	}
	if = {
		limit = {
			tag = KNI
			ai = no
		}
		every_province = {
			limit = {
				OR = {
					has_province_modifier = Knights_Commandery_High
					has_province_modifier = Knights_Commandery_Med
					has_province_modifier = Knights_Commandery_Low
				}
			}
			if = {
				limit = {
					has_province_modifier = Knights_Commandery_High
				}
				remove_province_modifier = Knights_Commandery_High
				add_permanent_province_modifier = { name = Knights_Commandery_High_trade duration = -1 }
			}
			else_if = {
				limit = {
					has_province_modifier = Knights_Commandery_Med
				}
				remove_province_modifier = Knights_Commandery_Med
				add_permanent_province_modifier = { name = Knights_Commandery_Med_trade duration = -1 }
			}
			else_if = {
				limit = {
					has_province_modifier = Knights_Commandery_Low
				}
				remove_province_modifier = Knights_Commandery_Low
				add_permanent_province_modifier = { name = Knights_Commandery_Low_trade duration = -1 }
			}
		}
	}
	POL =  {
		country_event = { 
			id = flavor_pol.499 
			days = 7 
		}
	}
	FEZ =  {
		country_event = { 
			id = flavor_fez.02 
			days = 3 
		}
	}
	BRA = {
		country_event = {
			id = flavor_brapru.100
			days = 20
		}
	}
	CAS = {
		country_event = {
			id = flavor_spa.8001
		}
	}
	AAA = {
		if = {
			limit = {
				always = no 
			}
			set_global_flag = first_time_data_collection
			country_event = {
				id = POP_Census.995
				days = 40
			}
		}
	}
	if = {
		limit = { has_country_flag = very_easy_difficulty }
		add_country_modifier = { name = very_easy_difficulty duration = -1 hidden = yes }
		clr_country_flag = very_easy_difficulty
	}
	else_if = {
		limit = { has_country_flag = easy_difficulty }
		add_country_modifier = { name = easy_difficulty duration = -1 hidden = yes }
		clr_country_flag = easy_difficulty
	}
	else_if = {
		limit = { has_country_flag = normal_difficulty }
		add_country_modifier = { name = normal_difficulty duration = -1 hidden = yes }
		clr_country_flag = normal_difficulty
	}
	else_if = {
		limit = { has_country_flag = hard_difficulty }
		add_country_modifier = { name = hard_difficulty duration = -1 hidden = yes }
		clr_country_flag = hard_difficulty
	}
	else_if = {
		limit = { has_country_flag = expert_difficulty }
		add_country_modifier = { name = expert_difficulty duration = -1 hidden = yes }
		clr_country_flag = expert_difficulty
	}
	if = {
		limit = {
			ai = yes
		}
		set_key = { lhs = Mil_BUBudgetMult value = 60 }
	}
	events = {
		government_reforms.1		#Ruler stats affect legitimacy calc
	}
}

# country
on_religion_change = {
	events = {
		DG_Zoroastrian.062		#Zoroastrian Revival event
	}
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_religion = ROOT
	}
	if = {
		limit = {
			has_regency = no
		}
		set_ruler_religion = ROOT
	}
	if = {
		limit = {
			has_dlc = "Rights of Man"
			has_consort = yes
		}
		set_consort_religion = ROOT
	}
	if = {
		limit = { exists = AVI }
		if = {
			limit = { religion = avignonist }
			every_owned_province = {
				limit = { religion = catholic }
				change_religion = avignonist
				hidden_effect = { MN_RlgChange = { from = 1 to = 7 } }
			}
		}
		else_if = {
			limit = { religion = catholic }
			every_owned_province = {
				limit = { religion = avignonist }
				change_religion = catholic
				hidden_effect = { MN_RlgChange = { from = 7 to = 1 } }
			}
		}
	}
	capital_scope = {
		province_event = {
			id = DG_Convert.005
		}
	}
	country_event = {
		id = DG_Convert.011
	}
	swap_non_generic_missions = yes
	if = {
		limit = {
			religion = catholic
		}
		if = {
			limit = { has_global_flag = wal_schism_mended }
			SetWaldensianAspects = yes
		}
		else_if = {
			limit = { has_global_flag = lol_schism_compromise }
			SetLollardCompromiseAspects = yes
		}
		else_if = {
			limit = { has_global_flag = lol_schism_mended }
			SetLollardAspects = yes
		}
		else_if = {
			limit = { has_global_flag = hus_schism_compromise }
			SetHussiteCompromiseAspects = yes
		}
		else_if = {
			limit = { has_global_flag = hus_schism_mended }
			SetHussiteAspects = yes
		}
		else_if = {
			limit = { has_global_flag = pro_schism_compromise }
			SetProtestantCompromiseAspects = yes
		}
		else_if = {
			limit = { has_global_flag = pro_schism_mended }
			SetProtestantAspects = yes
		}
		else_if = {
			limit = { has_global_flag = ref_schism_compromise }
			SetReformedCompromiseAspects = yes
		}
		else_if = {
			limit = { has_global_flag = ref_schism_mended }
			SetReformedAspects = yes
		}
		else = {
			SetCatholicAspects = yes
		}
	}
	else_if = {
		limit = {
			religion = avignonist
		}
		SetCatholicAspects = yes
	}
	else_if = {
		limit = {
			religion = waldensian
		}
		SetWaldensianAspects = yes
		if = {
			limit = { NOT = { has_country_flag = waldensian_presence } }
			hidden_effect = {
				country_event = { id = DG_Waldensians.002 }
				capital_scope = { MN_HeresySpread = { typefrom = which from = MN_S0 to = 5 incr = 0.05 typeIncr = value } }
				every_owned_province = { random = { chance = 70 MN_HeresySpread = { typefrom = which from = MN_S0 to = 5 incr = 0.05 typeIncr = value } } }
			}
		}
	}
	else_if = {
		limit = {
			religion = lollard
		}
		SetLollardAspects = yes
		if = {
			limit = { NOT = { has_country_flag = lollard_presence } }
			hidden_effect = {
				country_event = { id = DG_Lollards.002 }
				capital_scope = { MN_HeresySpread = { typefrom = which from = MN_S0 to = 6 incr = 0.05 typeIncr = value } }
				every_owned_province = { random = { chance = 70 MN_HeresySpread = { typefrom = which from = MN_S0 to = 6 incr = 0.05 typeIncr = value } } }
			}
		}
	}
	else_if = {
		limit = {
			religion = hussite
		}
		SetHussiteAspects = yes
		if = {
			limit = { NOT = { has_country_flag = hussite_presence } }
			hidden_effect = {
				country_event = { id = DG_Hussites.002 }
				capital_scope = { MN_HeresySpread = { typefrom = which from = MN_S0 to = 4 incr = 0.05 typeIncr = value } }
				every_owned_province = { random = { chance = 70 MN_HeresySpread = { typefrom = which from = MN_S0 to = 4 incr = 0.05 typeIncr = value } } }
			}
		}
	}
	else_if = {
		limit = {
			religion = protestant
		}
		SetProtestantAspects = yes
		if = {
			limit = { NOT = { has_country_flag = protestant_presence } }
			hidden_effect = {
				country_event = { id = DG_Protestant.002 }
				capital_scope = { MN_HeresySpread = { typefrom = which from = MN_S0 to = 2 incr = 0.10 typeIncr = value } }
				every_owned_province = { random = { chance = 70 MN_HeresySpread = { typefrom = which from = MN_S0 to = 2 incr = 0.10 typeIncr = value } } }
			}
		}
	}
	else_if = {
		limit = { religion = reformed }
		SetReformedAspects = yes
		if = {
			limit = { NOT = { has_country_flag = reformed_presence } }
			hidden_effect = {
				country_event = { id = DG_Reformed.002 }
				capital_scope = { MN_HeresySpread = { typefrom = which from = MN_S0 to = 3 incr = 0.10 typeIncr = value } }
				every_owned_province = { random = { chance = 70 MN_HeresySpread = { typefrom = which from = MN_S0 to = 3 incr = 0.10 typeIncr = value } } }
			}
		}
	}
	every_owned_province = {
		random_list = {
			50 = { add_or_extend_province_modifier_hidden_effect = { NAME = religious_enthusiasm DURATION = 9125 } }
			30 = { add_or_extend_province_modifier_hidden_effect = { NAME = heretic_centre DURATION = 9125 } }
			20 = {  }
		}
	}
	if = {
		limit = { tag = PAP NOT = { religion = catholic } NOT = { any_country = { religion = catholic } } }
		ChangeTagEffect = { scope=ROM }
		log = "FE-FormingNewNations:[GetYear]:[Root.GetName]:formed [ROM.GetName]:on_religion_change"
		secularisation_effect = yes
	}
	if = {
		limit = { western_christian = yes }
		country_event = { id = DG_Notification.001 days = 5 }
	}
	if = {
		limit = {
			hre_leagues_enabled = yes
			ai = yes
			OR = {
				in_league = catholic
				in_league = protestant
				in_league = reformed
				in_league = hussite
			}
		}
		if = {
			limit = {
				in_league = catholic
			}
			leave_league = catholic
		}
		else_if = {
			limit = {
				in_league = protestant
			}
			leave_league = protestant
		}
		else_if = {
			limit = {
				in_league = reformed
			}
			leave_league = reformed
		}
		else_if = {
			limit = {
				in_league = hussite
			}
			leave_league = hussite
		}
	}
}

# country.
on_secondary_religion_change = {
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
	set_country_flag = AITax_Yearly
}

# country
on_colonial_liberation = {
	# country_event = {
	# 	id = colonial_nation.90
	# 	days = 1
	# }
}

# country
on_colonial_reintegration = {
	events = { colonial_nation.91 }
}

# country
on_peace_actor = {
	if = {
		limit = {
			OR = {
				primary_culture = turkish
				primary_culture = yorouk
				primary_culture = osmanli
				primary_culture = turkoman
			}
			AAA = { has_country_flag = Anatolian_PowerActive }
		}
		AAA = { country_event = { id = ghazi.4 } }
	}
	# if = {
	# 	limit = {
	# 		is_emperor = yes
	# 		has_global_flag = DG_League_War
	# 		is_in_league_war = no
	# 	}
	# 	country_event = { id = DG_Protestant.031 }
	# }
	events = {
		prisonner_of_war.101		# Post-war clean-up
	}
	set_country_flag = AITax_Yearly
	#MP_RaisedPulse = yes
}

# country
on_peace_recipient = {
	# if = {
	# 	limit = {
	# 		is_emperor = yes
	# 		has_global_flag = DG_League_War
	# 		is_in_league_war = no
	# 	}
	# 	country_event = { id = DG_Protestant.031 }
	# }
	events = {
		prisonner_of_war.101		# Post-war clean-up
	}
	set_country_flag = AITax_Yearly
}

# country
# root = winning country, from = loser country
on_war_won = {
	#log = "[Root.GetName] won a war against [From.GetName]"
	if = {
		limit = {
			OR = {
				AND = {
					is_subject_of_type = daimyo_vassal
					NOT = { check_key = { lhs = Vassal_Type value = 1 } }
				}
				is_subject_of_type = vassal
			}
		}
		if = {
			limit = {
				OR = {
					AND = {
						NOT = { culture_group = japanese_g }
						overlord = { NOT = { culture_group = japanese_g } }
					}
					is_subject_of_type = vassal
				}
			}
			overlord = {
				create_subject = {
					subject_type = custom_vassal
					subject = ROOT
				}
			}
		}
		else_if = {
			limit = {
				overlord = { tag = LIT }
				tag = KIE
			}
			overlord = {
				create_subject = {
					subject_type = decentralized_vassal
					subject = ROOT
				}
			}
			define_ruler = {
				name = "Fiodor" # His pagan name is unknown
				dynasty = "Gediminai"
				culture = lithuanian
				ADM = 3
				DIP = 3
				MIL = 3
				claim = 95
			}
		}
	}
	clr_country_flag = steppe_declined_tributary
	vassal_type_tracking_effect = yes
	events = {
		japan.3						# Shogunate is victorious
		japan.4						# Emperor is victorious
		japan.19					# Usurper is defeated
		japan.28					# The position of Kanrei is taken through war
		flavor_chu.1				# winner inherits CHU
		red_turban.9				# Post-war core clean-up in China
		red_turban.10				# Post-war core gain in China
        Plague_Spawner.3            # Salmonella
		prisonner_of_war.101		# Post-war clean-up
		HRE_war_mechanics.004		# Clear HRE defense modifiers
		dynastic.1001				# Post-war marriage to secure the peace treaty
	}

	if = {
		limit = {
			OR = {
				tag = ENG
				tag = GBR
				tag = UEF
			}
			FROM = { tag = WLS }
		}
		country_event = { id = flavor_wls.3	 } # End of Welsh war of independence, chance to set up Tudors
	}
	if = {
		limit = {
			tag = SWE
			FROM = { tag = RSW NOT = { num_of_cities = 16 } }
		}
		country_event = { id = flavor_swe.4303 }
	}
	if = {
		limit = {
			tag = RSW
			num_of_cities = 17
			FROM = { tag = SWE }
		}
		country_event = { id = flavor_swe.4304 }
	}
	# if = {
	# 	limit = {
	# 		is_emperor = yes
	# 		has_global_flag = DG_League_War
	# 		is_in_league_war = no
	# 	}
	# 	country_event = { id = DG_Protestant.031 }
	# }
	if = {
		limit = {
			NOT = {
				is_year = 1500
			}
			
			OR = {
				primary_culture = turkish
				primary_culture = osmanli
				primary_culture = turkoman
			}
	
			religion_group = muslim
			
			check_key = { lhs = Loot_Pool value = 100 }
			
			NOT = {
				has_country_flag = ghazi_fired
			}
			
			is_at_war = no
			
			FROM = {
				OR = {
					tag = BYZ
					tag = BUL
					tag = SER
					tag = EPI
					tag = DOB
					tag = VID
					tag = HUN
					tag = TRE
					tag = SRR
					tag = TSL
					tag = MON
					tag = VUK
					tag = MKO
					tag = VBZ
					tag = HUM
					tag = ALC
					tag = ALB
					tag = ATH
					tag = MOE
					tag = ACH
					tag = WAL
					tag = MOL
				}
			}
		}
		set_country_flag = ghazi_fired
		
		country_event = {
			id = ghazi.1
		}
	}
	if = {
		limit = {
			has_country_flag = urbs_mundi_captured
		}
		clr_country_flag = urbs_mundi_captured
	}
}

# country
# root = winning country, from = loser country
on_main_war_won = {
}

# country
# root = winning country, from = loser country
on_separate_war_won = {
}

# country
# root = loser country, from = winner country
on_war_lost = {
	#log = "[Root.GetName] lost a war against [From.GetName]"
	if = {
		limit = {
			OR = {
				AND = {
					is_subject_of_type = daimyo_vassal
					NOT = { check_key = { lhs = Vassal_Type value = 1 } }
				}
				is_subject_of_type = vassal
			}
		}
		if = {
			limit = {
				OR = {
					AND = {
						NOT = { culture_group = japanese_g }
						overlord = { NOT = { culture_group = japanese_g } }
					}
					is_subject_of_type = vassal
				}
			}
			overlord = {
				create_subject = {
					subject_type = custom_vassal
					subject = ROOT
				}
			}
		}
		else_if = {
			limit = {
				overlord = { tag = LIT }
				tag = KIE
			}
			overlord = {
				create_subject = {
					subject_type = decentralized_vassal
					subject = ROOT
				}
			}
			define_ruler = {
				name = "Fiodor" # His pagan name is unknown
				dynasty = "Gediminai"
				culture = lithuanian
				ADM = 3
				DIP = 3
				MIL = 3
				claim = 95
			}
		}
	}
	# if = {
	# 	limit = {
	# 		is_emperor = yes
	# 		has_global_flag = DG_League_War
	# 		is_in_league_war = no
	# 	}
	# 	country_event = { id = DG_Protestant.031 }
	# }
	clr_country_flag = steppe_declined_tributary
	vassal_type_tracking_effect = yes
	events = {
		flavor_chu.7				# Set flag on CHU when they get PU'd
		flavor_chu.1				# winner inherits CHU
		new_world.1					# winner inherits new world native
		prisonner_of_war.101		# Post-war clean-up
	}
	add_country_modifier = {
		name = just_lost_war_timer
		duration = 10
		hidden = yes
	}
	if = {
		limit = {
			has_country_flag = urbs_mundi_captured
		}
		clr_country_flag = urbs_mundi_captured
	}
}

on_main_war_lost = {
}
on_separate_war_lost = {
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	add_horde_unity = 1
	if = {
		limit = {
			FROM = { has_country_flag = civil_war_rebel_tag }
		}
		random = { 
			chance = 10
			
			country_event = {
				id = civil_wars.201
			}
		}
	}
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	add_horde_unity = -2
	events = {
		timur.21
		timur.23
		timur.42
		timur.56
	}
	if = {
		limit = {
			has_country_flag = ongoing_civil_war
			NOT = { war_score = -40 }
		}
		country_event = {
			id = civil_wars.102
			days = 1
		}
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {

}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
}

# province
# root = location, from = country doing it
on_added_to_trade_company = {
	#log = "[Root.GetName] added to [From.GetName] trade company"
}

# province
# root = location, from = country doing it
on_removed_from_company = {
	# if = {
	# 	limit = {
	# 		NOT = { is_overseas = yes }
	# 		owner = {
	# 			ai = yes
	# 		}
	# 	}
	# 	add_to_trade_company = FROM
	# 	log = "[Root.GetName] removed from [From.GetName] trade company and re-added to trade company"
	# }
	# else = {
	# 	log = "[Root.GetName] removed from [From.GetName] trade company"
	# }
}

# province
# root = location, from = country doing it
on_company_formed = {

}

# province
# root = location, from = country doing it
on_company_disolved = {

}

# province
# root = location, from = winner country
on_battle_lost_province = {
}

# country
# root = winning country, from = location
on_siege_won_country = {
	events = {
		tianxia.136 #Fall of Chinese Capital to a prince
		# White/Blue unification
		timur.53
		timur.54
		Serbia.01
		timur.57
		DG_Catholics.081 #Capturing Rome
	}
	if = {
		limit = {
			NOT = { owns = ROOT }
			mil_tech = 21
			FROM = { has_building = theodosian_walls_b }
		}
		FROM = { remove_building = theodosian_walls_b }
	}
	if = {
		limit = { has_global_flag = DG_Ongoing_Western_Schism }
		if = {
			limit = {
				FROM = { province_id = 202 }
				religion = catholic
			}
			country_event = { id = DG_Papacy.221 }
		}
		else_if = {
			limit = {
				FROM = { province_id = 2530 }
				religion = avignonist
			}
			country_event = { id = DG_Papacy.231 }
		}
	}

	if = {
		limit = { 
			has_country_flag = ongoing_civil_war 
			FROM = {
				owner = { has_country_flag = ongoing_civil_war }
				NOT = { is_capital = yes }
			}
		}

		civil_war_handle_province_siege = yes
	}
	events = {
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
	events = {
		red_turban.14
		timur.21
		timur.23
		timur.42
		timur.56
		Ottomans.018
	}
	
}

# province
# root = location, from = losing country
on_siege_won_province = {
	if = {
		limit = {
			NOT = {
				controlled_by = owner
			}
		}
		province_event = {
			id = POP_Looting.004 days = 0 random = 3
		}
	}
	events = {
	}
}

# province
# root = location, from = losing country
on_siege_lost_province = {
	events = {
		tianxia.150				# Chinese Capital falls
		canarias.10				# Conquistadors overpower the Canarias
	}
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
#	colony_abandon_backup_effect = yes
	log = "[FROM.GetName] Abandonment of [ROOT.GetName]"
}
on_great_project_constructed = {
}

# country
on_monarch_death = {
	if = {
		limit = { 
			tag = PAP 
		}
		PAP = { country_event = { id = DG_Papacy.101 } }
	}
	if = {
		limit = { 
			tag = AVI
		}
		AVI = { country_event = { id = DG_Papacy.101 } }
	}
	temporary_union_break_effect = yes #ends any temporary PUs
	#custom_regency_council_effect = yes #renames regency councils according to the scripted effect, keep in mind that it spawns a "A New $MonarchTitle$" message when it does
	appanage_reversion_effect = yes #for vassals being annexed or PUd under conditions
	clr_country_flag = Tokhtamysh_Has
	if = {
		limit = {
			tag = POL
		}
		POL = { country_event = { id = flavor_pol.500 days = 2 } }  #death of Kazimierz
		POL = { country_event = { id = flavor_pol.505 days = 20 } } #mazovia thing
		POL = { country_event = { id = flavor_pol.302 days = 2 } }  #HUN-PU-> woman
		POL = { country_event = { id = flavor_pol.303 days = 2 } }  #HUN -PU-> male
		POL = { country_event = { id = flavor_pol.305 } } 			#estabilishing Jagiellon dynasty
		POL = { country_event = { id = flavor_pol.767 days = 20 } } #Election after Union of Krakow and Vilnius
	}
	
	if = {
		limit = {
			OR = {
				competitive_trigger = yes
				has_reform = Pol_Succession2
				#is_key_equal = { lhs = Pol_Succession value = 1 }
			}
			is_colonial_nation = no
			num_of_cities = 4
			has_country_flag = POP_Init
			NOT = { Timur_Has = yes }
		}
		if = {
			limit = {
				any_owned_province = {
					is_capital = no
					is_overseas = no
					development = 5
				}
			}
			log = "FE:[GetYear]:[Root.GetName]:on monarch death, pretender spawned:on_monarch_death"
			random_owned_province = {
				limit = {
					is_capital = no
					is_overseas = no
					development = 5
				}
				pretender_rebels = 1
			}
		}
		else = {
			log = "FE:[GetYear]:[Root.GetName]:on monarch death, pretender spawned (province below dev 5):on_monarch_death"
			random_owned_province = {
				limit = {
					is_capital = no
					is_overseas = no
				}
				pretender_rebels = 1
			}	
		}
	}
	if = {
		limit = {
			steppe_trigger = yes
			has_country_flag = POP_Init
			NOT = { Timur_Has = yes }
		}
		add_horde_unity = -20
		Public_ChangePowerbrokerLoyaltyTooltipProv = { Powerbroker=TR Amount=-5 }
		
	}
	else_if = {
		limit = {
			is_nomad = yes
			has_country_flag = POP_Init
			NOT = { Timur_Has = yes }
		}
		add_horde_unity = -10
		Public_ChangePowerbrokerLoyaltyTooltipProv = { Powerbroker=TR Amount=-2.5 }
	}
	events = {
		Horde_Collapse.10	# Horde puppet master dead
		Horde_Collapse.14	# Horde great khan dead
		japan.15			# Underage Shogun
		japan.24			# Adopting accurate name
		japan.25			# Losing Kanrei position
		flavor_anj.1
		kalmar.006 
		kalmar.016
		DG_Hussites.010     #Defenestration of $CAPITAL_CITY$ (historical version)
	}
	if = {
		limit = {
			has_country_flag = Horde_Timur
			is_year = 1420
			NOT = { has_country_flag = Timur_Revolts }
		}
		set_country_flag = Timur_Revolts
		every_subject_country = {
			add_liberty_desire = 25
		}
	}
	if = {
		limit = {
			Timur_Has = yes
			NOT = { has_country_flag = Timur_Dying }
		}
		country_event = { id = timur.17 } # should Timur die
	}
	if = {
		limit = {
			OR = { tag = DEN tag = DAN }
			is_religion_enabled = protestant
			NOT = { religion_years = { protestant = 30 } }
			NOT = { has_country_flag = sankt_sorens_kirke }
			NOT = { has_country_flag = had_counts_feud }
		}
		random = {
			chance = 75
			country_event = { id = counts_feud.001 days = 1825 random = 365 }
		}
	}
	if = {
		limit = {
			tag = HUN
		}
		country_event = { id = flavor_hun.12 }	#Hungary offering its throne to one of its neighbours on Louis d'Anjou death
	}
	if = {
		limit = {
			tag = KBO
			has_idea = kanem_ideas_7
		}
		Stab_Subtract1 = yes
	}
	if = {
		limit = {
			primary_culture = lowland_scottish
			has_idea = scottish_ideas_7
		}
		Stab_Add25Percent = yes
	}
	if = {
		limit = {
			has_country_flag = Horde_Unifier
			is_tribal = no
			is_nomad = no
			#clr_country_flag = Horde_Unifier
			#clr_country_flag = Horde_Puppet_Rule
		}
		clr_country_flag = Horde_Unifier
	}
	
	if = {
		limit = {
			tag = FRA
			has_reform = salic_law_reform
			NOT = { has_ruler = "Dauphin Charles" }
		}
		
		country_event = { id = salic_law.1 }
	}
	if = {
		limit = {
			OR = { 
				tag = KNP 
				tag = NAP 
			}
		}
		country_event = { id = flavor_nap.103 }
	}
}

# country
on_new_monarch = {
	country_event = { id = PTM_Politics.007 } # Ruler Calc for Exec Auth
	country_event = { id = PTM_Politics.005 } # Ruler Alignment for Factions
	# if = {			Mepper: This is too obscure for players to know what is going on. Imo we should target e.g. heir_claim and not use some hidden calcs. 
	# 	limit = {
	# 		legitimacy_equivalent = 50
	# 	}
	# 	POP_GetLegitimacy = { return = Tmp_0 }
	# 	subtract_key = { lhs = Tmp_0 value = 50 }
	# 	divide_key = { lhs = Tmp_0 value = 2 }

	# 	if = { limit = { check_key = { lhs = Tmp_0 value = 16 } } add_legitimacy = -16 add_republican_tradition = -13 add_devotion = -16 add_horde_unity = -16 add_meritocracy = -16 }
	# 	if = { limit = { check_key = { lhs = Tmp_0 value = 8 } } add_legitimacy = -8 add_republican_tradition = -6.5 add_devotion = -8 add_horde_unity = -8 add_meritocracy = -8 }
	# 	if = { limit = { check_key = { lhs = Tmp_0 value = 4 } } add_legitimacy = -4 add_republican_tradition = -3.5 add_devotion = -4 add_horde_unity = -4 add_meritocracy = -4 }
	# 	if = { limit = { check_key = { lhs = Tmp_0 value = 2 } } add_legitimacy = -2 add_republican_tradition = -1.5 add_devotion = -2 add_horde_unity = -2 add_meritocracy = -2 }
	# 	if = { limit = { check_key = { lhs = Tmp_0 value = 1 } } add_legitimacy = -1 add_republican_tradition = -0.75 add_devotion = -1 add_horde_unity = -1 add_meritocracy = -1 }

	# 	set_key = { lhs = Tmp_0 value = 0 }
	# }
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = NO_ConsortOrigin
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = NO_ConsortOrigin }
			remove_province_modifier = NO_ConsortOrigin
		}
	}
	decentral_collapse_check = yes	
	vassal_type_tracking_effect = yes
	if = {
		limit = {
			OR = {
				num_of_cities = 3
				has_country_flag = PriorityTag
			}
		}
		set_country_flag = AITax_Yearly
	}
	#if = {
	#	limit = {
	#		chinese_imperial_gov_trigger = yes
	#		culture_group = chinese_group
	#		has_new_dynasty = yes
	#	}
	#	country_event = { id = tianxia.035 days = 5 } ### event doesn't exist
	#}
	if = {
		limit = {
			tag = DLH
			has_disaster = TwilightOfHindustan
			OR = {
				corruption = 30
				NOT = { check_key = { lhs = Ruler_Skill value = 9 } }
				AND = {
					NOT = { check_key = { lhs = Ruler_Skill value = 12 } }
					corruption = 20
				}
			}
			NOT = { has_global_flag = DLH_Collapse }
		}
		country_event = { id = India.03 }
	}
	if = {
		limit = {
			tag = BLU
			has_country_flag = Tokhtamysh
			NOT = { has_country_flag = Tokhtamysh_Has }
			NOT = { has_country_flag = SpawnedTokhtamysh }
		}
		set_country_flag = SpawnedTokhtamysh
		country_event = { id = timur.46 days = 60 random = 30 }
	}
	if = { limit = { has_country_modifier = Emperor_Gemeiner_Pfennig is_emperor = no }
		remove_country_modifier = Emperor_Gemeiner_Pfennig
		set_key = { lhs = TaxD_HRE value = 0 }
		every_owned_province = { add_province_modifier = { name = HRE_Gemeiner_Pfennig duration = -1 } }
		emperor = { 
			add_country_modifier = { name = Emperor_Gemeiner_Pfennig duration = -1 }
			every_owned_province = { remove_province_modifier = HRE_Gemeiner_Pfennig }
		}
	}
	if = {
		limit = {
			has_regency = no
			NOT = {
				has_ruler_flag = had_culture_religion_reaction_event_flag
			}
			NOT = {
				OR = {
					has_reform = Pol_Succession2
					has_reform = Pol_Succession4
				}

			}
			NOT = {
				tag = PAP
			}
			OR = {
				NOT = {
					ruler_culture = ROOT
				}
				NOT = {
					ruler_religion = ROOT
				}
			}
		}
		set_country_flag = had_culture_religion_reaction_event_flag
		country_event = {
			id = culture_religion_events.2
			days = 75
			random = 7
		}
	}
	if = {
		limit = {
			tag = SWE
			has_country_flag = erik_s_rebellion
			NOT = { RSW = { has_ruler = "Erik Magnusson" } }
		}
		country_event = { id = flavor_swe.4303 }
	}
	if = {
		limit = {
			tag = RSW
			has_country_flag = erik_s_rebellion
			NOT = { SWE = { has_ruler = "Magnus IV Ericson" } }
		}
		country_event = { id = flavor_swe.4304 }
	}
	if = {
		limit = {
			owns = 2530
			NOT = { tag = PAP }
			religion = catholic
		}
		if = {
			limit = { NOT = { has_country_flag = Holds_Urbs_Mundi } }
			set_country_flag = Holds_Urbs_Mundi
			country_event = { id = DG_Catholics.091 }
		}
		else_if = {
			limit = { NOT = { has_country_flag = Concordat_of_Rome } }
			set_country_flag = Possible_Concordat
			country_event = { id = DG_Catholics.089 days = 5 }
		}
	}
	if = {
		limit = {
			has_country_modifier = HRE_infertile_dynasty
			OR = {
				primary_culture = silesian
				primary_culture = german_silesian
			}
			NOT = { dynasty = "Piast" }
		}
		remove_country_modifier = HRE_infertile_dynasty
	}

	if = {
		limit = {
			has_ruler = "Charles V le Sage"
			has_heir_flag = renewed_french_phase
		}
		set_country_flag = charles_v_succession
	}

	if = {
		limit = {
			has_country_flag = charles_v_succession
		}

		country_event = { id = bourguignon_armagnac.2003 days = 5 }
		clr_country_flag = charles_v_succession
	}
	
	
	events = {
		government_reforms.1		# set ruler competency legitimacy modifiers
		japan.15					# Shogun dies childless
		japan.13					# Son of the Retired Emperor (Shogun) becomes the new Emperor
		horde_events.100			# Break apart some temporary unions
		flavor_chu.6				# Chupanid multi-war
		horde_mechanic_events.1		# Applies the proper khanate/puppet khanate state
		#fe_MOL.1					# Moldavia/Walachia decides on Overlord
		tianxia.137					# Appenage dies out
		Horde_Collapse.11			# Horde unifier united clans
		Horde_Collapse.12			# Horde unifier fails the clans
		timur.14					# Subjects breaking free as Moghul
		ghazi.3
		Ottomans.012
		Ottomans.013
		#italy_fifteenthirty.001 
		#hre_dynastic_event.001 
		welfs_dynastic.1 
		welfs_dynastic.3 
		welfs_dynastic.4 
		welfs_dynastic.5 
		wettin_dynastic.1 
		wettin_dynastic.2 
		wettin_dynastic.3 
		wettin_dynastic.4 
		wettin_dynastic.5 
		wettin_dynastic.6 
		wettin_dynastic.7 
		wettin_dynastic.8
		flavor_nap.1				# Naples, nobles trying to setup French pretender if d'Anjou are gone
		flavor_spa.3004 
		flavor_hab.1011 
		flavor_hab.1018
		flavor_bav.203 
		flavor_bav.204
		flavor_brapru.300 
		flavor_brapru.800
		flavor_bur.1001 
		flavor_fla.1
		treaty_pavia.1000
		flavor_mlo.1				# Ambrosian Republic
		flavor_muz.1 				# Fars breakup on ruler death
		#flavor_tur.102 			# Janissary Reward (commented out until disaster is re-activated)
		hohenzollerns_1530.1		# Hohenzollern Sucession, inheriting branch: Brandenburg
		hohenzollerns_1530.2		# Hohenzollern Sucession, inheriting branch: Prussia
		hohenzollerns_1530.7		# Hohenzollern Sucession, Brandenburg->Hohenzollern
		hohenzollerns_1530.8		# Hohenzollern Sucession, Brandenburg->Ansbach
		hohenzollerns_1530.9		# Hohenzollern Sucession, Brandenburg->Bayreuth
		flavor_tur.3377 			# Powerful Haseki Sultan
		dynastic.9492				# Remove some event modifiers from Dynastic events
		rivalry.3 					# Nations that share a dynasty will cease to be historical rivals
		DG_Hussites.009             # Monarch and the Hussites
		flavor_pol.610              # Election of X
		flavor_brb.20				# Succession of Wenceslaus I, Duke of Luxembourg
	}

	random_events = {
		50 = dynastic_events.4		# The Ruler's Daughter
		50 = dynastic_events.5		# Offer Personal Union
	}
	has_heir_check = yes #this should always come last	 
}

on_new_consort = {
	country_event = { id = consort_events.2 days = 30 random = 7 }
	set_consort_flag = marriage_length_timer
	if = {
		limit = { has_heir_flag = son_of_consort }
		clr_heir_flag = son_of_consort
	}
}

# country
on_regent = {
	events = {
		government_reforms.1			# Ruler stats affect legitimacy calc
		PTM_Politics.007				# Ruler Calc for Exec Auth
		PTM_Politics.005				# Ruler Alignment for Factions
		treaty_pavia.1000
		government_reforms.2			# Set ruler competency legitimacy modifiers
	}
	if = {
		limit = {
			#NOT = { has_global_flag = death_of_haji_giray } #the flag should be removed so this event will be more likely to happen
			tag = CRI
		}
		if = {
			limit = {
				exists = TUR
				is_free_or_tributary_trigger = yes
				TUR = {
					num_of_cities = ROOT
					is_free_or_tributary_trigger = yes
					num_of_ports = 1
				}
			}
			country_event = {
				id = flavor_cri.1
			}
		}
		if = {
			limit = {
				OR = {
					NOT = { exists = TUR }
					is_subject_other_than_tributary_trigger = yes
					TUR = {
						NOT = { num_of_cities = ROOT }
					}
					TUR = {
						is_subject_other_than_tributary_trigger = yes
					}
					TUR = {
						NOT = { num_of_ports = 1 }
					}
				}
			}
			log = "FE-CRI:[GetYear]:[Root.GetName]:death_of_haji_giray flag set:on_regent"
			#set_global_flag = death_of_haji_giray #the flag should be removed so this event will be more likely to happen
		}
	}
}
on_extend_regency = {
}


# country
on_new_term_election = {
	events = {
		elections.700		# Election event
		medici_system.4 
		medici_system.12 
		medici_system.48
		elections.800	# Lottery election
	}
}

on_death_election = {
	if = {
		limit = {
			has_reform = Pol_ExtraPowers2
		    #is_key_equal = { lhs = Pol_ExtraPowers value = 1 } 
		}
		remove_government_reform = Pol_ExtraPowers2
		add_government_reform = Pol_ExtraPowers1
	}
	if = {
		limit = {
			has_country_flag = medici_signoria
		}
		country_event = {
			id = medici_system.13
			days = 10
		}
	}
	events = {
		elections.701		# Election event
		elections.800	# Lottery election
		medici_system.1 
		medici_system.2 
		medici_system.3 
		medici_system.49
	}
}

# country
on_death_foreign_slave_ruler = {
	events = {
		mamluk_events.0 # Choose new ruler
	}
}

# country
on_replace_governor = {
	events = {
		elections.707
	}
}

# country
on_bankruptcy = {
	log = "OnAction:[GetYear]:[Root.GetName] bankrupted:on_bankruptcy"
}

# country (country annexing, FROM = target)
on_diplomatic_annex = {
	events = { 
		flavor_anj.3
		flavor_orl.1
	}
	log = "OnAction:[GetYear]:[Root.GetName] diplomatically annexed [From.GetName]:on_diplomatic_annex"
}

# country
on_heir_death = {
	if = {
		limit = {
			tag = AAA
		}
		if = { limit = { has_heir = "dummy_betray_chinese_lord" }
			event_target:betray_chinese_lord_trigger = {
				country_event = { id = tianxia.004 }
			}
		}
	}

	appanage_reversion_effect = yes
	has_heir_check = yes #this should always come last
	#if = {
	#	limit = { has_any_heir_cult_active = yes }
	#	remove_heir_cult = yes
	#}

}

# country
on_queen_death = {
    if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = {
			any_owned_province = {
				has_province_modifier = NO_ConsortOrigin
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = NO_ConsortOrigin }
			remove_province_modifier = NO_ConsortOrigin
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		clr_ruler_flag = has_lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_heir_flag = son_of_consort }
		clr_heir_flag = son_of_consort
	}
	if = {
		limit = { has_ruler_modifier = consort_of_the_people }
		remove_country_modifier = consort_of_the_people
	}
}

# country
on_new_heir = {
	#if = {
	#	limit = { has_any_heir_cult_active = yes }
	#	remove_heir_cult = yes
	#}
	if = {
	    limit = {
		    has_consort = yes
			NOT = { consort_age = 47 }
			NOT = { heir_age = 15 }
			had_consort_flag = { flag = marriage_length_timer days = 270 } #9 months
		}
		set_heir_flag = son_of_consort
	}
	if = {
		limit = {
			tag = AAA
		}
		if = { limit = { has_heir = "dummy_betray_chinese_lord" }
			event_target:betray_chinese_lord_trigger = {
				country_event = { id = tianxia.004 }
			}
		}
	}
	
	events = {
		government_reforms.2	# check if heir claim is above the legitimacy cap
	}

	has_heir_check = yes #this should always come last
}

# country #when an heir with a weak claim ascends
on_weak_heir_claim = {
	if = {
		limit = {
			competitive_trigger = no
			has_country_flag = POP_Init
			NOT = { Timur_Has = yes }
		}
		log = "FE:[GetYear]:[Root.GetName]:on ascension of heir with a weak claim, pretender spawned:on_weak_heir_claim"
		if = {
			limit = {
				steppe_trigger = yes
			}
			random_owned_province = {
				limit = {
					is_capital = no
					is_overseas = no
					development = 3
				}
				pretender_rebels = 1
			}
			random_owned_province = {
				limit = {
					is_capital = no
					is_overseas = no
					development = 5
				}
				pretender_rebels = 2
			}
		}
		else_if = {
		    limit = {
			    num_of_cities = 5
				government = monarchy
			}
			random_owned_province = {
				limit = {
					any_neighbor_province = {
					    is_capital = yes
					}
				}
				pretender_rebels = 2
			}
		}
		else = {
			random_owned_province = {
				limit = {
					is_capital = no
					is_overseas = no
					development = 5
				}
				pretender_rebels = 1
			}
		}
	}
	events = {
	}
}
# country : no heir in theocracy
on_heir_needed_theocracy = {
	define_heir = {
		dynasty = ROOT
	}
	events = {
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	emperor = {
		save_global_event_target_as = Emperor
	}
	events = {
		holyromanempire.900
	}
}

# Called whenever a new emperor is elected
# FROM = Previous Emperor
# ROOT = New Emperor 
on_emperor_elected = {
	every_elector = {
		if = {
			limit = {
				preferred_emperor = root
			}
			change_variable = {
				which = supported_successive_emperors
				value = 1
			}
		}
		else = {
			set_variable = {
				which = supported_successive_emperors
				value = 0
			}
		}
	}
	emperor = {
		save_global_event_target_as = Emperor
	}
	if = {
		limit = { exists = AVI PAP = { guaranteed_by = ROOT } }
		country_event = { id = DG_Papacy.210 days = 15 }
	}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_true_religion = {
	events = {
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	events = {
	}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	events = {
	}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	events = {
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	events = {
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
		HRE_war_mechanics.001
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	events = {
	}
}

# HRE Member takes a HRE province from an outside country in a peace (province scope)
on_hre_province_reconquest = {
	events = {
	}
}

on_lock_hre_religion = {
	events = {
	}
}

on_change_hre_religion = {
	events = {
	}
}

on_hre_religion_white_peace = {
	events = {
	}
}

# When a non-native changes government type
on_government_change = {
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = NO_ConsortOrigin
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = NO_ConsortOrigin }
			remove_province_modifier = NO_ConsortOrigin
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
	#despotisation_effect = yes
}

# Nation is integrated after being in union
# seems to not support Scopes or is not triggered by diplomatic action (perhaps only triggered by inheritance)
on_integrate = {
	log = "OnAction:[GetYear]:[Root.GetName] integrated [From.GetName]:on_integrate"
	if = {
		limit = { FROM = { has_country_flag = Holds_Urbs_Mundi } }
		FROM = { clr_country_flag = Holds_Urbs_Mundi }
		set_country_flag = Holds_Urbs_Mundi
		if = {
			limit = {
				ROOT = { colony = 1 }
				FROM = { colony = 1 }
			}
			country_event = { id = colonial_nation.220 days = 5 }
		}
	}
	events = {
	}
}

# Nation annexed
# FROM is the nation being annexed, ROOT is the annexing country
# Also triggered by diplomatic actions annexationaction and also integrationaction
on_annexed = {
	if = {
		limit = {
			has_country_flag = China_Rebel
		}
		country_event = { id = red_turban.24 }
	}
	FROM = {
		clr_country_flag = POP_Init
		set_key = { lhs = Vassal_Type value = 0 }

		if = { 
			limit = {
				is_subject_other_than_tributary_trigger = yes
				ROOT = { overlord_of = FROM }
			}
			diplomatic_annexation_subject_transfer_effect = yes
		}
		else = {
			war_annexation_subject_transfer_effect = yes
		}
	}
	if = {
		limit = {
			ROOT = { colony = 1 }
			FROM = { colony = 1 }
		}
		country_event = { id = colonial_nation.220 days = 5 }
	}
	if = {
		limit = { FROM = { has_country_flag = Holds_Urbs_Mundi } }
		FROM = { clr_country_flag = Holds_Urbs_Mundi }
		set_country_flag = Holds_Urbs_Mundi
	}
	if = {
		limit = {
			FROM = { 
				is_emperor_of_china = yes
			}
		}
		set_emperor_of_china = ROOT
		set_country_flag = annexed_emperor_of_china
	}
	if = {
		limit = {
			has_country_flag = has_overriden_color_flag
		}
		restore_country_color = yes	
		#log = "[Root.GetName] had color restored:on_annexed"
		clr_country_flag = has_overriden_color_flag
	}
	events = {
	}
}

on_embrace_revolution = {
	set_country_flag = had_revolution
}

on_dismantle_revolution = {
	parliamentarisation_effect = yes
	exile_ruler_as = { name = revolution_target_ruler } #they'll be back ;)
	set_revolution_target = ---
	if = {
		limit = { has_heir = yes }
		exile_heir_as = revolution_target_heir
	}
	events = {
	}
}

# province
on_adm_development = {
	if = { limit = { base_tax = 0 }
		add_base_tax = -1
	}

	if = {
		limit = {
			owner = { ai = no }
		}
		owner = {
			change_key = { lhs = Class_Layer value = 1 }

			if = {
				limit = {
					OR = {
						check_key = { lhs = Class_Layer value = 5 }
						
						AND = {
							NOT = {
								has_country_flag = UI_Tooltip_On
							}
							
							check_key = { lhs = Class_Layer value = 4 }
						}
					}
				}
				set_key = { lhs = Class_Layer value = 0 }
			}

			every_owned_province = {
				limit = {
					isValidEmpty = yes
				}
				set_key = { lhs = Class_Layer which = PREV }
			}
			save_event_target_as = Plague
			every_known_country = {
				limit = {
					isValidCountry = yes
				}
				every_owned_province = {
					limit = {
						isValidEmpty = yes
					}
					set_key = { lhs = Class_Layer which = event_target:Plague }
				}
			}
		}
	}
}

# province #not used
on_dip_development = {
	if = { limit = { base_production = 0 }
		add_base_production = -1
	}
	if = {
		limit = {
			owner = { ai = no NOT = { has_country_flag = UI_Freeze } }
		}
		if = {
			limit = {
				OR = {
					has_province_flag = Pin_Show
					has_province_flag = UI_Select
				}
			}
			Pow_UI_R = yes
		} 
		else = {
			Pow_UI = yes
		}
	}
}

# province #not used
on_mil_development = {
	if = { limit = { base_manpower = 0 }
		add_base_manpower = -1
	}

	if = {
		limit = {
			owner = { ai = no NOT = { has_country_flag = UI_Freeze } }
		}
		if = {
			limit = {
				OR = {
					has_province_flag = Pin_Show
					has_province_flag = UI_Select
				}
			}
			Pow_UI_R = yes
		}
		else = {
			Pow_UI = yes
		}
	}
}

on_overextension_pulse = {
}

on_colonial_pulse = {
	random_events = {
		10000 = 0
		100 = colonial.12
		100 = colonial.17
	}
}

on_siberian_pulse = {
}

# country random events
on_monthly_pulse = {
}
on_yearly_pulse = {
	events = {
		MEC_Post.001
		flavor_hyw.11
		flavor_hyw.12
		flavor_hyw.13
		flavor_hyw.16
		flavor_hyw.18
		flavor_hyw.19
	}
	if = {
		limit = {
			had_global_flag = {
				flag = mec_diplomacy_alliance_negotiations
				days = 365
			}
		}
		clr_global_flag = mec_diplomacy_alliance_negotiations
	}
}
on_yearly_pulse_2 = {
    events = {
		DG_Hussites.022
		consort_events.301
		consort_events.302
	}
	if = {
		limit = { catholic_trigger = yes }
		random_owned_province = {
		    random_list = {
			    1 = { province_event = { id = DG_Catholics.503 days = 1 } }  #Canonization of a Saint
				1 = { province_event = { id = DG_Catholics.512 days = 1 } }  #Our Lady of $PROVINCENAME$
				3 = { province_event = { id = DG_Papacy.908 days = 1 } }     #Indulgence Peddler
				5 = { province_event = { id = DG_Catholics.505 days = 1 } }  #Bishop of $PROVINCENAME$
			    10 = { province_event = { id = DG_Papacy.906 days = 1 } }    #Absentee Bishop
				10 = { province_event = { id = DG_Papacy.907 days = 1 } }    #Bishop's Mistress
				10 = { province_event = { id = DG_Catholics.402 days = 1 } } #Augustinian Monks
				10 = { province_event = { id = DG_Catholics.403 days = 1 } } #Dominican Friars
				10 = { province_event = { id = DG_Catholics.404 days = 1 } } #Cistercian Monks
				10 = { province_event = { id = DG_Catholics.405 days = 1 } } #Franciscan Friars
				10 = { province_event = { id = DG_Catholics.406 days = 1 } } #Jesuit Monks
				10 = { province_event = { id = DG_Catholics.504 days = 1 } } #The First Estate
			}
		}
	}
}
on_yearly_pulse_3 = {
    if = { #Beginning of Second League War
		limit = {
		    NOT = { has_global_flag = DG_Second_League_War }
			NOT = { has_global_flag = DG_Third_League_War }
			had_global_flag = { flag = DG_Augsburg_Interim days = 1095 } #4 years
		}
		clr_global_flag = DG_Augsburg_Interim
		set_global_flag = DG_Leagues_Active
		if = {
		    limit = {
			    emperor = { religion = catholic }
			}
			emperor = { 
				enable_hre_leagues = yes
				set_hre_heretic_religion = protestant
			}
		}
		if = {
		    limit = {
			    emperor = { NOT = { religion = catholic } }
			}
			emperor = { 
				enable_hre_leagues = yes
				set_hre_heretic_religion = catholic
			}
		}
	}
	if = { #Beginning of Third League War
		limit = {
		    has_global_flag = DG_Second_League_War
			NOT = { has_global_flag = DG_Third_League_War }
			had_global_flag = { flag = DG_Augsburg_Interim days = 18250 } #50 years
		}
		clr_global_flag = DG_Augsburg_Interim
		set_global_flag = DG_Leagues_Active
		if = {
		    limit = {
			    emperor = { religion = catholic }
			}
			emperor = { 
				enable_hre_leagues = yes
				set_hre_heretic_religion = protestant
			}
		}
		if = {
		    limit = {
			    emperor = { NOT = { religion = catholic } }
			}
			emperor = { 
				enable_hre_leagues = yes
				set_hre_heretic_religion = catholic
			}
		}
	}
}
on_yearly_pulse_4 = {
}
on_yearly_pulse_5 = {
}

# country random events
on_bi_yearly_pulse = {
	events = {
		PTM_Politics.100 	# Trigger rivalry
		ostsiedlung.1001
		#POP_Census.709		# Forced exploration idea group progression
		Ottomans.028
		red_turban.28
		flavor_tre.1
	}
	random_events = {
		100 = PTM_Politics.003 
		100 = PTM_Politics.004 
		100 = PTM_Politics.008
		#Mamluk Events

		175 = mamluk_events.1
		175 = mamluk_events.3
		235 = mamluk_events.4
		185 = mamluk_events.5

		#Culture and Religion Events
		75 = culture_religion_events.1
		#75 = culture_religion_events.3
		#75 = culture_religion_events.4
		#75 = culture_religion_events.5
		75 = culture_religion_events.6
		75 = culture_religion_events.7
		75 = culture_religion_events.8
		75 = culture_religion_events.9
		75 = culture_religion_events.10
		75 = culture_religion_events.11
		75 = culture_religion_events.12
		75 = culture_religion_events.13
		75 = culture_religion_events.14
		75 = culture_religion_events.15
		75 = culture_religion_events.16
		50 = culture_religion_events.17
		75 = culture_religion_events.18
		75 = culture_religion_events.19
		75 = culture_religion_events.20
		#125 = culture_religion_events.21
		75 = culture_religion_events.22
		75 = culture_religion_events.23
		
		100 = DG_Papacy.901 #The Doctrine of Particular Judgement
		100 = DG_Papacy.902 #Simony
		100 = DG_Papacy.903 #Selling of Indulgences
		100 = DG_Papacy.904 #Veneration of Relics
		100 = DG_Papacy.905 #Veneration of Virgin Mary
		
		#Industrial Revolution
		200 = industrialization_events.1  #The Atmospheric Engine
		200 = industrialization_events.2  #Coke Blast Furnaces
		200 = industrialization_events.3  #Watt Steam Engine
		200 = industrialization_events.4  #Rotherham Plough
		200 = industrialization_events.5  #Flying Shuttle
		200 = industrialization_events.6  #Spinning Jenny
		100 = industrialization_events.8  #Seeds of Greatness
		100 = industrialization_events.13 #Industrial Urbanization
		100 = industrialization_events.14 #The Metalworks
		100 = industrialization_events.15 #Textile Mills
		100 = industrialization_events.16 #Shipyards
		100 = industrialization_events.17 #Hostility to new production techniques
		100 = industrialization_events.18 #Impoverished Artisans
		100 = industrialization_events.19 #Spread of Disease
		100 = industrialization_events.20 #Mining Accident
		100 = industrialization_events.21 #Fire of X
		2800 = 0
	}
}

on_bi_yearly_pulse_2 = {
#	every_owned_province = {
#		limit = {
#			isValidEmpty = yes
#		}
#		MN_GetSlot_Class = yes
#	}
	#if = {
	#	limit = { tag = PAP  }
	#	country_event = { id = DG_Papacy.999 }
	#	country_event = { id = DG_Papacy.999 days = 365 }
	#}
	events = {
		DG_Zoroastrian.001
	}
}

on_bi_yearly_pulse_3 = {
	if = {
		limit = { tag = AAA }
		if = {
			limit = { hre_reform_passed = son_voting_dynastic_inheritence }

			country_event = { id = holyromanempire.3 days = 1 } # Fix HRE dynastic inheritance elector setup
		}
	}
	events = {
		red_turban.6
		red_turban.8
		red_turban.42

		flavor_swe.4305

		flavor_hyw.100 #Gaining Calais back (Hundred Years War)
		flavor_hyw.303 #Spaniards not paying the Black Prince back
	}
}

on_bi_yearly_pulse_4 = {
    random_events = {
		100 = 5008 # Gift to the state
		100 = 5014 # Insanity of the monarch
		100 = 5027 # Reformation of army
		100 = 5032 # Reformation of navy
		100 = 5051 # Unhappines among artisans
		100 = 5052 # Unhappines among peasants
		100 = 5053 # Unhappines among merchants
		100 = 5063 # Noble families feud
		100 = 5064 # Nobles ally with foreign power
		100 = 5065 # Assassination of the noble
		100 = 5068 # Sale of offices
		100 = 5071 # Nobles demand increased pensions
		50 = 5075 # Nobles demand old rights
		100 = 5076 # Cities demand old rights
		50 = 5083  # Italian engineer available
		100 = 5086 # Uncooperative philosopher
		100 = 5088 # Merchants harassed
		100 = 5089 # Petition for redress
		100 = 5090 # Noble family requests aid
		100 = 5093 # Parliament demands advisor's removal
		100 = 5095 # Statesman gains power
		100 = 6012 # Court painter
		100 = 6013 # Grand ball
		100 = 711  # Priests are preaching heresy
		100 = 715  # Monarch embarasses the court
		100 = 722  # Sickness of monarch
		100 = 736  # Death of a merchant
		100 = 737  # Local fortification expert
		100 = 738  # Naive relative
		100 = 740  # Smugglers running rampart
		100 = 838  # An example to us all
		100 = 854  # Golden era for culture
		100 = 865  # Influential preacher
		100 = 872  # Travelling minstrel
		100 = 874  # Tensions between nobles and clergy
		100 = 878  # Disagreeing advisor
		100 = 883  # Patronage for renaissance arts
		100 = random_event.3   # Traitor in parliament 
		100 = random_event.8   # Heresy
		100 = random_event.12  # The white elephant
		100 = random_event.15  # Musket or bow
		50 = random_event.27   # The great fire of capital
		2000 = 0
	}
}

on_bi_yearly_pulse_5 = {

}

on_thri_yearly_pulse = {
	events = {
		#POP_Census.116 # edu system
		mec_coal_events.0	#AI system to open coal slots, no need to fire this often
	}
}

on_thri_yearly_pulse_2 = {
	events = {
	    DG_Catholics.010    #Founding of the Jesuits
		DG_Catholics.413    #The Jesuits
		DG_Catholics.415    #Jesuit Education
	}
	random_events = {
	    50 = DG_Papacy.909        #Ecclesiastical Jurisdiction
		100 = DG_Catholics.407    #Agricultural Innovation
		100 = DG_Catholics.408    #Monastic Protests
		100 = DG_Catholics.409    #Book Burning
		100 = DG_Catholics.410    #Monastic Dispute
		100 = DG_Catholics.411    #Monks preach against heresy
		100 = DG_Catholics.501    #Candidate for Sainthood
		100 = DG_Catholics.513    #Auto da fe
		100 = DG_Papacy.910       #Popular Piety
		1000 = 0
	}
}

on_thri_yearly_pulse_3 = {
	events = {
		AI_Invest.2
	}
	random_events = {
		250 = consort_events.1
		100 = consort_events.5
		100 = consort_events.6
		100 = consort_events.51
		100 = consort_events.52
		100 = consort_events.53
		100 = consort_events.54
		100 = consort_events.55
		100 = consort_events.56
		100 = consort_events.101
		100 = consort_events.103
		100 = consort_events.104
		100 = consort_events.303
		100 = consort_events.304
		100 = consort_events.305
		100 = consort_events.306
		100 = consort_events.307
		50 = consort_events.311
		100 = consort_events.312
		100 = consort_events.313
		10 = consort_events.314
		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
	random_events = {
		100 = nobles_estate_events.1
		100 = nobles_estate_events.2
		100 = nobles_estate_events.3
		100 = nobles_estate_events.4
		100 = nobles_estate_events.5
		100 = nobles_estate_events.6
		100 = nobles_estate_events.7
		100 = nobles_estate_events.8
		100 = nobles_estate_events.9
		100 = nobles_estate_events.10
		100 = nobles_estate_events.11
		50 = burghers_estate_events.1
		100 = burghers_estate_events.2
		50 = burghers_estate_events.3
		100 = burghers_estate_events.4
		100 = burghers_estate_events.6
		100 = burghers_estate_events.7
		100 = burghers_estate_events.10
		100 = burghers_estate_events.11
		100 = burghers_estate_events.12
		100 = burghers_estate_events.13
		100 = burghers_estate_events.14
		100 = burghers_estate_events.15
		2000 = 0
	}
}

on_four_year_pulse = {
	#if = {
	#	limit = {
	#		ai = yes
	#		isValidCountry = yes
	#	}
	#	#country_event = { id = Prov_UI.013 } # Burghers Grant (privileges)
	#	#country_event = { id = Prov_UI.023 } # Burghers Revoke (privileges)
	#	
	#}
	random_events = {
		1000 = 0
		25 = colonial_nation.4
		25 = colonial_nation.10
		25 = colonial_nation.12
		25 = colonial_nation.14
		25 = colonial_nation.77
	}
}

on_four_year_pulse_2 = {
	#if = {
	#	limit = {
	#		ai = yes
	#		isValidCountry = yes
	#	}
	#	#country_event = { id = Prov_UI.015 } # Clergy Grant (privileges)
	#	#country_event = { id = Prov_UI.025 } # Clergy Revoke (privileges)
	#	
	#}
	if = {
		limit = { ai = yes western_christian = yes NOT = { has_country_modifier = evangel_cm } }
		country_event = { id = DG_Inquisition.001 }
	}
	events = {
	}
	random_events = {
		1000 = 0
		25 = dynastic.9460 			#Heir goes out at night
		50 = dynastic.9459			#Hunting accident
		25 = dynastic.9462			#Scheming bureaucracy
		50 = dynastic.9468			#Regent usurps the throne
		25 = dynastic.9469			#Born under a star
		150 = dynastic.9481			#Fear and Loathing
		100 = dynastic.9484			# Wedding bells
		25 = dynastic.9488			#Last war was a failure
		25 = dynastic.9489			#The moon
		25 = dynastic.9490			#Seeing the real you
		25 = dynastic_events.2		#Newborn daughter
		25 = dynastic_events.3		#Talented and ambitious daughter
		25 = dynastic.9451			#A beloved heir dies
		50 = dynastic.9453			#The weeping song
		25 = dynastic.9456			#Heir falls ill
		25 = dynastic.9457			#Child in the Reeds
	}
}

on_four_year_pulse_3 = {
	#if = {
	#	limit = {
	#		ai = yes
	#		isValidCountry = yes
	#	}
	#	#country_event = { id = Prov_UI.017 } # Clans Grant (privileges)
	#	#country_event = { id = Prov_UI.027 } # Clans Revoke (privileges)
	#	
	#}
	events = {
		DG_Protestant.007	#1st Diet of Speyer; fire_only_once and checks for a unique Global Flag that's set in fire_only_once event
		DG_Protestant.009	#2nd Diet of Speyer; fire_only_once and checks for a unique Global Flag that's set in fire_only_once event
		dg_humanism.001     #Birth of Renaissance
		dg_humanism.002     #The $PRIMARY_CULTURE$ Renaissance
		dg_humanism.011     #Veiled criticism of the church
		dg_humanism.014     #The $PRIMARY_CULTURE$ Bible
		dg_humanism.026     #The Christian ethics
	}
}

on_four_year_pulse_4 = {
	events = {
		AI_Invest.3
	}
	if = {
		limit = { tag = AAA }
		if = {
			limit = { is_religion_enabled = hussite OR = { NOT = { religion_years = { hussite = 30 } } AND = { NOT = { any_country = { religion = hussite } } NOT = { religion_years = { hussite = 5 } } } }  NOT = { has_global_flag = hus_schism_compromise } NOT = { has_global_flag = hus_schism_mended } }
			country_event = { id = DG_Hussites.100 days = 110 } 
		}
	}
}

on_five_year_pulse = {
	if = {
		limit = { tag = AAA }
		if = {
			limit = { is_religion_enabled = lollard NOT = { religion_years = { lollard = 30 } } NOT = { has_global_flag = lol_schism_compromise } NOT = { has_global_flag = lol_schism_mended } }
			country_event = { id = DG_Lollards.100 days = 160 } 
		}
	}
	events = {
		AI_Invest.4
		Plague_Spawner.5
		flavor_spa.8002
		#POP_Census.117 # World education system
		flavor_hyw.31
		flavor_pol.601					#Polish-Lithuanion union signings
		flavor_pol.602
		flavor_pol.603
		flavor_pol.604
		capital_city.002 #looking for better capital city
	}
	random_events = {
		50 = Plague_Spawner.1
		50 = 0
	}
}

on_five_year_pulse_2 = {
	### TRIGGER TAG REFORM AI
	random_events = {
		750 = counts_feud.003
		1000 = 0
		150 = haiti.4				#Culture of Caribean colony changes to Maroon
		75 = flavor_hab.3201		#Austian flavor events, moved to on_actions triggered to save performance
		150 = flavor_hab.3203 
		300 = flavor_hab.3202	   
		300 = flavor_hab.3208
		550 = flavor_hab.3099
		550 = flavor_hab.3328
		550 = flavor_hab.3332
		550 = flavor_hab.3333
		550 = flavor_hab.1
		550 = flavor_hab.2
		550 = flavor_hab.4
		250 = flavor_hab.6
		1000 = flavor_hab.7
		5000 = flavor_hab.5191
		550 = flavor_hab.1007
		4000 = hee_HAB.3
		5000 = flavor_hab.5190
		250 = colonial_nation.75
	}
}

on_five_year_pulse_3 = {
	if = {
		limit = {
			tag = AAA	
		}
		country_event = { id = POP_Census.995 }
	}
	if = {
		limit = { ai = yes NOT = { tag = PAP } western_christian = yes NOT = { dominant_religion = owner } NOT = { religion = overlord } is_force_converted = no }
		country_event = { id = DG_Convert.301 }
	}
	if = {
		limit = { tag = AAA }
		if = {
			limit = { is_religion_enabled = waldensian  NOT = { religion_years = { waldensian = 100 } }  NOT = { has_global_flag = wal_schism_compromise } NOT = { has_global_flag = wal_schism_mended } }
			country_event = { id = DG_Waldensians.100 days = 150 }
		}
	}
	if = {
		limit = {
			NOT = { is_religion_enabled = reformed }
			OR = {
				religion = catholic
				religion = avignonist
			}
			OR = {
				tag = PAP
				tag = AVI
				is_emperor = yes
				is_papal_controller = yes
				AND = {
					owns = 183
					OR = {
						has_country_modifier = title_5
						has_country_modifier = title_6
					}
				}
			}
		}
		country_event = { id = DG_Catholics.009 }
	}
}

on_five_year_pulse_4 = {
	if = {
		limit = {
			tag = AAA
		}
		country_event = { id = mission_event.999 } #flavour from missions the AI can't complete
	}
	events = {
		slots.1
		colonial_nation.201 #Brazil
		colonial_nation.202 #Canada
		colonial_nation.203 #La Plata
		colonial_nation.204 #California
		colonial_nation.205 #Louisiana
		colonial_nation.206 #Eastern America
		colonial_nation.207 #Hispaniola/Caribeans
		colonial_nation.208 #Australia
		colonial_nation.209 #Colombia
		colonial_nation.210 #Peru
		#colonial_nation.211 #Mexico
	}
	random_events = {
		50 = AI_Budget.11
		50 = 0
	}
	if = {
		limit = { western_christian = yes NOT = { has_country_flag = DG_Lutheran_Spread } is_religion_enabled = protestant NOT = { religion_years = { protestant = 25 } } }
		if = {
			limit = { any_neighbor_country = { religion = protestant } }
			random_list = {
				30 = { }
				60 = { country_event = { id = DG_Protestant.003 } }
			}
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = germany_superregion superregion = scandinavian_superregion AND = { superregion = british_isles_superregion NOT = { region = ireland_region } } AND = { superregion = commonwealth_superregion owner = { government = theocracy } } } } NOT = { has_global_flag = DG_First_Diet_of_Speyer } }
			random_list = {
				50 = { }
				50 = { country_event = { id = DG_Protestant.003 } }
			}
		}
		else_if = {
			limit = { capital_scope = { OR = { superregion = germany_superregion superregion = scandinavian_superregion AND = { superregion = british_isles_superregion NOT = { region = ireland_region } } AND = { superregion = commonwealth_superregion owner = { government = theocracy } } owner = { religion = hussite } owner = { religion = lollard } } } has_global_flag = DG_First_Diet_of_Speyer }
			random_list = {
				10 = { }
				90 = { country_event = { id = DG_Protestant.003 } }
			}
		}
		else = {
			random_list = {
				60 = { }
				30 = { country_event = { id = DG_Protestant.003 } }
			}
		}
	}
	else_if = {
		limit = { has_country_flag = silence_02 religion_years = { protestant = 100 } }
		clr_country_flag = silence_02
	}
	if = {
		limit = { western_christian = yes NOT = { has_country_flag = DG_Calvinist_Spread } is_religion_enabled = reformed NOT = { religion_years = { reformed = 5 } } }
		if = {
			limit = { any_neighbor_country = { religion = reformed } }
			random_list = {
				60 = { }
				30 = { country_event = { id = DG_Reformed.003 } }
			}
		}
		else_if = {
			limit = { capital_scope = { OR = { region = low_countries_region region = switzerland_region superregion = france_superregion AND = { superregion = british_isles_superregion NOT = { region = ireland_region } } owner = { religion = hussite } owner = { religion = lollard } } } }
			random_list = {
				30 = { }
				60 = { country_event = { id = DG_Reformed.003 } }
			}
		}
		else = {
			random_list = {
				80 = { }
				20 = { country_event = { id = DG_Reformed.003 } }
			}
		}
	}
	else_if = {
		limit = { has_country_flag = silence_03 religion_years = { reformed = 100 } }
		clr_country_flag = silence_03
	}
}

# El Dorado
on_explore_coast = {
}

on_conquistador_empty = {
}

on_conquistador_native = {
}

on_buy_religious_reform = {
	events = {
	}
}

on_circumnavigation = {
	log = "FE:[GetYear]:[Root.GetName]:Circumnavigation achieved [From.GetName]"
	events = {
	}
}

on_become_free_city = {
	make_free_city_effect = yes
	log = "FE-HRE:[GetYear]:[Root.GetName]:became Free City:on_become_free_city"
}

on_remove_free_city = {
	add_government_reform = Pol_Privileges1
	log = "FE-HRE:[GetYear]:[Root.GetName]:stopped being a Free City:on_remove_free_city"
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
}

on_revoke_estate_land = {
	#if = {
	#	limit = {
	#		owner = { NOT = { has_country_flag = UI_Freeze } }
	#	}
	#	Pow_UI_R = yes
	#}
	#else = {
	#	#set_estate = UI_Select
	#}
}
on_revoke_estate_land_ai_post = {
}
on_revoke_estate_land_post = {
}

on_grant_estate_land = {
	#if = {
	#	limit = {
	#		owner = { NOT = { has_country_flag = UI_Freeze } }
	#	}
	#	Pow_UI = yes
	#}
	#else = {
	#	#remove_estate = UI_Select
	#}
}

on_death_has_harem = {
	if = {
		limit = {
			has_heir = no
			OR = {
				has_country_flag = Timur_Dead
				NOT = { has_country_flag = Horde_Timur }
			}
		}
		country_event = { id = harem_events.2 }
	}
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {

}

# country
on_gain_great_power_status = {
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
}

# province
# Triggers only on missionary conversion. No Centers of Reformation, Trade Religion Propagation or Effects. - Inimicus
on_province_religion_converted = {
	events = {
		DG_Convert.005
	}
}

on_province_religion_changed = {
}

# province
on_province_culture_converted = {
	if = {
		limit = {
			always = yes
		}
		if = {
			limit = { NOT = { check_key = { lhs = Culture_Progress value = 80 } } }
			hidden_effect = {
				change_key = { lhs = Culture_Progress value = 20 }
				change_culture = variable:Culture_Prev
			}
			custom_tooltip = Culture_20
		}
		else = {
			hidden_effect = {
				set_key = { lhs = Culture_Progress value = 0 }
			}
		}
	}
}
# province, general conversion through effects
on_province_culture_changed = {
} 

# THIS = Province, FROM = Country who Propogated
# WORKS EXACTLY AS ADVERTISED. AAAAAAAAAAAAAAA - Inimicus
on_convert_by_trade_policy = {
	province_event = { id = DG_Convert.009 days = 5 }
}

# province
on_province_owner_change = {
	if = {
		limit = {
			NOT = { has_global_flag = POP_Sim }
		}
		clr_province_flag = LandInt
		set_key = { lhs = LandInt_Units value = 0 }
		Prov_OwnerChange_effect = yes
		DiploAnnex_Remove = yes
		if = {
			limit = {
				NOT = { is_month = 1 }
				owner = { NOT = { has_country_flag = POP_Init } }
				owner = { num_of_cities = 1 }
				isValidProv = yes
			}
			owner = {
				country_event = {
					id = Init.3
				}
			}
		}
		FROM  = {
			if = {
				limit = {
					OR = {
						exists = no
						NOT = { num_of_cities = 1 }
					}
				}
				clr_country_flag = POP_Init
				set_key = { lhs = Vassal_Type value = 0 }
			}
			else = {
				set_country_flag = AITax_Yearly
			}
		}
		
		if = {
			limit = {
				is_city = yes
			}
			Tax_Clean = yes
			SetStateMaintOnProvChange = yes
			owner = {
				set_country_flag = AITax_Yearly
			}
		}
		if = {
			limit = {
				AND = {
				
					12 = { has_province_modifier = oresund_toll_tm } #Check that the toll exists
				
					OR = { #Check that the province that changes hands is one of whose control allows the toll to be implemented
					
						province_id = 12	# Copenhagen
						province_id = 14	# Fyun
						province_id = 15	# Jutland
						province_id = 1428 # Laland
						province_id = 2755	# Syaland
						province_id = 6 # Skane
					}
				}	
			}
			12 = { remove_province_modifier = oresund_toll_tm }
		}
	}
	if = {
		limit = {
			owner = { religion_group = christian }
			NOT = { owner = { has_country_flag = ifrikiya_ambitions } }
			has_province_flag = latin_med_coast
		}
		owner = {
			set_country_flag = ifrikiya_ambitions
			swap_non_generic_missions = yes
		}
	}
	else_if = {
		limit = {
			owner = { religion_group = muslim }
			NOT = { owner = { has_country_flag = s_of_rum } }
			NOT = { owner = { has_country_flag = uwrubba_ambitions } }
			has_province_flag = maghreb_med_coast
		}
		owner = {
			set_country_flag = uwrubba_ambitions
			swap_non_generic_missions = yes
		}
	}
	set_key = { lhs = Heresy_Scalar value = 0 }
	if = {
		limit = { MN_CheckSize = { religion = 1 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 1 }
	}
	else_if = {
		limit = { MN_CheckSize = { religion = 2 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 2 }
	}
	else_if = {
		limit = { MN_CheckSize = { religion = 3 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 3 }
	}
	else_if = {
		limit = { MN_CheckSize = { religion = 4 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 4 }
	}
	else_if = {
		limit = { MN_CheckSize = { religion = 5 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 5 }
	}
	else_if = {
		limit = { MN_CheckSize = { religion = 6 type = Inquis prop = 1 } }
		set_key = { lhs = Heresy_Scalar value = 6 }
	}
	if = {
		limit = {
			check_key = { lhs = Heresy_Scalar value = 1 }
		}
		MN_Attribute_Reset = { reltype = which religion = Heresy_Scalar typeEffect = Inquis typeStrength = value strength = 0 }
	}
	set_key = { lhs = Heresy_Scalar value = 0 }
	if = {
		limit = {
			province_id = 2530	#Roma
			owner = { NOT = { has_country_flag = Holds_Urbs_Mundi } }
		}
		owner = { country_event = { id = DG_Catholics.082 } }
	}
	if = {
		limit = {
			is_overseas = yes
			trade_company_region_trigger = yes
		}
		add_to_trade_company = owner
	}
	events = {
		DG_Convert.013
		DG_Convert.003
		SYS_Colony.001
		DG_Convert.012
		DG_Convert.014
	}
}

# country
on_parliament_debate_reset = {
}

#province
on_parliament_seat_given = {
}

#province
on_parliament_seat_lost = {
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

#Chinese Empire on_actions

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	clear_global_event_target = EmperorOfChina
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	save_global_event_target_as = EmperorOfChina
	if = {
		limit = {
			OR = {
				NOT = { government = monarchy }
				government = tribal
			}
		}
		change_government = monarchy
		add_government_reform = Pol_Succession5
		add_government_reform = Pol_Assembly1
		add_government_reform = Pol_Nobility1
	}
	add_government_reform = celestial_empire
	set_meritocracy = 60
	every_ally = {
		ROOT = { break_alliance = PREV }
	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	Stab_Subtract2 = yes
	remove_government_reform = celestial_empire
	add_government_reform = Pol_Privileges1
}

# country
on_harmonized_pagan = {
}

on_harmonized_christian = {
}

on_harmonized_muslim = {
}

on_harmonized_jewish_group = {
}

on_harmonized_zoroastrian_group = {

}

on_harmonized_buddhism = {
}

on_harmonized_dharmic = {
}

on_harmonized_mahayana = {
}

on_harmonized_buddhism = { #Theravada
}

on_harmonized_shinto = {
}

on_harmonized_vajrayana = {
}

on_harmonized_new_world_pagan = {
}

on_harmonized_european_pagan = {
}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
	add_army_professionalism = 0.002
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	FROM = {
		add_army_professionalism = -0.0025
		hidden_effect = { Merc_Update = yes }
	}
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
}

# THIS = Province
on_janissaries_raised = {

}

on_cawa_raised = {
}

on_carolean_raised = {
}

on_hussars_raised = {
}

on_revolutionary_guard_raised = {
}

on_banner_raised = {
	owner = { 
		if = { 
			limit = { has_country_flag = refund_partial_corruption_on_banner_recruited_flag }
			add_corruption = -0.1
		}
	}
}

on_cossack_raised = {
}

on_marine_raised = {
}

on_rajput_raised = {
}

on_streltsy_raised = {
}

on_tercio_raised = {
}

on_musketeer_raised = {
}

on_samurai_raised = {
}

on_qizilbash_raised = {
}

on_mamluks_raised = {
}
on_geobukseon_raised = {
}

on_man_of_war_raised = {
}

on_galleon_raised = {
}

on_galleass_raised = {
}

on_caravel_raised = {
}

on_voc_indiamen_raised = {
}

on_hre_reform_passed = {
}

on_mandate_reform_passed = {
}
on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {
}

on_center_of_trade_downgrade = {
}

on_culture_promoted = {

}

on_culture_demoted = {
	
}

on_primary_culture_changed = {
	
}


# FROM = Previous Country, ROOT = Province
on_company_chartered = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	#log = "[Root.GetName] gained rule over [From.GetName] who is now their dependency"
	if = {
		limit = {
			FROM = { is_subject_other_than_tributary_trigger = yes }
		}
		set_country_flag = tf_recalculate_communication_efficiency
		overlord = { set_country_flag = tf_recalculate_communication_efficiency }
		FROM = { 
			set_country_flag = tf_recalculate_communication_efficiency 
			every_subject_country = {
				limit = {
					is_subject_other_than_tributary_trigger = yes
				}
				set_country_flag = tf_recalculate_communication_efficiency
			}
		}
	}
	FROM = { 
		if = {
			limit = {
				OR = {
					AND = {
						is_subject_of_type = daimyo_vassal
						NOT = { check_key = { lhs = Vassal_Type value = 1 } }
						OR = {
							NOT = { culture_group = japanese_g }
							overlord = { NOT = { culture_group = japanese_g } }
						
						}
					}
					is_subject_of_type = vassal
				}
			}
			ROOT = {
				create_subject = {
					subject_type = custom_vassal
					subject = FROM
				}
			}
		}
		country_event = {
			id = Init.1
		}
	}
	FROM = {
		subject_transition_effect = yes
		#log = "[This.GetName] had subject_transition_effect that can affect color:on_dependency_gained"
		set_key = { lhs = Integration_Progress value = 0 }
		set_key = { lhs = Remaining_Years value = 0 }
	}
	FROM = { 
		if = { limit = { OR = { is_subject_of_type = personal_union is_subject_of_type = personal_union_limited } }
			every_subject_country = { limit = { OR = { is_subject_of_type = permanent_union is_subject_of_type = permanent_union_limited } }
				grant_independence_effect = yes ROOT = { create_subject = { subject_type = permanent_union_limited 	subject = PREV  } }
			}
			every_country = { #vanilla bug - not sure if it needs to be two sided tbh
				limit = {
					NOT = {
						tag = ROOT
					}
				}
				break_marriage = PREV
				PREV = {
					break_marriage = PREV
				}
			}
		}
	}
	FROM = {
		if = {
			limit = {
				subject_with_overlord_color_trigger = yes
			}
			change_country_color = { country = overlord }
			#log = "[This.GetName] had color changed to match their overlord:on_dependency_gained"
			set_country_flag = has_overriden_color_flag
		}
	}
	# FROM = {
	# 	country_event = {  id = flavor_pol.504 days = 3 }
	# }
	events = {
	}
}

# ROOT = Overlord, FROM = Minor
# is not triggered from "grant_independence = yes" effect
# is not triggered from "free_vassal = yes" effect
on_dependency_lost = {
	#log = "[Root.GetName] lost rule over [From.GetName] who used to be their dependency"
	set_country_flag = tf_recalculate_communication_efficiency
	overlord = { set_country_flag = tf_recalculate_communication_efficiency }
	FROM = { 
		set_country_flag = tf_recalculate_communication_efficiency 
		every_subject_country = {
			limit = {
				is_subject_other_than_tributary_trigger = yes
			}
			set_country_flag = tf_recalculate_communication_efficiency
		}
		set_key = { lhs = Integration_Progress value = 0 }
		set_key = { lhs = Remaining_Years value = 0 }
		vassal_type_tracking_effect = yes 
	}
	FROM = {
		if = {
			limit = {
				has_country_flag = has_overriden_color_flag
			}
			restore_country_color = yes	
			#log = "[This.GetName] had color restored:on_dependency_lost"
			clr_country_flag = has_overriden_color_flag
		}
		every_subject_country = {
			if = {
				limit = {
					has_country_flag = has_overriden_color_flag
				}
				restore_country_color = yes	
				#log = "[This.GetName] had color restored:on_dependency_lost"
				clr_country_flag = has_overriden_color_flag
			}
			if = {
				limit = {
					subject_with_overlord_color_trigger = yes
				}
				change_country_color = { country = overlord }
				#log = "[This.GetName] had color changed to match their overlord:on_dependency_lost"
				set_country_flag = has_overriden_color_flag
			}
		}
	}
}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	#log = "[From.GetName] created [Root.GetName] as a vassal:on_create_vassal"
	if = {
		limit = {
			subject_with_overlord_color_trigger = yes
		}
		change_country_color = { country = overlord }
		#log = "[This.GetName] had color changed to match their overlord:on_create_vassal"
		set_country_flag = has_overriden_color_flag
	}
	FROM = {
		country_event = {
			id = mec_vassals.5
		}
		set_key = { lhs = Integration_Progress value = 0 }
		set_key = { lhs = Remaining_Years value = 0 }
	}
	country_event = {
		id = Init.2
	}
	if = {
		limit = {
			tag = PAP
		}
		change_government = theocracy
	}
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {
}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	#if = {
	#	limit = {
	#		has_faction = pr_buccaneers
	#	}
	#	add_faction_influence = {
	#		faction = pr_buccaneers
	#		influence = 1
	#	}
	#}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
	#	country_event = { id = flagship_events.2 }
		set_country_flag = trophy_hunter_flag
	}
	#FROM = {
	#	country_event = { id = flagship_events.1 }
	#}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	#ROOT = {
	#	country_event = { id = flagship_events.4 }
	#}
	#FROM = {
	#	country_event = { id = flagship_events.3 }
	#}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	#adopt_reform_progress = FROM not sire this does what we think it does
	country_event = {
		id = Init.2
	}
	if = {
		limit = {
			tag = PAP
		}
		change_religion = catholic
		Pol_ChangeGovTheocracy = { Organisation=3 Mediumship=4 Assembly=1 }
	}
	set_key = { lhs = Vassal_Type value = 0 }
	set_key = { lhs = Integration_Progress value = 0 }
	#log = "[From.GetName] released [This.GetName]"
}

# ROOT = province, FROM = country
on_trade_good_changed = {
}

# this = country
on_loan_repaid = {
}

# this = country
on_rebels_break_country = {
	log = "OnAction:[GetYear]:[Root.GetName]:Rebels broke country:on_rebels_break_country"
	add_country_modifier = {
		name = just_lost_to_rebels
		duration = 10
		hidden = yes
	}
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_adm_advisor
		}
		set_country_flag = just_fired_adm_advisor
		remove_advisor_by_category_no_action = ADM
	}
}

# this = country
on_pre_dip_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_dip_advisor
		}
		set_country_flag = just_fired_dip_advisor
		remove_advisor_by_category_no_action = DIP
	}
}

# this = country
on_pre_mil_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {

}

# this = country
on_post_dip_advisor_fired = {
	
}

# this = country
on_post_mil_advisor_fired = {
	
}

# this = new client state, from = parent country
on_create_client_state = {
	if = {
		limit = {
			has_dlc = "Emperor"
			FROM = {
				is_revolutionary = yes
			}
			government = republic
		}
		set_country_flag = had_revolution
	}
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
	set_country_flag = enacted_golden_bull
}

on_country_creation = {
	if = {
		limit = {
			tag = PAP
		}
		change_religion = catholic
		Pol_ChangeGovTheocracy = { Organisation=3 Mediumship=4 Assembly=1 }
	}
	if = {
		limit = {
			tag = AVI
		}
		change_religion = avignonist
		Pol_ChangeGovTheocracy = { Organisation=3 Mediumship=4 Assembly=1 }
	}
}

on_federation_leader_change = {
	if = {
		limit = { tag = FROM }
		disband_federation = THIS
	}
	else = {
		# New strongest member becomes the new federation leader
		set_federation_leader = THIS
	}
}
on_pillaged_capital = {
	#slave_raid_pillage_capital_effect = yes
}

#FROM = country dev was transferred from, ROOT = country doing the transferring
on_transfer_development = {
}
#FROM = overlord, ROOT - colony
on_colonial_type_change = {
	clr_country_flag = encourage_cash_crops_flag
}

on_estate_led_regency = {
}

on_estate_led_regency_surpassed = {
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	if = {
		limit = {
			NOT = { has_global_flag = POP_Sim }
		}
		add_province_modifier = {
			name = ProvConquest
			duration = 3650
		}
	}
}

on_extended_regency = {
	#random_events = {
	#	300 = 0
	#}
}

on_estate_removed = {
}

##scope = colony province, FROM = owner country or province if there's a minority expulsion source, fires when the colony is created
on_colony_established = {
	if = {
		limit = {
			OR = {
				province_id = 481 #Bermuda
				province_id = 368 #Madeira
				province_id = 367 #Azores
			}
		}
		change_culture = FROM
	}
	province_event = {
		id = SYS_Colony.001
	}
}

#scope = new country, FROM = parent country
on_colonial_nation_established = {
	country_event = { id = Init.2 days = 1 }
}

on_colonist_boosting_colony = {
}

on_force_conversion = {
}

on_institution_embracement = {
	if = {
		limit = {
			has_country_modifier = HadMeritocracy
			has_institution = Meritocracy_Inst
		}
		remove_country_modifier = HadMeritocracy
	}
}
on_national_focus_change = {}

#FROM = previous capital, ROOT = new capital, FROM -> previous capital, PREV -> nothing (no pointer to previous capital)
on_capital_moved = {
	log = "OnAction:[GetYear]:[Root.Owner.GetName]:changed capital from [From.GetName] to [This.GetName]:on_capital_moved"
	owner = {
		if = {
			limit = {
				is_part_of_hre = yes
				ROOT = {
					is_part_of_hre = no
				}
			}
			leave_the_hre = yes
			emperor = {
				add_opinion = {
					who = PREV
					modifier = hre_province_left
				}
			}
			add_imperial_influence = -1
			log = "OnAction:[GetYear]:[Root.Owner.GetName]:left HRE after moving its capital to [Root.GetName]:on_capital_moved"
		}
		hidden_effect = {
			set_country_flag = tf_recalculate_communication_efficiency
			set_country_flag = AITax_Yearly
		}
		country_event = { 
			id = capital_city.001 #Event looking for a new capital city on loss of the previous capital, allowing for a change without the cost
		}
	}

	province_event = {
		id = SYS_Colony.004 ## Spawn new industries
		days = 2 #give capital_city.001 event a chance to move the capital to its proper place
	}
}

on_expanded_infrastructure = {
	
}
on_centralized_state = {
}

#ROOT = country
monarch_on_shipwreck = {
}

heir_on_shipwreck = {
}

consort_on_shipwreck = {
}

#ROOT = country
on_defender_of_faith_loss = {
}

on_defender_of_faith_claim = {
}

on_hre_dismantled = {
}

on_new_age = {
}

#ROOT = province
on_adm_exploited = {
}

on_dip_exploited = {
}

on_mil_exploited = {
}

on_raze = {
}

on_concentrate_development = {
}

on_slacken_start = {
}
on_slacken_stop = {
}

on_colony_finished = { #ROOT - Province
}

on_advisor_hired = { #ROOT - Country

}

on_adm_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_dip_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_mil_advisor_hired = { #ROOT - Country, executed after on_advisor_hired!

}

on_core = { #ROOT - Province, #FROM - Country that gets the core

}

on_tech_taken = { #ROOT - Country

}

on_adm_tech_taken = { #ROOT - Country, executed after on_tech_taken!

}

on_dip_tech_taken = { #ROOT - Country, executed after on_tech_taken!

}

on_mil_tech_taken = { #ROOT - Country, executed after on_tech_taken!

} 

on_barrage = { #ROOT - barraging country, FROM - barraged province 

}

on_naval_barrage = { #ROOT - barraging country, FROM - barraged province 

}

on_scorch_earth  = { #ROOT - scorching country, FROM - scorched province

}

on_war_ended = { #ROOT - Winer FROM - Loser
}

on_alliance_broken = { #ROOT - Original alliance creator, FROM - Alliance accepter
}

on_royal_marriage_broken = { #ROOT - Original marriage creator, FROM - Marriage accepter

}

on_alliance_created = { #ROOT - Alliance sender, FROM - Alliance accepter

}

on_royal_marriage = { #ROOT - Marraige sender, FROM - marriage accepter

}

on_heir_disinherited = {
	
}

on_overrun = { #ROOT - winner, FROM - loser, on stackwipe

}