Prov_PowInit = {
	# Tax_Tmp8 = Local Autonomy (LA)
	# Tax_Tmp9 = Inverse LA
	export_to_key = { lhs = Tax_Tmp8 value = local_autonomy }
	set_key = { lhs = Tax_Tmp9 which = Tax_Tmp8 }
	multiply_key = { lhs = Tax_Tmp8 value = 0.01 }
	multiply_key = { lhs = Tax_Tmp9 value = -0.01 }
	change_key = { lhs = Tax_Tmp9 value = 1 }

	# Tax_Tmp6 = Sum of Rural Wealth
	set_key = { lhs = Tax_Tmp6 value = 0 }

	# Create a sum of class rural wealth, for use in calcing wealth share	
	change_key = { lhs = Tax_Tmp6 which = SF_Wealth }
	change_key = { lhs = Tax_Tmp6 which = NM_Wealth }
	change_key = { lhs = Tax_Tmp6 which = NO_Wealth }
	subtract_key = { lhs = Tax_Tmp6 value = 3 }
	if = {
		limit = {
			NOT = { check_key = { lhs = Tax_Tmp6 value = 0 } }
		}
		set_key = { lhs = Tax_Tmp6 value = 0 }
	}
	
	if = {
		limit = {
			check_key = { lhs = CL_PrpResources value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = CL_PrpResources }
		change_key = { lhs = Tmp_0 which = CL_PrpBuilding }
		multiply_key = { lhs = Tmp_0 value = 0.01 }
		set_key = { lhs = Tmp_1 which = CL_PrpResources }
		multiply_key = { lhs = Tmp_1 value = 0.01 }
		divide_key = { lhs = Tmp_1 which = Tmp_0 }
		multiply_key = { lhs = Tmp_1 which = CL_Wealth }
		
		change_key = { lhs = Tax_Tmp6 which = Tmp_1 }
		set_key = { lhs = Tmp_0 value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
	}
 
	set_key = { lhs = Tax_Tmp7 value = 0 }
	
	# Create a sum of class urban wealth, for use in calcing wealth share
	change_key = { lhs = Tax_Tmp7 which = RE_Wealth }
	change_key = { lhs = Tax_Tmp7 which = BG_Wealth }
	subtract_key = { lhs = Tax_Tmp7 value = 2 }
	if = {
		limit = {
			NOT = { check_key = { lhs = Tax_Tmp7 value = 0 } }
		}
		set_key = { lhs = Tax_Tmp7 value = 0 }
	}
	
	if = {
		limit = {
			check_key = { lhs = CL_PrpBuilding value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = CL_PrpResources }
		change_key = { lhs = Tmp_0 which = CL_PrpBuilding }
		multiply_key = { lhs = Tmp_0 value = 0.01 }
		set_key = { lhs = Tmp_1 which = CL_PrpBuilding }
		multiply_key = { lhs = Tmp_1 value = 0.01 }
		divide_key = { lhs = Tmp_1 which = Tmp_0 }
		multiply_key = { lhs = Tmp_1 which = CL_Wealth }
		
		change_key = { lhs = Tax_Tmp7 which = Tmp_1 }
		set_key = { lhs = Tmp_0 value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
	}

	if = {
		limit = {
			owner = { 
				has_reform = Pol_Centralisation5
				#is_key_equal = { lhs = Pol_Centralisation value = 4 } 
			}
		}
		set_key = { lhs = Tmp_1 value = 1 }
	}
	else_if = {
		limit = {
			owner = { 
				has_reform = Pol_Centralisation4
				#is_key_equal = { lhs = Pol_Centralisation value = 3 } 
			}
		}
		set_key = { lhs = Tmp_1 value = 0.75 }
	}
	else_if = {
		limit = {
			owner = { 
				has_reform = Pol_Centralisation3
				#is_key_equal = { lhs = Pol_Centralisation value = 2 } 
			}
		}
		set_key = { lhs = Tmp_1 value = 0.5 }
	}
	else_if = {
		limit = {
			owner = { 
				has_reform = Pol_Centralisation2
				#is_key_equal = { lhs = Pol_Centralisation value = 1 } 
			}
		}
		set_key = { lhs = Tmp_1 value = 0.25 }
	}
	else = {
		set_key = { lhs = Tmp_1 value = 0.1 }
	}
	if = {
		limit = {
			has_province_modifier = Prov_Autonomy75
		}
		subtract_key = { lhs = Tmp_1 value = 0.75 }
	}
	else_if = {
		limit = {
			has_province_modifier = Prov_Autonomy50
		}
		subtract_key = { lhs = Tmp_1 value = 0.5 }
	}
	else_if = {
		limit = {
			has_province_modifier = Prov_Autonomy25
		}
		subtract_key = { lhs = Tmp_1 value = 0.25 }
	}
	if = {
		limit = {
			check_key = { lhs = Tmp_1 value = 1.001 }
		}
		set_key = { lhs = Tmp_1 value = 1 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Tmp_1 value = 0 } }
		}
		set_key = { lhs = Tmp_1 value = 0 }
	}
	set_key = { lhs = Tmp_2 value = 1 }
	subtract_key = { lhs = Tmp_2 which = Tmp_1 }
	
	
	set_key = { lhs = Tax_Tmp0 which = Tmp_1 }
	multiply_key = { lhs = Tax_Tmp0 which = Tax_Tmp9 }
	set_key = { lhs = Tax_Tmp1 which = Tmp_2 }
	set_key = { lhs = Tax_Tmp2 which = Tax_Tmp0 }
	change_key = { lhs = Tax_Tmp2 which = Tax_Tmp1 }
	

	### Work out effect of privileges on elite tax avoidance
	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	set_key = { lhs = Tmp_4 value = 0 }
	set_key = { lhs = Tmp_5 value = 0 }

	# Inverse effect via corruption
	
	set_key = { lhs = Tmp_3 which = Prov_BUPow }
	multiply_key = { lhs = Tmp_3 value = 0.005 }
	change_key = { lhs = Tmp_3 value = 0.5 }

	# Loyalty restores some tax, proportionate to loyalty * factor
	set_key = { lhs = Tmp_2 value = 100 }
	subtract_key = { lhs = Tmp_2 which = Prov_NOLoy }
	multiply_key = { lhs = Tmp_2 value = 0.01 }
	if = { limit = { check_key = { lhs = Tmp_2 value = 0.5 } } set_key = { lhs = Tmp_2 value = 0.5 } }
	change_key = { lhs = Tmp_2 value = 0.5 }
	
	set_key = { lhs = Tmp_4 which = Prov_BULoy }
	multiply_key = { lhs = Tmp_4 which = Tmp_2 }
	
	set_key = { lhs = NO_Multi value = 100 }
	subtract_key = { lhs = NO_Multi which = Tmp_4 }
	multiply_key = { lhs = NO_Multi value = 0.01 }

	# Preset tribal cap
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		set_key = { lhs = Prov_TRPowCap value = 100 }
		subtract_key = { lhs = Prov_TRPowCap which = Prov_TRPow }
	}
	else = {
		set_key = { lhs = Prov_TRPowCap value = 0 }
	}

	# Privileges
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_NOTaxE value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_NOTaxE }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_NOTax which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_NOTax value = 1 }
	}
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_NOServiceE value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_NOServiceE }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_NOService which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_NOService value = 1 }
	}

	### Burghers
	# Loyalty restores some tax, proportionate to loyalty * factor
	set_key = { lhs = Tmp_2 value = 100 }
	subtract_key = { lhs = Tmp_2 which = Prov_BGLoy }
	multiply_key = { lhs = Tmp_2 value = 0.01 }
	if = { limit = { check_key = { lhs = Tmp_2 value = 0.5 } } set_key = { lhs = Tmp_2 value = 0.5 } }
	change_key = { lhs = Tmp_2 value = 0.5 }
	
	set_key = { lhs = Tmp_4 which = Prov_BULoy }
	multiply_key = { lhs = Tmp_4 which = Tmp_2 }
	
	set_key = { lhs = BG_Multi value = 100 }
	subtract_key = { lhs = BG_Multi which = Tmp_4 }
	multiply_key = { lhs = BG_Multi value = 0.01 }

	# Privileges
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_BGTax value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_BGTax }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_BGTax which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_BGTax value = 1 }
	}
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_BGService value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_BGService }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_BGService which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_BGService value = 1 }
	}

	### Clergy
	# Loyalty restores some tax, proportionate to loyalty * factor
	set_key = { lhs = Tmp_2 value = 100 }
	subtract_key = { lhs = Tmp_2 which = Prov_CLLoy }
	multiply_key = { lhs = Tmp_2 value = 0.01 }
	if = { limit = { check_key = { lhs = Tmp_2 value = 0.5 } } set_key = { lhs = Tmp_2 value = 0.5 } }
	change_key = { lhs = Tmp_2 value = 0.5 }
	
	set_key = { lhs = Tmp_4 which = Prov_BULoy }
	multiply_key = { lhs = Tmp_4 which = Tmp_2 }
	
	set_key = { lhs = CL_Multi value = 100 }
	subtract_key = { lhs = CL_Multi which = Tmp_4 }
	multiply_key = { lhs = CL_Multi value = 0.01 }

	# Privileges
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_CLTax value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_CLTax }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_CLTax which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_CLTax value = 1 }
	}
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_CLService value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_CLService }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_CLService which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_CLService value = 1 }
	}

	### Clans
	# Loyalty restores some tax, proportionate to loyalty * factor
	set_key = { lhs = Tmp_2 value = 100 }
	subtract_key = { lhs = Tmp_2 which = Prov_TRLoy }
	multiply_key = { lhs = Tmp_2 value = 0.01 }
	if = { limit = { check_key = { lhs = Tmp_2 value = 0.5 } } set_key = { lhs = Tmp_2 value = 0.5 } }
	change_key = { lhs = Tmp_2 value = 0.5 }
	
	set_key = { lhs = Tmp_4 which = Prov_BULoy }
	multiply_key = { lhs = Tmp_4 which = Tmp_2 }
	
	set_key = { lhs = TR_Multi value = 100 }
	subtract_key = { lhs = TR_Multi which = Tmp_4 }
	multiply_key = { lhs = TR_Multi value = 0.01 }

	# Privileges
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_TRTax value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_TRTax }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_TRTax which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_TRTax value = 1 }
	}
	if = {
		limit = {
			owner = {
				check_key = { lhs = Privilege_TRService value = 1 }
			}
		}
		owner = {
			set_key = { lhs = Tmp_1 which = Privilege_TRService }
			PREV = { set_key = { lhs = Tmp_1 which = PREV } }
			set_key = { lhs = Tmp_1 value = 0 }
		}
		multiply_key = { lhs = Tmp_1 value = 0.16 }
		#multiply_key = { lhs = Tmp_1 which = Tmp_3 }
		set_key = { lhs = Tmp_0 value = 1 }
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }

		set_key = { lhs = Privilege_TRService which = Tmp_0 }
	}
	else = {
		set_key = { lhs = Privilege_TRService value = 1 }
	}

	# Dont increase tax
	if = {
		limit = {
			check_key = { lhs = TR_Multi value = 1.0 }
		}
		set_key = { lhs = TR_Multi value = 1.0 }
	}
	if = {
		limit = {
			check_key = { lhs = CL_Multi value = 1.0 }
		}
		set_key = { lhs = CL_Multi value = 1.0 }
	}
	if = {
		limit = {
			check_key = { lhs = BG_Multi value = 1.0 }
		}
		set_key = { lhs = BG_Multi value = 1.0 }
	}
	if = {
		limit = {
			check_key = { lhs = NO_Multi value = 1.0 }
		}
		set_key = { lhs = NO_Multi value = 1.0 }
	}
	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
	
	set_key = { lhs = Tax_EfficUni which = Tax_Tmp2 }
	multiply_key = { lhs = Tax_EfficUni which = Admin_EfficUni }
	set_key = { lhs = Tax_EfficInd which = Tax_Tmp2 }
	multiply_key = { lhs = Tax_EfficInd which = Admin_EfficInd }
	set_key = { lhs = Tax_EfficDir which = Tax_Tmp2 }
	multiply_key = { lhs = Tax_EfficDir which = Admin_EfficDir }
}
Prov_TaxInit = {
	set_key = { lhs = TaxD_Total value = 0 }
	if = {
		limit = {
			owner = { 
				ai = no
			}
		}
		set_key = { lhs = TaxD_SF value = 0 }
		set_key = { lhs = TaxD_SFFees value = 0 }
		set_key = { lhs = TaxD_SFFeesAdmin value = 0 }
		set_key = { lhs = TaxD_SFPoll value = 0 }
		set_key = { lhs = TaxD_SFSaltBU value = 0 }
		set_key = { lhs = TaxD_SFSubstancesBU value = 0 }
		set_key = { lhs = TaxD_SFTimberBU value = 0 }
		set_key = { lhs = TaxD_SFAlcoholBU value = 0 }
		set_key = { lhs = TaxD_SFLand value = 0 }
		set_key = { lhs = TaxD_SFPropertyBU value = 0 }
		set_key = { lhs = TaxD_SFChattel value = 0 }
		set_key = { lhs = TaxD_SFInheritance value = 0 }
		set_key = { lhs = TaxD_SFRents value = 0 }
		set_key = { lhs = TaxD_RE value = 0 }
		set_key = { lhs = TaxD_RERents value = 0 }
		set_key = { lhs = TaxD_REFees value = 0 }
		set_key = { lhs = TaxD_REFeesAdmin value = 0 }
		set_key = { lhs = TaxD_REPoll value = 0 }
		set_key = { lhs = TaxD_RESaltBU value = 0 }
		set_key = { lhs = TaxD_RESubstancesBU value = 0 }
		set_key = { lhs = TaxD_RETimberBU value = 0 }
		set_key = { lhs = TaxD_REAlcoholBU value = 0 }
		set_key = { lhs = TaxD_RELand value = 0 }
		set_key = { lhs = TaxD_REPropertyBU value = 0 }
		set_key = { lhs = TaxD_REChattel value = 0 }
		set_key = { lhs = TaxD_REInheritance value = 0 }
		set_key = { lhs = TaxD_NO value = 0 }
		set_key = { lhs = TaxD_NOFees value = 0 }
		set_key = { lhs = TaxD_NOFeesAdmin value = 0 }
		set_key = { lhs = TaxD_NOPoll value = 0 }
		set_key = { lhs = TaxD_NOLand value = 0 }
		set_key = { lhs = TaxD_NOSaltBU value = 0 }
		set_key = { lhs = TaxD_NOSubstancesBU value = 0 }
		set_key = { lhs = TaxD_NOTimberBU value = 0 }
		set_key = { lhs = TaxD_NOAlcoholBU value = 0 }
		set_key = { lhs = TaxD_NOPropertyBU value = 0 }
		set_key = { lhs = TaxD_NOChattel value = 0 }
		set_key = { lhs = TaxD_NOInheritance value = 0 }
		set_key = { lhs = TaxD_BG value = 0 }
		set_key = { lhs = TaxD_BGRents value = 0 }
		set_key = { lhs = TaxD_BGFees value = 0 }
		set_key = { lhs = TaxD_BGFeesAdmin value = 0 }
		set_key = { lhs = TaxD_BGPoll value = 0 }
		set_key = { lhs = TaxD_BGLand value = 0 }
		set_key = { lhs = TaxD_BGSaltBU value = 0 }
		set_key = { lhs = TaxD_BGSubstancesBU value = 0 }
		set_key = { lhs = TaxD_BGTimberBU value = 0 }
		set_key = { lhs = TaxD_BGAlcoholBU value = 0 }
		set_key = { lhs = TaxD_BGPropertyBU value = 0 }
		set_key = { lhs = TaxD_BGChattel value = 0 }
		set_key = { lhs = TaxD_BGInheritance value = 0 }
		set_key = { lhs = TaxD_CL value = 0 }
		set_key = { lhs = TaxD_CLFees value = 0 }
		set_key = { lhs = TaxD_CLFeesAdmin value = 0 }
		set_key = { lhs = TaxD_CLPoll value = 0 }
		set_key = { lhs = TaxD_CLLand value = 0 }
		set_key = { lhs = TaxD_CLSaltBU value = 0 }
		set_key = { lhs = TaxD_CLSubstancesBU value = 0 }
		set_key = { lhs = TaxD_CLTimberBU value = 0 }
		set_key = { lhs = TaxD_CLAlcoholBU value = 0 }
		set_key = { lhs = TaxD_CLPropertyBU value = 0 }
		set_key = { lhs = TaxD_CLChattel value = 0 }
		set_key = { lhs = TaxD_CLInheritance value = 0 }
		
		set_key = { lhs = TaxD_NOObligations value = 0 }
		set_key = { lhs = TaxD_CLObligations value = 0 }
		set_key = { lhs = TaxD_BGObligations value = 0 }
		
		set_key = { lhs = TaxD_SFRentsNO value = 0 }
		set_key = { lhs = TaxD_RERentsNO value = 0 }
		set_key = { lhs = TaxD_BGRentsNO value = 0 }
		set_key = { lhs = TaxD_SFPropBG value = 0 }
		set_key = { lhs = TaxD_REPropBG value = 0 }
		set_key = { lhs = TaxD_NOPropBG value = 0 }
		set_key = { lhs = TaxD_BGPropBG value = 0 }
		set_key = { lhs = TaxD_CLPropBG value = 0 }
		
		set_key = { lhs = TaxD_BGCommerceNO value = 0 }
		
		set_key = { lhs = TaxD_REPropNO value = 0 }
		set_key = { lhs = TaxD_NOPropNO value = 0 }
		set_key = { lhs = TaxD_BGPropNO value = 0 }
		set_key = { lhs = TaxD_CLPropNO value = 0 }
		
		set_key = { lhs = TaxD_SFDonationsCL value = 0 }
		set_key = { lhs = TaxD_REDonationsCL value = 0 }
		set_key = { lhs = TaxD_NODonationsCL value = 0 }
		set_key = { lhs = TaxD_BGDonationsCL value = 0 }
		
		set_key = { lhs = TaxD_SFTitheCL value = 0 }
		set_key = { lhs = TaxD_RETitheCL value = 0 }
		
		set_key = { lhs = TaxD_NMTributeTR value = 0 }
		set_key = { lhs = TaxD_SFTributeTR value = 0 }
		set_key = { lhs = TaxD_RETributeTR value = 0 }
		set_key = { lhs = TaxD_NOTributeTR value = 0 }
		set_key = { lhs = TaxD_BGTributeTR value = 0 }
		set_key = { lhs = TaxD_CLTributeTR value = 0 }
		
		set_key = { lhs = TaxD_BGCommerce value = 0 }
		
		set_key = { lhs = TaxD_SFTeuton value = 0 }
		set_key = { lhs = TaxD_CLTeuton value = 0 }
		set_key = { lhs = TaxD_BGTeuton value = 0 }
		set_key = { lhs = TaxD_SFKnights value = 0 }
		set_key = { lhs = TaxD_CLKnights value = 0 }
		set_key = { lhs = TaxD_NOKnights value = 0 }
		set_key = { lhs = TaxD_BGKnights value = 0 }
		
		#set_key = { lhs = TaxD_REGuilds value = 0 }
			
		set_key = { lhs = TaxD_SFHRE value = 0 }
		set_key = { lhs = TaxD_CLHRE value = 0 }
		set_key = { lhs = TaxD_NOHRE value = 0 }
		set_key = { lhs = TaxD_BGHRE value = 0 }
		
		set_key = { lhs = TaxD_NOObligationsNO value = 0 }
		set_key = { lhs = TaxD_BGObligationsBG value = 0 }
		set_key = { lhs = TaxD_CLObligationsCL value = 0 }
		set_key = { lhs = TaxD_NOObligationsTR value = 0 }
		
		set_key = { lhs = TaxD_SFExciseBG value = 0 }
		set_key = { lhs = TaxD_REExciseBG value = 0 }
		set_key = { lhs = TaxD_BGExciseBG value = 0 }
		set_key = { lhs = TaxD_NOExciseBG value = 0 }
		set_key = { lhs = TaxD_CLExciseBG value = 0 }
		
		set_key = { lhs = TaxD_BGPost value = 0 }
		set_key = { lhs = Tax_Emperor value = 0 }
		set_key = { lhs = Tax_Knights value = 0 }
		set_key = { lhs = Tax_Teuton value = 0 }
		set_key = { lhs = TaxD_CLCharitySF value = 0 }
		set_key = { lhs = TaxD_CLCharityRE value = 0 }
		set_key = { lhs = TaxD_SFExciseBU value = 0 }
		set_key = { lhs = TaxD_REExciseBU value = 0 }
		set_key = { lhs = TaxD_NOExciseBU value = 0 }
		set_key = { lhs = TaxD_BGExciseBU value = 0 }
		set_key = { lhs = TaxD_CLExciseBU value = 0 }
		set_key = { lhs = TaxD_ExciseBU value = 0 }

		
		set_key = { lhs = TaxD_SF_BU value = 0 }
		set_key = { lhs = TaxD_SF_Flow value = 0 }
		set_key = { lhs = TaxD_RE_BU value = 0 }
		set_key = { lhs = TaxD_RE_Flow value = 0 }
		set_key = { lhs = TaxD_NM_BU value = 0 }
		set_key = { lhs = TaxD_NM_Flow value = 0 }
		set_key = { lhs = TaxD_NO_BU value = 0 }
		set_key = { lhs = TaxD_NO_Flow value = 0 }
		set_key = { lhs = TaxD_BG_BU value = 0 }
		set_key = { lhs = TaxD_BG_Flow value = 0 }
		set_key = { lhs = TaxD_CL_BU value = 0 }
		set_key = { lhs = TaxD_CL_Flow value = 0 }

		set_key = { lhs = TaxD_NM value = 0 }
	}
	set_key = { lhs = TaxD_TR value = 0 }
	set_key = { lhs = TaxD_Industry value = 0 }
	set_key = { lhs = TaxD_BUProperty value = 0 }
	set_key = { lhs = TaxD_Fees value = 0 }
	set_key = { lhs = TaxD_FeesAdmin value = 0 }
	set_key = { lhs = TaxD_Rents value = 0 }
	set_key = { lhs = TaxD_Obligations value = 0 }
	set_key = { lhs = TaxD_Poll value = 0 }
	set_key = { lhs = TaxD_Land value = 0 }
	set_key = { lhs = TaxD_PropertyBU value = 0 }
	set_key = { lhs = TaxD_Chattel value = 0 }
	set_key = { lhs = TaxD_Inheritance value = 0 }
	set_key = { lhs = TaxD_TollBU value = 0 }
	set_key = { lhs = TaxD_SaltBU value = 0 }
	set_key = { lhs = TaxD_SubstancesBU value = 0 }
	set_key = { lhs = TaxD_TimberBU value = 0 }
	set_key = { lhs = TaxD_AlcoholBU value = 0 }
	set_key = { lhs = TaxD_ForestBU value = 0 }
	set_key = { lhs = TaxD_Corruption value = 0 }
	set_key = { lhs = TaxD_Farming value = 0 }
	set_key = { lhs = TaxD_Direct value = 0 }
	set_key = { lhs = TaxD_Indirect value = 0 }
	set_key = { lhs = TaxD_Revenue value = 0 }
	set_key = { lhs = TaxD_Post value = 0 }
	set_key = { lhs = TaxD_ObligationsTR value = 0 }
	set_key = { lhs = TaxD_HRE value = 0 }
	set_key = { lhs = TaxD_Knights value = 0 }
	set_key = { lhs = TaxD_Teuton value = 0 }
	
	set_key = { lhs = TaxD_RentsNO value = 0 }
	set_key = { lhs = TaxD_GameNO value = 0 }
	set_key = { lhs = TaxD_ForestryNO value = 0 }
	set_key = { lhs = TaxD_CommerceNO value = 0 }
	set_key = { lhs = TaxD_PropBG value = 0 }
	set_key = { lhs = TaxD_PropNO value = 0 }
	set_key = { lhs = TaxD_TollBG value = 0 }
	set_key = { lhs = TaxD_ExciseBG value = 0 }
	set_key = { lhs = TaxD_TitheCL value = 0 }
	set_key = { lhs = TaxD_DonationsCL value = 0 }
	set_key = { lhs = TaxD_TributeTR value = 0 }
	set_key = { lhs = TaxD_Commerce value = 0 }
	#set_key = { lhs = TaxD_Guilds value = 0 }
	set_key = { lhs = TaxD_Special value = 0 }
	set_key = { lhs = TaxD_CharitySF value = 0 }
	set_key = { lhs = TaxD_CharityRE value = 0 }
	set_key = { lhs = TaxD_Donations value = 0 }
	
	set_key = { lhs = TaxD_ObligationsNO value = 0 }
	set_key = { lhs = TaxD_ObligationsBG value = 0 }
	set_key = { lhs = TaxD_ObligationsCL value = 0 }
	
	set_key = { lhs = TaxD_PollHigh value = 0 }
	set_key = { lhs = TaxD_LandHigh value = 0 }
	set_key = { lhs = TaxD_SaltBUHigh value = 0 }
	set_key = { lhs = TaxD_SubstancesBUHigh value = 0 }
	set_key = { lhs = TaxD_TimberBUHigh value = 0 }
	set_key = { lhs = TaxD_AlcoholBUHigh value = 0 }
	set_key = { lhs = TaxD_PropertyBUHigh value = 0 }
	set_key = { lhs = TaxD_ChattelHigh value = 0 }
	set_key = { lhs = TaxD_InheritanceHigh value = 0 }
	set_key = { lhs = TaxD_TollBUHigh value = 0 }
	set_key = { lhs = TaxD_ObligationsNOHigh value = 0 }
	set_key = { lhs = TaxD_ObligationsBGHigh value = 0 }
	set_key = { lhs = TaxD_ObligationsCLHigh value = 0 }
	set_key = { lhs = TaxD_RentsHigh value = 0 }
	set_key = { lhs = TaxD_ForestBUHigh value = 0 }
	set_key = { lhs = TaxD_ObligationsTRHigh value = 0 }

	set_key = { lhs = SF_IncomeTax value = 0 }
	set_key = { lhs = NM_IncomeTax value = 0 }
	set_key = { lhs = RE_IncomeTax value = 0 }
	set_key = { lhs = NO_IncomeTax value = 0 }
	set_key = { lhs = BG_IncomeTax value = 0 }
	set_key = { lhs = CL_IncomeTax value = 0 }
	set_key = { lhs = TR_IncomeTax value = 0 }
	
	set_key = { lhs = NM_SpendTax value = 0 }
	set_key = { lhs = SF_SpendTax value = 0 }
	set_key = { lhs = RE_SpendTax value = 0 }
	set_key = { lhs = NO_SpendTax value = 0 }
	set_key = { lhs = BG_SpendTax value = 0 }
	set_key = { lhs = CL_SpendTax value = 0 }

	set_key = { lhs = Prod_S0SpendTax value = 0 }
	set_key = { lhs = Prod_S1SpendTax value = 0 }
	set_key = { lhs = Prod_S2SpendTax value = 0 }
	set_key = { lhs = Prod_S3SpendTax value = 0 }
	set_key = { lhs = Prod_S4SpendTax value = 0 }
	set_key = { lhs = Prod_S5SpendTax value = 0 }
	set_key = { lhs = Prod_S6SpendTax value = 0 }
	set_key = { lhs = Prod_S7SpendTax value = 0 }
	set_key = { lhs = Prod_S8SpendTax value = 0 }
	set_key = { lhs = Prod_S9SpendTax value = 0 }
	set_key = { lhs = Prod_S10SpendTax value = 0 }
	set_key = { lhs = Prod_S11SpendTax value = 0 }
	set_key = { lhs = Prod_S12SpendTax value = 0 }
	set_key = { lhs = Prod_S13SpendTax value = 0 }
	set_key = { lhs = Prod_S14SpendTax value = 0 }
	set_key = { lhs = Prod_S15SpendTax value = 0 }

	set_key = { lhs = SF_MPTax value = 0 }
	set_key = { lhs = NM_MPTax value = 0 }
	set_key = { lhs = RE_MPTax value = 0 }
	set_key = { lhs = NO_MPTax value = 0 }
	set_key = { lhs = BG_MPTax value = 0 }
	set_key = { lhs = CL_MPTax value = 0 }
	set_key = { lhs = Special_MPTax value = 0 }

	set_key = { lhs = Tax_MP value = 0 }
	set_key = { lhs = BU_Income value = 0 }
	set_key = { lhs = Tax_NOMP value = 0 }
	set_key = { lhs = Tax_BGMP value = 0 }
	set_key = { lhs = Tax_CLMP value = 0 }
	set_key = { lhs = Tax_TRMP value = 0 }
	set_key = { lhs = Tax_NOIncome value = 0 }
	set_key = { lhs = Tax_BGIncome value = 0 }
	set_key = { lhs = Tax_CLIncome value = 0 }
	set_key = { lhs = Tax_TRIncome value = 0 }
	set_key = { lhs = NO_IncomeAdmin value = 0 }
	set_key = { lhs = BG_IncomeAdmin value = 0 }
	set_key = { lhs = CL_IncomeAdmin value = 0 }
	set_key = { lhs = NO_IncomeCrpt value = 0 }
	set_key = { lhs = BG_IncomeCrpt value = 0 }
	set_key = { lhs = CL_IncomeCrpt value = 0 }
	set_key = { lhs = NO_IncomeFarm value = 0 }
	set_key = { lhs = BG_IncomeFarm value = 0 }
	set_key = { lhs = CL_IncomeFarm value = 0 }
	set_key = { lhs = NO_MPCrpt value = 0 }
	set_key = { lhs = BG_MPCrpt value = 0 }
	set_key = { lhs = CL_MPCrpt value = 0 }

	set_key = { lhs = NO_Multi value = 0 }
	set_key = { lhs = BG_Multi value = 0 }
	set_key = { lhs = CL_Multi value = 0 }
	set_key = { lhs = TR_Multi value = 0 }
	
	set_key = { lhs = Privilege_NOTax value = 0 }
	set_key = { lhs = Privilege_NOService value = 0 }
	set_key = { lhs = Privilege_BGTax value = 0 }
	set_key = { lhs = Privilege_BGService value = 0 }
	set_key = { lhs = Privilege_CLTax value = 0 }
	set_key = { lhs = Privilege_CLService value = 0 }
	set_key = { lhs = Privilege_TRTax value = 0 }
	set_key = { lhs = Privilege_TRService value = 0 }
	set_key = { lhs = Tax_TmpBase value = 0 }
	set_key = { lhs = Tax_TmpScalar value = 0 }
}
Prov_PowCleanup = {
	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	set_key = { lhs = Tmp_4 value = 0 }
	set_key = { lhs = Tmp_5 value = 0 }
	set_key = { lhs = Tmp_6 value = 0 }
	set_key = { lhs = Tmp_7 value = 0 }
	set_key = { lhs = Tax_Tmp0 value = 0 }
	set_key = { lhs = Tax_Tmp1 value = 0 }
	set_key = { lhs = Tax_Tmp2 value = 0 }
	set_key = { lhs = Tax_Tmp3 value = 0 }
	set_key = { lhs = Tax_Tmp4 value = 0 }
	set_key = { lhs = Tax_Tmp5 value = 0 }
	set_key = { lhs = Tax_Tmp6 value = 0 }
	set_key = { lhs = Tax_Tmp7 value = 0 }
	set_key = { lhs = Tax_Tmp8 value = 0 }
	set_key = { lhs = Tax_Tmp9 value = 0 }
	set_key = { lhs = Prov_BUPowInv value = 0 }

	set_key = { lhs = NO_Multi value = 0 }
	set_key = { lhs = BG_Multi value = 0 }
	set_key = { lhs = CL_Multi value = 0 }
	set_key = { lhs = TR_Multi value = 0 }
}

Prov_DoPowNO = {
	## Calc the resting point
	## Wealth, autonomy, rights-based power and current power are the key factors (inertia)
	set_key = { lhs = Prov_NOPowRest value = 0 }

	## Class share of wealth, 1:1
	# Essentially Class Wealth/Total Class Wealth * 100
	if = {
		limit = {
			check_key = { lhs = NO_Wealth value = 1.001 }
		}
		change_key = { lhs = Prov_NOPowRest which = NO_Wealth }
		subtract_key = { lhs = Prov_NOPowRest value = 1 }
		set_key = { lhs = Tmp_1 which = Tax_Tmp6 } 
		change_key = { lhs = Tmp_1 which = Tax_Tmp7 }
		divide_key = { lhs = Prov_NOPowRest which = Tmp_1 }
		multiply_key = { lhs = Prov_NOPowRest value = 100 } # 0-1 scale -> 0-100 scale
		multiply_key = { lhs = Prov_NOPowRest which = Modi_NOPowerWealth }
		multiply_key = { lhs = Prov_NOPowRest value = 0.75 } # balancing 
	}
	change_key = { lhs = Prov_NOPowRest which = Modi_NOPowerRest }
	multiply_key = { lhs = Prov_NOPowRest which = Modi_NOPower }
	
	## Local autonomy provides a boost to elite power
	set_key = { lhs = Tmp_1 which = Tax_Tmp8 } # LA
	multiply_key = { lhs = Tmp_1 value = 0.35 } # Balancing
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLANO }
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLAElites }
	change_key = { lhs = Tmp_1 value = 1 }
	multiply_key = { lhs = Prov_NOPowRest which = Tmp_1 }
	set_key = { lhs = Tmp_1 value = 0 }
	
	change_key = { lhs = Prov_NOPowRest which = Prov_NOPowEntrench }

	## National pre-calced class institutional power
	# Comes from rights and privileges, and pre-calced at the national level for performance reasons
	#owner = {
	#	set_key = { lhs = Tmp_0 which = NO_PowCalc }
	#	PREV = { set_key = { lhs = Tmp_0 which = PREV } }
	#	set_key = { lhs = Tmp_0 value = 0 }
	#}
	#change_key = { lhs = Prov_NOPowRest which = Tmp_0 }
	#set_key = { lhs = Tmp_0 value = 0 }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_NOPowRest value = 0.1 }
	multiply_key = { lhs = Prov_NOPowRest value = 10 }
	
	## Calc annual power change
	# Power has inertia, so add Pow * -1 to the monthly change. 100 power is -1.00 effect
	# Result is upward pressure and downward pressure leading to a resting point
	set_key = { lhs = Prov_NOPowChange which = Prov_NOPow }
	multiply_key = { lhs = Prov_NOPowChange value = -1 }
	change_key = { lhs = Prov_NOPowChange which = Prov_NOPowRest }
	# Above is considered monthly change, so x12 the effect. Mimics autonomy
	#multiply_key = { lhs = Prov_NOPowChange value = 12 } # For the year, 12 monthly changes
	multiply_key = { lhs = Prov_NOPowChange value = 0.01 } # 1% speed of change per month, so 12% a year. Applied last to preserve precision
		
	# Rate of change
	multiply_key = { lhs = Prov_NOPowChange value = 2 } # Raise this for faster change
	multiply_key = { lhs = Prov_NOPowChange which = Modi_NOPowerChangeSpeed }
	
	change_key = { lhs = Prov_NOPowChange which = Modi_NOPowerChange }

	# Clan power caps other elite power at 100 - TRPow
	# Change should not surpass it
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = Prov_NOPow }
		change_key = { lhs = Tmp_0 which = Prov_NOPowChange }

		## If the new total will surpass the cap, then change is Cap - Pow (difference left for 1:1)
		if = {
			limit = {
				check_key = { lhs = Tmp_0 which = Prov_TRPowCap }
			}
			set_key = { lhs = Prov_NOPowChange which = Prov_TRPowCap }
			subtract_key = { lhs = Prov_NOPowChange which = Prov_NOPow }
		}
	}

	### Apply the change
	change_key = { lhs = Prov_NOPow which = Prov_NOPowChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_NOPow value = 0.1 }
	multiply_key = { lhs = Prov_NOPow value = 10 }
	multiply_key = { lhs = Prov_NOPowChange value = 0.1 }
	multiply_key = { lhs = Prov_NOPowChange value = 10 }

	# Clamp range to 0-100
	if = {
		limit = {
			check_key = { lhs = Prov_NOPow value = 100 }
		}
		set_key = { lhs = Prov_NOPow value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Prov_NOPow value = 0 } }
		}
		set_key = { lhs = Prov_NOPow value = 0 }
	}
	
	#Inherent decay
	multiply_key = { lhs = Prov_NOPowEntrench value = 0.995 }

	set_key = { lhs = Tmp_0 which = Prov_NOPow }
	subtract_key = { lhs = Tmp_0 which = Prov_NOPowRest }
	multiply_key = { lhs = Tmp_0 value = 0.02 }
	change_key = { lhs = Prov_NOPowEntrench which = Tmp_0 }
	
	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_NOPowEntrench value = 0 } }
		}
		set_key = { lhs = Prov_NOPowEntrench value = 0 }
	}

	### Treatment effects, essentially class concern due to power changes
	# Half effect (PowChange * 0.5), representing the degree that the class can accept self-responsibiliy for their changes
	set_key = { lhs = Tmp_0 which = Prov_NOPowChange }
	multiply_key = { lhs = Tmp_0 value = 0.005 }
	Public_ChangeConcern = { Concern=Hierarchy type=which inp=Tmp_0 }

	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
} 
Prov_DoPowBG = {
	## Calc the resting point
	## Wealth, autonomy, rights-based power and current power are the key factors (inertia)
	set_key = { lhs = Prov_BGPowRest value = 0 }

	## Class share of wealth, 1:1
	# Essentially Class Wealth/Total Class Wealth * 100
	if = {
		limit = {
			check_key = { lhs = BG_Wealth value = 1.001 }
		}
		change_key = { lhs = Prov_BGPowRest which = BG_Wealth }
		subtract_key = { lhs = Prov_BGPowRest value = 1 }
		set_key = { lhs = Tmp_1 which = Tax_Tmp6 }
		change_key = { lhs = Tmp_1 which = Tax_Tmp7 }
		divide_key = { lhs = Prov_BGPowRest which = Tmp_1 }
		multiply_key = { lhs = Prov_BGPowRest value = 100 } # 0-1 scale -> 0-100 scale
		multiply_key = { lhs = Prov_BGPowRest which = Modi_BGPowerWealth }
		multiply_key = { lhs = Prov_BGPowRest value = 1.25 } # balancing
	}
	change_key = { lhs = Prov_BGPowRest which = Modi_BGPowerRest }
	multiply_key = { lhs = Prov_BGPowRest which = Modi_BGPower }
	
	## Local autonomy provides a boost to elite power
	set_key = { lhs = Tmp_1 which = Tax_Tmp8 } # LA
	multiply_key = { lhs = Tmp_1 value = 0.25 } # Balancing
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLABG }
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLAElites }
	change_key = { lhs = Tmp_1 value = 1 }
	multiply_key = { lhs = Prov_BGPowRest which = Tmp_1 }
	set_key = { lhs = Tmp_1 value = 0 }
	
	change_key = { lhs = Prov_BGPowRest which = Prov_BGPowEntrench }

	## National pre-calced class institutional power
	# Comes from rights and privileges, and pre-calced at the national level for performance reasons
	#owner = {
	#	set_key = { lhs = Tmp_0 which = BG_PowCalc }
	#	PREV = { set_key = { lhs = Tmp_0 which = PREV } }
	#	set_key = { lhs = Tmp_0 value = 0 }
	#}
	#change_key = { lhs = Prov_BGPowRest which = Tmp_0 }
	#set_key = { lhs = Tmp_0 value = 0 }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_BGPowRest value = 0.1 }
	multiply_key = { lhs = Prov_BGPowRest value = 10 }
	
	## Calc annual power change
	# Power has inertia, so add Pow * -1 to the monthly change. 100 power is -1.00 effect
	# Result is upward pressure and downward pressure leading to a resting point
	set_key = { lhs = Prov_BGPowChange which = Prov_BGPow }
	multiply_key = { lhs = Prov_BGPowChange value = -1 }
	change_key = { lhs = Prov_BGPowChange which = Prov_BGPowRest }
	# Above is considered monthly change, so x12 the effect. Mimics autonomy
	#multiply_key = { lhs = Prov_BGPowChange value = 12 } # For the year, 12 monthly changes
	multiply_key = { lhs = Prov_BGPowChange value = 0.01 } # 1% speed of change per month, so 12% a year. Applied last to preserve precision
		
	# Rate of change
	multiply_key = { lhs = Prov_BGPowChange value = 2 } # Raise this for faster change
	multiply_key = { lhs = Prov_BGPowChange which = Modi_BGPowerChangeSpeed }
	
	change_key = { lhs = Prov_BGPowChange which = Modi_BGPowerChange }

	# Clan power caps other elite power at 100 - TRPow
	# Change should not surpass it
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = Prov_BGPow }
		change_key = { lhs = Tmp_0 which = Prov_BGPowChange }

		## If the new total will surpass the cap, then change is Cap - Pow (difference left for 1:1)
		if = {
			limit = {
				check_key = { lhs = Tmp_0 which = Prov_TRPowCap }
			}
			set_key = { lhs = Prov_BGPowChange which = Prov_TRPowCap }
			subtract_key = { lhs = Prov_BGPowChange which = Prov_BGPow }
		}
	}

	### Apply the change
	change_key = { lhs = Prov_BGPow which = Prov_BGPowChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_BGPow value = 0.1 }
	multiply_key = { lhs = Prov_BGPow value = 10 }
	multiply_key = { lhs = Prov_BGPowChange value = 0.1 }
	multiply_key = { lhs = Prov_BGPowChange value = 10 }

	# Clamp range to 0-100
	if = {
		limit = {
			check_key = { lhs = Prov_BGPow value = 100 }
		}
		set_key = { lhs = Prov_BGPow value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Prov_BGPow value = 0 } }
		}
		set_key = { lhs = Prov_BGPow value = 0 }
	}
	#Inherent decay
	multiply_key = { lhs = Prov_BGPowEntrench value = 0.995 }

	set_key = { lhs = Tmp_0 which = Prov_BGPow }
	subtract_key = { lhs = Tmp_0 which = Prov_BGPowRest }
	multiply_key = { lhs = Tmp_0 value = 0.02 }
	change_key = { lhs = Prov_BGPowEntrench which = Tmp_0 }

	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_BGPowEntrench value = 0 } }
		}
		set_key = { lhs = Prov_BGPowEntrench value = 0 }
	}

	### Treatment effects, essentially class concern due to power changes
	# Half effect (PowChange * 0.5), representing the degree that the class can accept self-responsibiliy for their changes
	set_key = { lhs = Tmp_0 which = Prov_BGPowChange }
	multiply_key = { lhs = Tmp_0 value = 0.005 }
	Public_ChangeConcern = { Concern=Consultation type=which inp=Tmp_0 }

	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
}
Prov_DoPowCL = {
	## Calc the resting point
	## Wealth, autonomy, rights-based power and current power are the key factors (inertia)
	set_key = { lhs = Prov_CLPowRest value = 0 }

	## Class share of wealth, 1:1
	# Essentially Class Wealth/Total Class Wealth * 100
	if = {
		limit = {
			check_key = { lhs = CL_Wealth value = 1.001 }
		}
		change_key = { lhs = Prov_CLPowRest which = CL_Wealth }
		subtract_key = { lhs = Prov_CLPowRest value = 1 }
		set_key = { lhs = Tmp_0 which = Tax_Tmp6 }
		change_key = { lhs = Tmp_0 which = Tax_Tmp7 }
		divide_key = { lhs = Prov_CLPowRest which = Tmp_0 }
		set_key = { lhs = Tmp_0 value = 0 }
		multiply_key = { lhs = Prov_CLPowRest value = 100 } # 0-1 scale -> 0-100 scale
		multiply_key = { lhs = Prov_CLPowRest which = Modi_CLPowerWealth }
		multiply_key = { lhs = Prov_CLPowRest value = 0.2 } # balancing
	}
	change_key = { lhs = Prov_CLPowRest which = Modi_CLPowerRest }
	multiply_key = { lhs = Prov_CLPowRest which = Modi_CLPower }

	## Local autonomy provides a boost to elite power
	set_key = { lhs = Tmp_1 which = Tax_Tmp8 } # LA
	multiply_key = { lhs = Tmp_1 value = 0.25 } # Balancing
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLACL }
	multiply_key = { lhs = Tmp_1 which = Modi_PowerFromLAElites }
	change_key = { lhs = Tmp_1 value = 1 }
	multiply_key = { lhs = Prov_CLPowRest which = Tmp_1 }
	set_key = { lhs = Tmp_1 value = 0 }
	
	change_key = { lhs = Prov_CLPowRest which = Prov_CLPowEntrench }

	## National pre-calced class institutional power
	# Comes from rights and privileges, and pre-calced at the national level for performance reasons
	#owner = {
	#	set_key = { lhs = Tmp_0 which = CL_PowCalc }
	#	PREV = { set_key = { lhs = Tmp_0 which = PREV } }
	#	set_key = { lhs = Tmp_0 value = 0 }
	#}
	#change_key = { lhs = Prov_CLPowRest which = Tmp_0 }
	#set_key = { lhs = Tmp_0 value = 0 }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_CLPowRest value = 0.1 }
	multiply_key = { lhs = Prov_CLPowRest value = 10 }
	
	## Calc annual power change
	# Power has inertia, so add Pow * -1 to the monthly change. 100 power is -1.00 effect
	# Result is upward pressure and downward pressure leading to a resting point
	set_key = { lhs = Prov_CLPowChange which = Prov_CLPow }
	multiply_key = { lhs = Prov_CLPowChange value = -1 }
	change_key = { lhs = Prov_CLPowChange which = Prov_CLPowRest }
	# Above is considered monthly change, so x12 the effect. Mimics autonomy
	#multiply_key = { lhs = Prov_CLPowChange value = 12 } # For the year, 12 monthly changes
	multiply_key = { lhs = Prov_CLPowChange value = 0.01 } # 1% speed of change per month, so 12% a year. Applied last to preserve precision
		
	# Rate of change
	multiply_key = { lhs = Prov_CLPowChange value = 2 } # Raise this for faster change
	multiply_key = { lhs = Prov_CLPowChange which = Modi_CLPowerChangeSpeed }
	
	change_key = { lhs = Prov_CLPowChange which = Modi_CLPowerChange }
	# Clan power caps other elite power at 100 - TRPow
	# Change should not surpass it
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = Prov_CLPow }
		change_key = { lhs = Tmp_0 which = Prov_CLPowChange }

		## If the new total will surpass the cap, then change is Cap - Pow (difference left for 1:1)
		if = {
			limit = {
				check_key = { lhs = Tmp_0 which = Prov_TRPowCap }
			}
			set_key = { lhs = Prov_CLPowChange which = Prov_TRPowCap }
			subtract_key = { lhs = Prov_CLPowChange which = Prov_CLPow }
		}
	}

	### Apply the change
	change_key = { lhs = Prov_CLPow which = Prov_CLPowChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_CLPow value = 0.1 }
	multiply_key = { lhs = Prov_CLPow value = 10 }
	multiply_key = { lhs = Prov_CLPowChange value = 0.1 }
	multiply_key = { lhs = Prov_CLPowChange value = 10 }

	# Clamp range to 0-100
	if = {
		limit = {
			check_key = { lhs = Prov_CLPow value = 100 }
		}
		set_key = { lhs = Prov_CLPow value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Prov_CLPow value = 0 } }
		}
		set_key = { lhs = Prov_CLPow value = 0 }
	}
	#Inherent decay
	multiply_key = { lhs = Prov_CLPowEntrench value = 0.995 }

	set_key = { lhs = Tmp_0 which = Prov_CLPow }
	subtract_key = { lhs = Tmp_0 which = Prov_CLPowRest }
	multiply_key = { lhs = Tmp_0 value = 0.02 }
	change_key = { lhs = Prov_CLPowEntrench which = Tmp_0 }

	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_CLPowEntrench value = 0 } }
		}
		set_key = { lhs = Prov_CLPowEntrench value = 0 }
	}

	### Treatment effects, essentially class concern due to power changes
	# Half effect (PowChange * 0.5), representing the degree that the class can accept self-responsibiliy for their changes
	set_key = { lhs = Tmp_0 which = Prov_CLPowChange }
	multiply_key = { lhs = Tmp_0 value = 0.005 }
	Public_ChangeConcern = { Concern=Spirituality type=which inp=Tmp_0 }

	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
}
Prov_DoPowTR = {
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		# Clan power has no gravity, its fixed and freely changeable
		set_key = { lhs = Prov_TRPowChange value = 0 }
		change_key = { lhs = Prov_TRPowChange which = Modi_TRPowerChange }
		# Multiply change in power by Modi_TRPower
		multiply_key = { lhs = Prov_TRPowChange which = Modi_TRPower }
		
		### Apply the change
		change_key = { lhs = Prov_TRPow which = Prov_TRPowChange }

		# Drop the last digit, 2 decimal places for display and removal of micro changes
		multiply_key = { lhs = Prov_TRPow value = 0.1 }
		multiply_key = { lhs = Prov_TRPow value = 10 }
		multiply_key = { lhs = Prov_TRPowChange value = 0.1 }
		multiply_key = { lhs = Prov_TRPowChange value = 10 }

		set_key = { lhs = Tmp_0 value = 0 }
	}
		
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 100 }
		}
		set_key = { lhs = Prov_TRPow value = 100 }
	}
	else_if = {
		limit = {
			NOT = {
				check_key = { lhs = Prov_TRPow value = 0 }
			}
		}
		set_key = { lhs = Prov_TRPow value = 0 }
	}
}
Prov_DoPowBU = {
	if = {
		limit = {
			NOT = { has_global_flag = POP_Sim }
		}
		# Bureau power has no gravity, its fixed and freely changeable
		
		# Add absolutism factor
		owner = {
			#POP_GetAbs = { return = Tmp_0 }
			set_key = { lhs = Tmp_0 value = 0 }
			export_to_key = { lhs = Tmp_0 value = trigger_value:absolutism }
			PREV = { set_key = { lhs = Tmp_0 which = PREV } }
			set_key = { lhs = Tmp_0 value = 0 }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = Prov_BUPow which = Tmp_0 } }
			}
			if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_0 value = 0.2 } }
				}
				set_key = { lhs = Prov_BUPowChange which = Tmp_0 }
			}
			else = {
				set_key = { lhs = Prov_BUPowChange which = Prov_BUPow }
				subtract_key = { lhs = Prov_BUPowChange which = Tmp_0 }
				multiply_key = { lhs = Prov_BUPowChange value = 0.005 } # 50%, 0-100 scale to 0-1.0
				if = {
					limit = {
						NOT = { check_key = { lhs = Prov_BUPowChange value = 0.1 } }
					}
					set_key = { lhs = Prov_BUPowChange value = 0.1 }
				}
			}
		}
		else = {
			set_key = { lhs = Prov_BUPowChange value = 0 }
		}
		set_key = { lhs = Tmp_0 value = 0 }
	}
	else = {
		set_key = { lhs = Prov_BUPowChange value = 0 }
	}
	change_key = { lhs = Prov_BUPowChange which = Modi_StateReach }
	
	# Clan power caps other elite power at 100 - TRPow
	# Change should not surpass it
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = Prov_BUPow }
		change_key = { lhs = Tmp_0 which = Prov_BUPowChange }

		## If the new total will surpass the cap, then change is Cap - Pow (difference left for 1:1)
		if = {
			limit = {
				check_key = { lhs = Tmp_0 which = Prov_TRPowCap }
			}
			set_key = { lhs = Prov_BUPowChange which = Prov_TRPowCap }
			subtract_key = { lhs = Prov_BUPowChange which = Prov_BUPow }
		}
	}
	### Apply the change
	change_key = { lhs = Prov_BUPow which = Prov_BUPowChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_BUPow value = 0.1 }
	multiply_key = { lhs = Prov_BUPow value = 10 }
	multiply_key = { lhs = Prov_BUPowChange value = 0.1 }
	multiply_key = { lhs = Prov_BUPowChange value = 10 }
	
	# Clamp range to 0-100
	if = {
		limit = {
			check_key = { lhs = Prov_BUPow value = 100 }
		}
		set_key = { lhs = Prov_BUPow value = 100 }
	}
	else_if = {
		limit = {
			NOT = {
				check_key = { lhs = Prov_BUPow value = 0 }
			}
		}
		set_key = { lhs = Prov_BUPow value = 0 }
	}

	set_key = { lhs = Tmp_0 value = 0 }
	# Precalc inverse bureau power
	# Used constantly in the calcs
	set_key = { lhs = Prov_BUPowInv value = 100 }
	subtract_key = { lhs = Prov_BUPowInv which = Prov_BUPow }
	multiply_key = { lhs = Prov_BUPowInv value = 0.01 }
}

Prov_DoLoy = {
	set_key = { lhs = Tmp_0 value = 0 }

	# Treatment * concern sum
	# Every class will have a degree of interest in a concern. Their loyalty 'gravity' or resting point is the sum of their interests
	set_key = { lhs = Tmp_1 which = Concern_WelfareTreatR }
	multiply_key = { lhs = Tmp_1 value = $welfare$ }
	multiply_key = { lhs = Tmp_1 which = Modi_WeightWelfare }
	change_key = { lhs = Tmp_0 which = Tmp_1 }

	set_key = { lhs = Tmp_1 which = Concern_DiversionsTreatR }
	multiply_key = { lhs = Tmp_1 value = $diversions$ }
	multiply_key = { lhs = Tmp_1 which = Modi_WeightDiversions }
	change_key = { lhs = Tmp_0 which = Tmp_1 }

	set_key = { lhs = Tmp_1 which = Concern_SpiritualityTreatR }
	multiply_key = { lhs = Tmp_1 value = $spirituality$ }
	multiply_key = { lhs = Tmp_1 which = Modi_WeightSpirituality }
	change_key = { lhs = Tmp_0 which = Tmp_1 }

	set_key = { lhs = Tmp_1 which = Concern_ConsultationTreatR }
	multiply_key = { lhs = Tmp_1 value = $consultation$ }
	multiply_key = { lhs = Tmp_1 which = Modi_WeightConsultation }
	change_key = { lhs = Tmp_0 which = Tmp_1 }

	set_key = { lhs = Tmp_1 which = Concern_HierarchyTreatR }
	multiply_key = { lhs = Tmp_1 value = $hierarchy$ }
	multiply_key = { lhs = Tmp_1 which = Modi_WeightHierarchy }
	change_key = { lhs = Tmp_0 which = Tmp_1 }

	multiply_key = { lhs = Tmp_0 value = 0.1 } # Treatment is at a -10 - 10 scale, shift it to -1 to 1 scale

	# Shift loyalty to a 0-1 scale, so halve the effects (-0.5 to 0.5), then shift it by 0.5 (0-1)
	multiply_key = { lhs = Tmp_0 value = 0.5 }
	change_key = { lhs = Tmp_0 value = 0.5 }

[[NO]
	if = {
		limit = {
			always = $NO$
		}
		# Do stuff for nobles and nobles only
	}
]
[[BG]
	if = {
		limit = {
			always = $BG$
		}
		# Do stuff for burghers and burghers only
	}
]
[[CL]
	if = {
		limit = {
			always = $CL$
		}
		# Do stuff for clergy and clergy only
	}
]
[[TR]
	if = {
		limit = {
			always = $TR$
		}
		# Do stuff for tribes and tribes only
		if = {
			limit = {
				owner = {
					OR = {
						is_nomad = yes
						has_reform = Yuan_Monarchy
						#is_key_equal = { lhs = Pol_Privileges value = 9 }
						has_country_modifier = Karamanid_Synthesis
					}
				}
			}
			owner = {
				trigger_switch = {
				on_trigger = mil
				6 = { PREV = { change_key = { lhs = Tmp_0 value = 0.4 } } }
				5 = { PREV = { change_key = { lhs = Tmp_0 value = 0.2 } } }
				4 = { PREV = { change_key = { lhs = Tmp_0 value = 0.0 } } }
				3 = { PREV = { change_key = { lhs = Tmp_0 value = -0.2 } } }
				2 = { PREV = { change_key = { lhs = Tmp_0 value = -0.4 } } }
				1 = { PREV = { change_key = { lhs = Tmp_0 value = -0.6 } } }
				0 = { PREV = { change_key = { lhs = Tmp_0 value = -0.8 } } }
				}
			}
		}
		else = {
			owner = {
				trigger_switch = {
				on_trigger = mil
				6 = { PREV = { change_key = { lhs = Tmp_0 value = 0.2 } } }
				5 = { PREV = { change_key = { lhs = Tmp_0 value = 0.13 } } }
				4 = { PREV = { change_key = { lhs = Tmp_0 value = 0.065 } } }
				3 = { PREV = { change_key = { lhs = Tmp_0 value = 0.0 } } }
				2 = { PREV = { change_key = { lhs = Tmp_0 value = -0.1 } } }
				1 = { PREV = { change_key = { lhs = Tmp_0 value = -0.2 } } }
				0 = { PREV = { change_key = { lhs = Tmp_0 value = -0.3 } } }
				}
			}
		}
	}
]
	set_key = { lhs = $estate$_RelationState which = owner }
	change_key = { lhs = $estate$_RelationState value = 100 }
	multiply_key = { lhs = $estate$_RelationState value = 0.005 } #divide_key = { lhs = $estate$_RelationState value = 200 }
	
	change_key = { lhs = Tmp_0 which = $estate$_RelationState }
	multiply_key = { lhs = Tmp_0 value = 0.5 } #divide_key = { lhs = Tmp_0 value = 2 }	
	set_key = { lhs = $estate$_RelationState value = 0 }

	## Calc annual loyalty change
	# Loyalty has inertia, so add Loy * -1 to the monthly change. 100 loyalty is -1.00 effect
	# Result is upward pressure and downward pressure leading to a resting point
	set_key = { lhs = Prov_$estate$LoyChange which = Prov_$estate$Loy }
	multiply_key = { lhs = Prov_$estate$LoyChange value = -0.01 } # 0-100 scale -> 0-1.0 scale, as above is 0-1.0 scale not 0-100
	change_key = { lhs = Prov_$estate$LoyChange which = Tmp_0 }

	# Factor in nationalism
	export_to_key = { lhs = Tmp_0 value = nationalism }
	multiply_key = { lhs = Tmp_0 value = 0.005 } #divide_key = { lhs = Tmp_0 value = 200 }	

	subtract_key = { lhs = Prov_$estate$LoyChange which = Tmp_0 }
	
	## Above is considered monthly change, so x12 the effect. Mimics autonomy
	#multiply_key = { lhs = Prov_$estate$LoyChange value = 12 } # For the year, 12 monthly changes
	## At 0-1.0 scale, 1% speed of change per month, so 12% a year (already at 0-1.0 scale)
		
	# Rate of change
	multiply_key = { lhs = Prov_$estate$LoyChange value = 2.5 } # Raise this for faster change
	multiply_key = { lhs = Prov_$estate$LoyChange which = Modi_$estate$LoyaltyChangeSpeed }

	change_key = { lhs = Prov_$estate$Loy which = Modi_$estate$LoyaltyChange }
	### Apply the change
	change_key = { lhs = Prov_$estate$Loy which = Prov_$estate$LoyChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_$estate$Loy value = 0.1 }
	multiply_key = { lhs = Prov_$estate$Loy value = 10 }
	multiply_key = { lhs = Prov_$estate$LoyChange value = 0.1 }
	multiply_key = { lhs = Prov_$estate$LoyChange value = 10 }

	# Clamp range to 0-100
	if = {
		limit = {
			check_key = { lhs = Prov_$estate$Loy value = 100 }
		}
		set_key = { lhs = Prov_$estate$Loy value = 100 }
	}
	else_if = {
		limit = {
			NOT = {
				check_key = { lhs = Prov_$estate$Loy value = 0 }
			}
		}
		set_key = { lhs = Prov_$estate$Loy value = 0 }
	}

	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
}

Prov_DoLoyNO = {
	Prov_DoLoy = { estate = NO NO = yes welfare = 0.1 diversions = 0.5 spirituality = 0.5 consultation = 0.15 hierarchy = 0.8 }
}
Prov_DoLoyBG = {
	Prov_DoLoy = { estate = BG BG = yes welfare = 0.1 diversions = 0.8 spirituality = 0.2 consultation = 0.8 hierarchy = 0.2 }
}
Prov_DoLoyCL = {
	Prov_DoLoy = { estate = CL CL = yes welfare = 0.1 diversions = 0.2 spirituality = 0.8 consultation = 0.5 hierarchy = 0.5 }
}
Prov_DoLoyTR = {
	Prov_DoLoy = { estate = TR TR = yes welfare = 0.4 diversions = 0.5 spirituality = 0.5 consultation = 0.5 hierarchy = 0.4 }
}
# Bureau loyalty is instead corruption, representing the degree of loyalty of the bureaucracy to other elites, not the state. 0 means full state loyalty
Prov_DoLoyBU = {
	set_key = { lhs = Crpt_NO value = 0 }
	set_key = { lhs = Crpt_BG value = 0 }
	set_key = { lhs = Crpt_CL value = 0 }
	
	# Other elites generate corruption proportionate to their power, increasing state reach limits this corruption source
	set_key = { lhs = Tmp_3 which = Prov_NOPow }
	change_key = { lhs = Tmp_3 which = Prov_BGPow }
	change_key = { lhs = Tmp_3 which = Prov_CLPow }
	change_key = { lhs = Tmp_3 which = Prov_BUPow } #BUPow counts twice
	change_key = { lhs = Tmp_3 which = Prov_BUPow } #BUPow counts twice

	set_key = { lhs = Tmp_0 value = 0 }
	if = {
		limit = {
			check_key = { lhs = Prov_NOPow value = 0.001 }
		}
		# Nobles
		set_key = { lhs = Crpt_NO which = Prov_NOPow }
		divide_key = { lhs = Crpt_NO which = Tmp_3 } # Share of total power
		
		set_key = { lhs = Tmp_2 which = Crpt_NO }
		multiply_key = { lhs = Tmp_2 which = Tmp_2 } # Exponential effect
		multiply_key = { lhs = Tmp_2 value = 0.6 }
		change_key = { lhs = Tmp_2 value = 0.4 }
		multiply_key = { lhs = Crpt_NO which = Tmp_2 }
		
		# Noble loyalty effect
		set_key = { lhs = Tmp_2 value = 100 }
		subtract_key = { lhs = Tmp_2 which = Prov_NOLoy }
		multiply_key = { lhs = Tmp_2 value = 0.008 } # 0-100 scale -> 0-1 scale
		change_key = { lhs = Tmp_2 value = 0.2 } # Some core leakage of power
		multiply_key = { lhs = Crpt_NO which = Tmp_2 } # Scaled by loyalty

		multiply_key = { lhs = Crpt_NO which = Modi_CorruptionNO }
		multiply_key = { lhs = Crpt_NO which = Modi_CorruptionElites }
		
		change_key = { lhs = Tmp_0 which = Crpt_NO }
		multiply_key = { lhs = Crpt_NO value = 100 }
	}
	if = {
		limit = {
			check_key = { lhs = Prov_BGPow value = 0.001 }
		}
		# Burghers
		set_key = { lhs = Crpt_BG which = Prov_BGPow }
		divide_key = { lhs = Crpt_BG which = Tmp_3 } # Share of total power
		
		set_key = { lhs = Tmp_2 which = Crpt_BG }
		multiply_key = { lhs = Tmp_2 which = Tmp_2 } # Exponential effect
		multiply_key = { lhs = Tmp_2 value = 0.5 }
		change_key = { lhs = Tmp_2 value = 0.5 }
		multiply_key = { lhs = Crpt_BG which = Tmp_2 }
		
		# Burghers loyalty effect
		set_key = { lhs = Tmp_2 value = 100 }
		subtract_key = { lhs = Tmp_2 which = Prov_BGLoy }
		multiply_key = { lhs = Tmp_2 value = 0.008 } # 0-100 scale -> 0-1 scale
		change_key = { lhs = Tmp_2 value = 0.2 } # Some core leakage of power
		multiply_key = { lhs = Crpt_BG which = Tmp_2 } # Scaled by loyalty

		multiply_key = { lhs = Crpt_BG which = Modi_CorruptionBG }
		multiply_key = { lhs = Crpt_BG which = Modi_CorruptionElites }

		change_key = { lhs = Tmp_0 which = Crpt_BG }
		multiply_key = { lhs = Crpt_BG value = 100 }
	}
	if = {
		limit = {
			check_key = { lhs = Prov_CLPow value = 0.001 }
		}
		# Clergy
		set_key = { lhs = Crpt_CL which = Prov_CLPow }
		divide_key = { lhs = Crpt_CL which = Tmp_3 } # Share of total power
		
		set_key = { lhs = Tmp_2 which = Crpt_CL }
		multiply_key = { lhs = Tmp_2 which = Tmp_2 } # Exponential effect
		multiply_key = { lhs = Tmp_2 value = 0.5 }
		change_key = { lhs = Tmp_2 value = 0.5 }
		multiply_key = { lhs = Crpt_CL which = Tmp_2 }
		
		# Clergy loyalty effect
		set_key = { lhs = Tmp_2 value = 100 }
		subtract_key = { lhs = Tmp_2 which = Prov_CLLoy }
		multiply_key = { lhs = Tmp_2 value = 0.008 } # 0-100 scale -> 0-1 scale
		change_key = { lhs = Tmp_2 value = 0.2 } # Some core leakage of power
		multiply_key = { lhs = Crpt_CL which = Tmp_2 } # Scaled by loyalty

		multiply_key = { lhs = Crpt_CL which = Modi_CorruptionCL }
		multiply_key = { lhs = Crpt_CL which = Modi_CorruptionElites }

		change_key = { lhs = Tmp_0 which = Crpt_CL }
		multiply_key = { lhs = Crpt_CL value = 100 }
	}
	
	# Bureau neglect, 1.0 to 2.0x effect
	# Central government rule without presence breeds corruption
	set_key = { lhs = Crpt_LA which = Tax_Tmp8 } # % of neglect
	multiply_key = { lhs = Crpt_LA which = Modi_CorruptionLA }
	multiply_key = { lhs = Crpt_LA value = 0.5 }
	change_key = { lhs = Crpt_LA value = 1 }
	multiply_key = { lhs = Tmp_0 which = Crpt_LA }

	owner = {
		export_to_key = { lhs = Tmp_1 value = corruption }
		#POP_GetAbs = { return = Tmp_2 }

		PREV = {
			set_key = { lhs = Tmp_1 which = PREV }
			#set_key = { lhs = Tmp_2 which = PREV }
		}

		set_key = { lhs = Tmp_1 value = 0 }
		#set_key = { lhs = Tmp_2 value = 0 }
	}
	multiply_key = { lhs = Tmp_1 value = 0.01 }
	set_key = { lhs = Tmp_3 value = 0.3 }
	multiply_key = { lhs = Tmp_3 which = Tax_Tmp8 } # 25% LA based
	change_key = { lhs = Tmp_3 value = 0.2 } # 25% base
	multiply_key = { lhs = Tmp_1 which = Tmp_3 }
	set_key = { lhs = Crpt_State which = Tmp_1 }
	
	#multiply_key = { lhs = Tmp_2 which = Tax_Tmp8 }
	#divide_key = { lhs = Tmp_2 value = 100 }
	#change_key = { lhs = Tmp_2 value = 1 }
	
	set_key = { lhs = Crpt_State which = Tmp_1 }
	change_key = { lhs = Tmp_0 which = Crpt_State }
	multiply_key = { lhs = Crpt_State value = 100 }
	
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
	
	# Bureau effectiveness, 1.0 to 2.0x effect
	# Shit wages causes bureaucrats to make their money in other ways
	set_key = { lhs = Tmp_2 value = 100 }
	subtract_key = { lhs = Tmp_2 which = Admin_Wage } # Wages, not paying them is the main source
	multiply_key = { lhs = Tmp_2 value = 0.01 }
	
	set_key = { lhs = Crpt_Wages which = Prov_BUPow } # State Reach determines how much all of this matters
	multiply_key = { lhs = Crpt_Wages value = 0.01 }
	multiply_key = { lhs = Crpt_Wages which = Tmp_2 } # Wages
	multiply_key = { lhs = Crpt_Wages value = 0.5 } # Balance, 150% effect at max
	change_key = { lhs = Crpt_Wages value = 1 }
	multiply_key = { lhs = Tmp_0 which = Crpt_Wages }
	
	if = {
		limit = {
			check_key = { lhs = Prov_BUPow value = 10 }
		}
		
		set_key = { lhs = Tmp_1 which = Prov_BUPow }
		multiply_key = { lhs = Tmp_1 value = 0.01 }
		multiply_key = { lhs = Tmp_1 which = Tmp_1 } # Exponential effect
		
		set_key = { lhs = Crpt_Reform which = Modi_CorruptionReform }
		multiply_key = { lhs = Crpt_Reform which = Tmp_1 }
	}
	else = {
		set_key = { lhs = Crpt_Reform value = 0 }
	}
	change_key = { lhs = Crpt_Reform which = Modi_CorruptionReformPre }
	change_key = { lhs = Tmp_0 which = Crpt_Reform }
	multiply_key = { lhs = Crpt_Reform value = 0.8 } #balancing, as corruption from elite is higher
	multiply_key = { lhs = Crpt_Reform value = 100 }

	set_key = { lhs = Crpt_Other which = Modi_Corruption }
	multiply_key = { lhs = Tmp_0 which = Crpt_Other }
	
	## Calc annual corruption (loyalty) change
	# Loyalty has inertia, so add Loy * -1 to the monthly change. 100 loyalty is -1.00 effect
	# Result is upward pressure and downward pressure leading to a resting point
	set_key = { lhs = Prov_BULoyChange which = Prov_BULoy }
	multiply_key = { lhs = Prov_BULoyChange value = -0.01 } # 0-100 scale -> 0-1.0 scale, as above is 0-1.0 scale not 0-100
	change_key = { lhs = Prov_BULoyChange which = Tmp_0 }
	# Above is considered monthly change, so x12 the effect. Mimics autonomy
	set_key = { lhs = Tmp_0 which = Prov_BUPowInv }
	multiply_key = { lhs = Tmp_0 which = Tmp_0 }
	multiply_key = { lhs = Tmp_0 value = 10 }
	change_key = { lhs = Tmp_0 value = 2 }
	if = {
		limit = {
			NOT = { has_global_flag = POP_Sim6 }
		}
		change_key = { lhs = Tmp_0 value = 4 }
	}
	multiply_key = { lhs = Prov_BULoyChange which = Tmp_0 } # For the year, 12 monthly changes
	# At 0-1.0 scale, 0.5% speed of change per month, so 6% a year
	
	# Rate of change
	multiply_key = { lhs = Prov_BULoyChange value = 2 } # Raise this for faster change

	### Apply the change
	change_key = { lhs = Prov_BULoy which = Prov_BULoyChange }

	change_key = { lhs = Prov_BULoy which = Modi_CorruptionChange }

	# Drop the last digit, 2 decimal places for display and removal of micro changes
	multiply_key = { lhs = Prov_BULoy value = 0.1 }
	multiply_key = { lhs = Prov_BULoy value = 10 }
	multiply_key = { lhs = Prov_BULoyChange value = 0.1 }
	multiply_key = { lhs = Prov_BULoyChange value = 10 }

	# Clamp range to 0-90
	if = {
		limit = {
			check_key = { lhs = Prov_BULoy value = 90 }
		}
		set_key = { lhs = Prov_BULoy value = 90 }
	}
	else_if = {
		limit = {
			NOT = {
				check_key = { lhs = Prov_BULoy value = 0 }
			}
		}
		set_key = { lhs = Prov_BULoy value = 0 }
	}

	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
}
Prov_TaxDo = {
	if = {
		limit = {
			owner = { ai = no }
		}
		change_key = { lhs = TaxD_SFExciseBU which = TaxD_SFSaltBU }
		change_key = { lhs = TaxD_SFExciseBU which = TaxD_SFSubstancesBU }
		change_key = { lhs = TaxD_REExciseBU which = TaxD_RESaltBU }
		change_key = { lhs = TaxD_REExciseBU which = TaxD_RESubstancesBU }
		change_key = { lhs = TaxD_NOExciseBU which = TaxD_NOSaltBU }
		change_key = { lhs = TaxD_NOExciseBU which = TaxD_NOSubstancesBU }
		change_key = { lhs = TaxD_BGExciseBU which = TaxD_BGSaltBU }
		change_key = { lhs = TaxD_BGExciseBU which = TaxD_BGSubstancesBU }
		change_key = { lhs = TaxD_CLExciseBU which = TaxD_CLSaltBU }
		change_key = { lhs = TaxD_CLExciseBU which = TaxD_CLSubstancesBU }
		change_key = { lhs = TaxD_ExciseBU which = TaxD_SaltBU }
		change_key = { lhs = TaxD_ExciseBU which = TaxD_SubstancesBU }
		change_key = { lhs = TaxD_ExciseBU which = TaxD_TimberBU }
		change_key = { lhs = TaxD_ExciseBU which = TaxD_AlcoholBU }
		change_key = { lhs = TaxD_TR which = TaxD_NOObligationsTR }
	}
	# Spending on tax isnt subtracted from wealth till the end
	# Prevents wealth taxes iteratively getting smaller
	change_key = { lhs = TaxD_Industry which = TaxD_TollBU }
	change_key = { lhs = TaxD_Industry which = TaxD_TimberBU }
	change_key = { lhs = TaxD_Industry which = TaxD_AlcoholBU }
	change_key = { lhs = TaxD_Industry which = TaxD_ForestBU }
	change_key = { lhs = TaxD_Special which = Post_LocalFees }
	
	change_key = { lhs = SF_IncomeTax which = TaxD_CharitySF }
	
	change_key = { lhs = RE_IncomeTax which = TaxD_CharityRE }
	
	change_key = { lhs = NO_IncomeTax which = TaxD_RentsNO }
	change_key = { lhs = NO_IncomeTax which = TaxD_CommerceNO }
	change_key = { lhs = NO_IncomeTax which = TaxD_ForestryNO }
	change_key = { lhs = NO_IncomeTax which = TaxD_GameNO }
	change_key = { lhs = NO_IncomeTax which = TaxD_PropNO }
	
	change_key = { lhs = BG_IncomeTax which = TaxD_PropBG }
	change_key = { lhs = BG_IncomeTax which = TaxD_ExciseBG }
	change_key = { lhs = BG_IncomeTax which = TaxD_TollBG }
	#change_key = { lhs = BG_IncomeTax which = TaxD_Guilds }
	
	change_key = { lhs = CL_IncomeTax which = TaxD_TitheCL }
	change_key = { lhs = CL_IncomeTax which = TaxD_DonationsCL }
	
	change_key = { lhs = TR_IncomeTax which = TaxD_TributeTR }
	
	# Nobles are Chiefs
	
	Tax_DoObligations = yes
	
	change_key = { lhs = NO_IncomeTax which = TR_IncomeTax }
	
	change_key = { lhs = TaxD_Direct which = TaxD_Rents }
	change_key = { lhs = TaxD_Direct which = TaxD_Land }
	change_key = { lhs = TaxD_Direct which = TaxD_PropertyBU }
	change_key = { lhs = TaxD_Direct which = TaxD_Poll }
	change_key = { lhs = TaxD_Direct which = TaxD_Chattel }
	change_key = { lhs = TaxD_Direct which = TaxD_Inheritance }
	
	change_key = { lhs = TaxD_Indirect which = TaxD_Fees }
	change_key = { lhs = TaxD_Indirect which = Tariff_Income }
	change_key = { lhs = TaxD_Indirect which = TaxD_SaltBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_SubstancesBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_TimberBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_AlcoholBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_ForestBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_TollBU }
	change_key = { lhs = TaxD_Indirect which = TaxD_Commerce }
	change_key = { lhs = TaxD_Indirect which = TaxD_Special }
	
	change_key = { lhs = TaxD_Revenue which = TaxD_Direct }
	change_key = { lhs = TaxD_Revenue which = TaxD_Indirect }
	
	# Holy Order taxes
	# Represents the holdings of the order in foreign countries
	if = {
		limit = {
			OR = {
				exists = TEU
				exists = LVO
			}
			OR = {
				has_province_modifier = Teuton_Commandery_Low
				has_province_modifier = Teuton_Commandery_Low_trade
				has_province_modifier = Teuton_Commandery_Med
				has_province_modifier = Teuton_Commandery_Med_trade
				has_province_modifier = Teuton_Commandery_High
				has_province_modifier = Teuton_Commandery_High_trade
			}
		}
		set_key = { lhs = Tax_TmpBase value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
		set_key = { lhs = Tmp_2 value = 0 }

		# Calc tax rate
		# Get base rate
		trigger_switch = {
			on_trigger = has_province_modifier

			Teuton_Commandery_Low = { set_key = { lhs = Tax_TmpBase value = 0.2 } }
			Teuton_Commandery_Low_trade = { set_key = { lhs = Tax_TmpBase value = 0.2 } }
			Teuton_Commandery_Med = { set_key = { lhs = Tax_TmpBase value = 0.4 } }
			Teuton_Commandery_Med_trade = { set_key = { lhs = Tax_TmpBase value = 0.4 } }
			Teuton_Commandery_High = { set_key = { lhs = Tax_TmpBase value = 0.7 } }
			Teuton_Commandery_High_trade = { set_key = { lhs = Tax_TmpBase value = 0.7 } }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=WealthResources TaxType=Teuton Flow=yes }
			Tax_CalcClass = { Class=NO TaxBase=WealthResources TaxType=Teuton Flow=yes }
			Tax_CalcClass = { Class=CL TaxBase=WealthResources TaxType=Teuton Flow=yes }
			Tax_CalcClass = { Class=BG TaxBase=WealthResources TaxType=Teuton Flow=yes }
		}
		Tax_ResetTax = yes
		Tax_ResetRates = yes
		if = {
			limit = {
				exists = TEU
				exists = LVO
			}
			set_key = { lhs = Tmp_0 which = TaxD_Teuton }
			multiply_key = { lhs = TaxD_Teuton value = 0.85 }
			TEU = {
				change_key = { lhs = TaxD_Teuton which = PREV }
			}
			set_key = { lhs = TaxD_Teuton which = Tmp_0 }
			multiply_key = { lhs = TaxD_Teuton value = 0.15 }
			LVO = {
				change_key = { lhs = TaxD_Teuton which = PREV }
			}
		}
		else_if = {
			limit = {
				exists = TEU
			}
			TEU = {
				change_key = { lhs = TaxD_Teuton which = PREV }
			}
		}
		else_if = {
			limit = {
				exists = LVO
			}
			LVO = {
				change_key = { lhs = TaxD_Teuton which = PREV }
			}
		}
	}

	# Holy Order taxes
	# Represents the holdings of the order in foreign countries
	if = {
		limit = {
			exists = KNI
			OR = {
				has_province_modifier = Knights_Commandery_Low
				has_province_modifier = Knights_Commandery_Low_trade
				has_province_modifier = Knights_Commandery_Med
				has_province_modifier = Knights_Commandery_Med_trade
				has_province_modifier = Knights_Commandery_High
				has_province_modifier = Knights_Commandery_High_trade
			}
		}
		set_key = { lhs = Tax_TmpBase value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
		set_key = { lhs = Tmp_2 value = 0 }

		# Calc tax rate
		# Get base rate
		trigger_switch = {
			on_trigger = has_province_modifier

			Knights_Commandery_Low = { set_key = { lhs = Tax_TmpBase value = 0.066 } }
			Knights_Commandery_Low_trade = { set_key = { lhs = Tax_TmpBase value = 0.066 } }
			Knights_Commandery_Med = { set_key = { lhs = Tax_TmpBase value = 0.2 } }
			Knights_Commandery_Med_trade = { set_key = { lhs = Tax_TmpBase value = 0.2 } }
			Knights_Commandery_High = { set_key = { lhs = Tax_TmpBase value = 0.4 } }
			Knights_Commandery_High_trade = { set_key = { lhs = Tax_TmpBase value = 0.4 } }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=WealthResources TaxType=Knights Flow=yes }
			Tax_CalcClass = { Class=NO TaxBase=WealthResources TaxType=Knights Flow=yes }
			Tax_CalcClass = { Class=CL TaxBase=WealthResources TaxType=Knights Flow=yes }
			Tax_CalcClass = { Class=BG TaxBase=WealthResources TaxType=Knights Flow=yes }
		}
		Tax_ResetTax = yes
		Tax_ResetRates = yes
		
		KNI = {
			change_key = { lhs = TaxD_Knights which = PREV }
		}
	}


	# Gemeiner Pfennig taxes
	# Represents the holdings of the order in foreign countries
	if = {
		limit = {
			is_part_of_hre = yes
			has_province_modifier = HRE_Gemeiner_Pfennig
		}
		set_key = { lhs = Tax_TmpBase value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
		set_key = { lhs = Tmp_2 value = 0 }

		# Get base rate
		set_key = { lhs = Tax_TmpBase value = 0.1 }
		

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=WealthResources TaxType=HRE Flow=yes }
			Tax_CalcClass = { Class=NO TaxBase=WealthResources TaxType=HRE Flow=yes }
			Tax_CalcClass = { Class=CL TaxBase=WealthResources TaxType=HRE Flow=yes }
			Tax_CalcClass = { Class=BG TaxBase=WealthResources TaxType=HRE Flow=yes }
		}
		Tax_ResetTax = yes
		Tax_ResetRates = yes
		
		emperor = {
			change_key = { lhs = TaxD_HRE which = PREV }
		}
	}
	
	change_key = { lhs = TaxD_BUProperty which = BU_IncomePrp }
	subtract_key = { lhs = TaxD_BUProperty which = BU_SpendPrp }
	if = {
		limit = {
			NOT = { check_key = { lhs = TaxD_BUProperty value = 0 } }
		}
		set_key = { lhs = TaxD_BUPropertyNeg which = TaxD_BUProperty }
		multiply_key = { lhs = TaxD_BUPropertyNeg value = -1 }
	}
	else = {
		set_key = { lhs = TaxD_BUPropertyNeg value = 0 }
		change_key = { lhs = TaxD_Revenue which = TaxD_BUProperty }
		change_key = { lhs = TaxD_Direct which = TaxD_BUProperty }
	}

	if = {
		limit = {
			OR = {
				check_key = { lhs = Prov_NOPow value = 0.001 }
				check_key = { lhs = Prov_BGPow value = 0.001 }
				check_key = { lhs = Prov_CLPow value = 0.001 }
			}
		}
		set_key = { lhs = Tmp_0 value = 0 }
		# Calculate the share of revenue each class will get, based on their relative power to other powerbrokers
		set_key = { lhs = Tmp_1 which = Prov_NOPow }
		multiply_key = { lhs = Tmp_1 which = Modi_WagesGainNO }
		set_key = { lhs = Tmp_2 which = Prov_BGPow }
		multiply_key = { lhs = Tmp_2 which = Modi_WagesGainBG }
		set_key = { lhs = Tmp_3 which = Prov_CLPow }
		multiply_key = { lhs = Tmp_3 which = Modi_WagesGainCL }

		if = {
			limit = {
				check_key = { lhs = Tmp_1 value = 1 }
			}
			change_key = { lhs = Tmp_0 which = Tmp_1 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_2 value = 1 }
			}
			change_key = { lhs = Tmp_0 which = Tmp_2 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_3 value = 1 }
			}
			change_key = { lhs = Tmp_0 which = Tmp_3 }
		}

		if = {
			limit = {
				check_key = { lhs = Tmp_1 value = 1 }
			}
			divide_key = { lhs = Tmp_1 which = Tmp_0 }
		}
		else = {
			set_key = { lhs = Tmp_1 value = 0 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_2 value = 1 }
			}
			divide_key = { lhs = Tmp_2 which = Tmp_0 }
		}
		else = {
			set_key = { lhs = Tmp_2 value = 0 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_3 value = 1 }
			}
			divide_key = { lhs = Tmp_3 which = Tmp_0 }
		}
		else = {
			set_key = { lhs = Tmp_3 value = 0 }
		}
		
		if = {
			limit = {
				OR = {
					check_key = { lhs = TaxD_Direct value = 0.001 }
					check_key = { lhs = TaxD_Indirect value = 0.001 }
				}
			}
			# Calculate the share of Tax Farming, based on rights.
			set_key = { lhs = NO_IncomeFarm which = Tmp_1 }
			set_key = { lhs = BG_IncomeFarm which = Tmp_2 }
			set_key = { lhs = CL_IncomeFarm which = Tmp_3 }
			
			set_key = { lhs = Tmp_0 value = 0 }
			if = {
				limit = {
					owner = {
						AND = {
							NOT = { Rights_BUInd2HasGreater = yes }
							NOT = { Rights_BUDir2HasGreater = yes }
							NOT = { Rights_BUTax3HasGreater = yes }
						}
					}
				}
				set_key = { lhs = Tmp_0 which = TaxD_Revenue }
				multiply_key = { lhs = Tmp_0 which = Modi_TaxFarmShare }
			}
			else = {
				if = {
					limit = {
						owner = {
							AND = {
								Rights_BUTax2Has = yes
								Rights_BUDir1Has = yes
							}
						}
					}
					set_key = { lhs = Tmp_4 which = TaxD_Direct }
					multiply_key = { lhs = Tmp_4 which = Modi_TaxFarmShare }
					change_key = { lhs = Tmp_0 which = Tmp_4 }
				}
				if = {
					limit = {
						owner = {
							AND = {
								Rights_BUTax2Has = yes
								Rights_BUInd1Has = yes
							}
						}
					}
					set_key = { lhs = Tmp_4 which = TaxD_Indirect }
					multiply_key = { lhs = Tmp_4 which = Modi_TaxFarmShare }
					change_key = { lhs = Tmp_0 which = Tmp_4 }
				}
			}			
			multiply_key = { lhs = NO_IncomeFarm which = Tmp_0 }
			multiply_key = { lhs = BG_IncomeFarm which = Tmp_0 }
			multiply_key = { lhs = CL_IncomeFarm which = Tmp_0 }
	
			change_key = { lhs = TaxD_Farming which = NO_IncomeFarm }
			change_key = { lhs = TaxD_Farming which = BG_IncomeFarm }
			change_key = { lhs = TaxD_Farming which = CL_IncomeFarm }
		}
		set_key = { lhs = Tmp_0 which = TaxD_Revenue }
		subtract_key = { lhs = Tmp_0 which = TaxD_Farming }
		if = {
			limit = {
				check_key = { lhs = Tmp_0 value = 0.001 }
			}
			# Calculate the share of corruption revenue each powerbroker gets
			set_key = { lhs = NO_IncomeCrpt which = Tmp_1 }
			set_key = { lhs = BG_IncomeCrpt which = Tmp_2 }
			set_key = { lhs = CL_IncomeCrpt which = Tmp_3 }

			multiply_key = { lhs = NO_IncomeCrpt which = Prov_BULoy }
			multiply_key = { lhs = BG_IncomeCrpt which = Prov_BULoy }
			multiply_key = { lhs = CL_IncomeCrpt which = Prov_BULoy }
			# Apply BULoy / 10 after to avoid precision loss
			multiply_key = { lhs = NO_IncomeCrpt value = 0.1 }
			multiply_key = { lhs = BG_IncomeCrpt value = 0.1 }
			multiply_key = { lhs = CL_IncomeCrpt value = 0.1 }
			
		
			multiply_key = { lhs = NO_IncomeCrpt which = Tmp_0 }
			multiply_key = { lhs = BG_IncomeCrpt which = Tmp_0 }
			multiply_key = { lhs = CL_IncomeCrpt which = Tmp_0 }
			
			# Apply BULoy / 10 after to avoid precision loss
			multiply_key = { lhs = NO_IncomeCrpt value = 0.1 }
			multiply_key = { lhs = BG_IncomeCrpt value = 0.1 }
			multiply_key = { lhs = CL_IncomeCrpt value = 0.1 }
	
			change_key = { lhs = TaxD_Corruption which = NO_IncomeCrpt }
			change_key = { lhs = TaxD_Corruption which = BG_IncomeCrpt }
			change_key = { lhs = TaxD_Corruption which = CL_IncomeCrpt }
		}
		
		# Calculate the share of Admin hire each powerbroker gets, provisional script
		set_key = { lhs = NO_IncomeAdmin which = Tmp_1 }
		set_key = { lhs = BG_IncomeAdmin which = Tmp_2 }
		set_key = { lhs = CL_IncomeAdmin which = Tmp_3 }
		
		set_key = { lhs = Tmp_0 which = Admin_CostUni }
		
		multiply_key = { lhs = NO_IncomeAdmin which = Tmp_0 }
		multiply_key = { lhs = BG_IncomeAdmin which = Tmp_0 }
		multiply_key = { lhs = CL_IncomeAdmin which = Tmp_0 }
		
		set_key = { lhs = Tmp_0 value = 0 }
	}
	
	set_key = { lhs = Tax_MP which = BU_MPSFCur }
	change_key = { lhs = Tax_MP which = BU_MPRECur }
	change_key = { lhs = Tax_MP which = BU_MPNOCur }
	change_key = { lhs = Tax_MP which = BU_MPBGCur }
	change_key = { lhs = Tax_MP which = BU_MPCLCur }
	change_key = { lhs = Tax_MP which = BU_MPSpecialCur }
	
	set_key = { lhs = Tax_NOMP which = NO_MPSFCur }
	change_key = { lhs = Tax_NOMP which = NO_MPNOCur }
	change_key = { lhs = Tax_NOMP which = NO_MPSpecialCur }
	
	set_key = { lhs = Tax_BGMP which = BG_MPRECur }
	change_key = { lhs = Tax_BGMP which = BG_MPBGCur }
	change_key = { lhs = Tax_BGMP which = BG_MPSpecialCur }
	
	set_key = { lhs = Tax_CLMP value = 0 }
	
	set_key = { lhs = Tax_TRMP which = TR_MPSFCur }
	change_key = { lhs = Tax_TRMP which = TR_MPRECur }
	change_key = { lhs = Tax_TRMP which = TR_MPNMCur }
	change_key = { lhs = Tax_TRMP which = TR_MPNOCur }
	change_key = { lhs = Tax_TRMP which = TR_MPBGCur }
	change_key = { lhs = Tax_TRMP which = TR_MPCLCur }
	change_key = { lhs = Tax_TRMP which = TR_MPSpecialCur }
	
	set_key = { lhs = SF_MPTax which = NO_MPSFCur }
	change_key = { lhs = SF_MPTax which = TR_MPSFCur }
	change_key = { lhs = SF_MPTax which = BU_MPSFCur }
	
	set_key = { lhs = RE_MPTax which = BG_MPRECur }
	change_key = { lhs = RE_MPTax which = TR_MPRECur }
	change_key = { lhs = RE_MPTax which = BU_MPRECur }
	
	set_key = { lhs = NM_MPTax which = TR_MPNMCur }
	
	set_key = { lhs = NO_MPTax which = NO_MPNOCur }
	change_key = { lhs = NO_MPTax which = TR_MPNOCur }
	change_key = { lhs = NO_MPTax which = BU_MPNOCur }
	
	set_key = { lhs = BG_MPTax which = BG_MPBGCur }
	change_key = { lhs = BG_MPTax which = TR_MPBGCur }
	change_key = { lhs = BG_MPTax which = BU_MPBGCur }
	
	set_key = { lhs = CL_MPTax which = TR_MPCLCur }
	change_key = { lhs = CL_MPTax which = BU_MPCLCur }
	
	set_key = { lhs = Special_MPTax which = BU_MPSpecialCur }
	change_key = { lhs = Special_MPTax which = NO_MPSpecialCur }
	change_key = { lhs = Special_MPTax which = BG_MPSpecialCur }
	change_key = { lhs = Special_MPTax which = TR_MPSpecialCur }

	set_key = { lhs = Tmp_1 value = 0 }
	if = {
		limit = {
			owner = {
				OR = {
					has_country_modifier = CL_DonationsMinor_S
					has_country_modifier = CL_DonationsMinor_M
					has_country_modifier = CL_DonationsMinor_L
				}
			}
		}
		set_key = { lhs = Tax_TmpBase which = TaxD_Revenue }
		multiply_key = { lhs = Tax_TmpBase value = 0.05 }
		change_key = { lhs = Tmp_1 which = Tax_TmpBase }
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_country_modifier = CL_DonationsLavish_S
					has_country_modifier = CL_DonationsLavish_M
					has_country_modifier = CL_DonationsLavish_L
				}
			}
		}
		set_key = { lhs = Tax_TmpBase which = TaxD_Revenue }
		multiply_key = { lhs = Tax_TmpBase value = 0.15 }
		change_key = { lhs = Tmp_1 which = Tax_TmpBase }
	}
	subtract_key = { lhs = TaxD_Revenue which = Tmp_1 }
	change_key = { lhs = TaxD_Donations which = Tmp_1 }
	change_key = { lhs = CL_IncomeTax which = TaxD_Donations }
	set_key = { lhs = Tax_TmpBase value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	
	change_key = { lhs = TaxD_Obligations which = TaxD_ObligationsNO }
	change_key = { lhs = TaxD_Obligations which = TaxD_ObligationsBG }
	change_key = { lhs = TaxD_Obligations which = TaxD_ObligationsCL }
	change_key = { lhs = TaxD_Obligations which = TaxD_ObligationsTR }
	change_key = { lhs = TaxD_Indirect which = TaxD_Obligations }
	change_key = { lhs = TaxD_Revenue which = TaxD_Obligations }

	Prov_SetRateDisp = { class = SF }
	Prov_SetRateDisp = { class = NM }
	Prov_SetRateDisp = { class = RE }
	Prov_SetRateDisp = { class = NO }
	Prov_SetRateDisp = { class = BG }
	Prov_SetRateDisp = { class = CL }
	
	change_key = { lhs = TaxD_Total which = TaxD_Revenue }
	subtract_key = { lhs = TaxD_Total which = TaxD_Corruption }
	subtract_key = { lhs = TaxD_Total which = TaxD_Farming }
	set_key = { lhs = BU_Income which = TaxD_Total }
}

Prov_SetRateDisp = {
	if = {
		limit = {
			check_key = { lhs = $class$_Total value = 0.01 }
			check_key = { lhs = $class$_SpendTax value = 0.001 }
		}
		if = {
			limit = {
				is_key_equal = { lhs = $class$_Income value = 0 }
			}
			set_key = { lhs = $class$_SpendTaxR value = 0 }
		}
		else = {
			set_key = { lhs = $class$_SpendTaxR which = $class$_SpendTax }
			divide_key = { lhs = $class$_SpendTaxR which = $class$_Income }
			multiply_key = { lhs = $class$_SpendTaxR value = 100 }
		}
		
		if = {
			limit = {
				is_key_equal = { lhs = $class$_MP value = 0 }
			}
			set_key = { lhs = $class$_MPTaxR value = 0 }
		}
		else = {
			set_key = { lhs = $class$_MPTaxR which = $class$_MPTax }
			divide_key = { lhs = $class$_MPTaxR which = $class$_MP }
			multiply_key = { lhs = $class$_MPTaxR value = 100 }
		}
	}
	else = {
		set_key = { lhs = $class$_SpendTaxR value = 0 }
		set_key = { lhs = $class$_MPTaxR value = 0 }
	}
}

Prov_NOPowerCalc = {
	## Effects peasants, serfs, freeholders and urbanites
	## Subjects with more freedom or institutional power to back them suffer less from feudal dues
	## Abstracts seigneurial rights into this, proportionate to noble power
	# Free peasants pay only 2/3rds the due
	set_key = { lhs = Prov_BUPowInv value = 100 }
	subtract_key = { lhs = Prov_BUPowInv which = Prov_BUPow }
	multiply_key = { lhs = Prov_BUPowInv value = 0.01 }
	set_key = { lhs = Tmp_3 value = 300 }
	subtract_key = { lhs = Tmp_3 which = SF_Freedom }
	divide_key = { lhs = Tmp_3 value = 300 }

	set_key = { lhs = NO_RuralPowerScalar value = 0 }
	# Calc tax rate
	if = { # Noble estates extend beyond their own holdings
		limit = {
			owner = {
				Rights_NOGov1Has = yes
			}
		}
		set_key = { lhs = Tmp_5 value = 100 }
		subtract_key = { lhs = Tmp_5 which = SF_Freedom }
		multiply_key = { lhs = Tmp_5 value = 0.333 }
		change_key = { lhs = Tmp_5 value = 100 }
		multiply_key = { lhs = Tmp_5 value = 0.01 }
	
		set_key = { lhs = NO_RuralPowerScalar value = 100 }
		set_key = { lhs = Tmp_6 which = CL_PrpResources }
		multiply_key = { lhs = Tmp_6 value = 0.5 } ## clergy protect their own holdings

		change_key = { lhs = Tmp_6 which = SF_PrpResources } ### no protection except the State

		set_key = { lhs = Tmp_7 which = RE_PrpResources }
		change_key = { lhs = Tmp_7 which = BG_PrpResources }
		multiply_key = { lhs = Tmp_7 value = 0.2 } ## urban is mostly protected
		change_key = { lhs = Tmp_6 which = Tmp_7 }

		multiply_key = { lhs = Tmp_6 which = Prov_BUPow }
		multiply_key = { lhs = Tmp_6 value = 0.01 }

		subtract_key = { lhs = NO_RuralPowerScalar which = BU_PrpResources }
		subtract_key = { lhs = NO_RuralPowerScalar which = Tmp_6 }
		multiply_key = { lhs = NO_RuralPowerScalar which = Tmp_5 }
		
		set_key = { lhs = Tmp_5 value = 0 }
		set_key = { lhs = Tmp_6 value = 0 }
	}
	else_if = {	# Nobles can tax anyone and everyone in the countryside
		limit = {
			owner = {
				Rights_NOGov2Has = yes
			}
		}
		set_key = { lhs = NO_RuralPowerScalar which = SF_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar which = Prov_BUPowInv }
		change_key = { lhs = NO_RuralPowerScalar which = NO_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar which = Tmp_3 }
	}
	else_if = {	# Noble estates are limited to their own holdings
		limit = {
			owner = {
				Rights_NOGov3Has = yes
			}
		}
		set_key = { lhs = NO_RuralPowerScalar which = SF_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar which = Prov_NOPow }
		multiply_key = { lhs = NO_RuralPowerScalar value = 0.01 }
		change_key = { lhs = NO_RuralPowerScalar which = NO_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar which = Tmp_3 }
	}
	else_if = {	# Nobles can raise dues from free peasants on their own land
		limit = {
			owner = {
				Rights_NOGov4Has = yes
			}
		}
		set_key = { lhs = NO_RuralPowerScalar which = NO_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar which = Prov_NOPow }
		multiply_key = { lhs = NO_RuralPowerScalar value = 0.01 }
		multiply_key = { lhs = NO_RuralPowerScalar which = Tmp_3 }
		
		# Can raise on SF unfree peasants on SF land, given power
		set_key = { lhs = Tmp_4 value = 100 }
		subtract_key = { lhs = Tmp_4 which = SF_Freedom }
		multiply_key = { lhs = Tmp_4 which = Prov_NOPow }
		multiply_key = { lhs = Tmp_4 value = 0.01 }
		multiply_key = { lhs = Tmp_4 which = SF_PrpResources }
		multiply_key = { lhs = Tmp_4 value = 0.01 }
		multiply_key = { lhs = Tmp_4 which = Prov_BUPowInv }
		
		change_key = { lhs = NO_RuralPowerScalar which = Tmp_4 }
		set_key = { lhs = Tmp_4 value = 0 }
	}
	else_if = {	# Nobles cannot raise due from free peasants
		limit = {
			owner = {
				Rights_NOGov5Has = yes
			}
		}
		set_key = { lhs = NO_RuralPowerScalar value = 100 }
		subtract_key = { lhs = NO_RuralPowerScalar which = Prov_NOPow }
		multiply_key = { lhs = NO_RuralPowerScalar which = SF_Freedom }
		multiply_key = { lhs = NO_RuralPowerScalar value = -0.01 }
		change_key = { lhs = NO_RuralPowerScalar value = 100 }
		multiply_key = { lhs = NO_RuralPowerScalar which = NO_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar value = 0.01 }
		
		# Can raise on SF unfree peasants on SF land, given power
		set_key = { lhs = Tmp_4 value = 100 }
		subtract_key = { lhs = Tmp_4 which = SF_Freedom }
		multiply_key = { lhs = Tmp_4 which = Prov_NOPow }
		multiply_key = { lhs = Tmp_4 value = 0.01 }
		multiply_key = { lhs = Tmp_4 which = SF_PrpResources } 
		multiply_key = { lhs = Tmp_4 value = 0.01 }
		multiply_key = { lhs = Tmp_4 which = Prov_BUPowInv }
		
		change_key = { lhs = NO_RuralPowerScalar which = Tmp_4 }
		set_key = { lhs = Tmp_4 value = 0 }
	}
	else = { # Nobles cannot raise any due
		set_key = { lhs = NO_RuralPowerScalar value = 100 }
		subtract_key = { lhs = NO_RuralPowerScalar which = SF_Freedom }
		multiply_key = { lhs = NO_RuralPowerScalar which = Prov_NOPow }
		multiply_key = { lhs = NO_RuralPowerScalar value = 0.01 }
		multiply_key = { lhs = NO_RuralPowerScalar which = NO_PrpResources }
		multiply_key = { lhs = NO_RuralPowerScalar value = 0.01 }
	}

	set_key = { lhs = Tmp_3 value = 0 }
}

Prov_DoPowerNO = {
}
Prov_DoTaxNO = {
	# Local taxation
	## Feudal dues
	set_key = { lhs = Tax_TmpBase which = NO_RuralPowerScalar }

	# Processing Monopoly (already in 100 scale)
	if = {
		limit = {
			owner = { Privilege_Has = { Privilege=NOProcessing Lvl=2 } }
		}
		multiply_key = { lhs = Tax_TmpBase value = 0.35 }
	}
	else_if = {
		limit = {
			owner = { Privilege_Has = { Privilege=NOProcessing Lvl=1 } }
		}
		multiply_key = { lhs = Tax_TmpBase value = 0.325 }
	}
	else = {
		# Base rate
		multiply_key = { lhs = Tax_TmpBase value = 0.3 }
	}

	# Tribal cap
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
		multiply_key = { lhs = Tax_TmpBase value = 0.01 }
	}

	multiply_key = { lhs = Tax_TmpBase which = Modi_NobleTaxOnRural }

	if = {
		limit = {
			check_key = { lhs = Tax_TmpBase value = 0.001 }
		}
		Tax_CalcClass = { Class=SF TaxBase=Income TaxType=RentsNO Flow=yes }
	}

	if = {
		limit = {
			owner = {
				NOT = { Rights_NOGov5HasGreater = yes }
				NOT = { Rights_BUTax4Has = yes }
				Rights_BGGov3HasGreater = yes
				Rights_BGGov6HasGreater = no
			}
		}
		# Calc tax rate
		# Lower rate for urban
		if = {
			limit = {
				owner = {
					Rights_NOGov1Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 2.5 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_NOGov2Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 2 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_NOGov3Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 1.5 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_NOGov4Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 1.0 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_NOGov5Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 0.5 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 0 }
		}
		
		if = {
			limit = {
				owner = {
					Rights_BGGov4Has = yes
				}
			}
			multiply_key = { lhs = Tax_TmpBase value = 0.666 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_BGGov5HasGreater = yes
				}
			}
			multiply_key = { lhs = Tax_TmpBase value = 0.333 }
		}
	
		multiply_key = { lhs = Tax_TmpBase which = Prov_BUPowInv }

		# Tribal cap
		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		multiply_key = { lhs = Tax_TmpBase which = Prov_NOPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale

		multiply_key = { lhs = Tax_TmpBase which = Modi_NobleTaxOnUrban }

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=BG TaxBase=Wealth Burgher=yes TaxType=RentsNO Flow=yes }
			multiply_key = { lhs = Tax_TmpBase value = 0.333 }
			Tax_CalcClass = { Class=RE TaxBase=Wealth TaxType=RentsNO Flow=yes }
		}
	}
	Tax_ResetTax = yes
	
	# Impact of State Reach (50% effect)
	set_key = { lhs = Tmp_7 which = Prov_BUPowInv }
	multiply_key = { lhs = Tmp_7 value = 0.5 }
	change_key = { lhs = Tmp_7 value = 0.5 }
	
	set_key = { lhs = Tmp_3 which = NO_PrpResources }
	multiply_key = { lhs = Tmp_3 value = 0.005 }
	set_key = { lhs = Tmp_4 value = 1 }
	subtract_key = { lhs = Tmp_4 which = Tmp_3 }
	# Game Monopoly
	if = {
		limit = {
			owner = { Privilege_HasGreater = { Privilege=NOGame Lvl=1 } }
		}
		if = {
			limit = {
				owner = { Privilege_Has = { Privilege=NOGame Lvl=2 } }
			}
			set_key = { lhs = Tax_TmpBase value = 20 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 10 }
		}
		multiply_key = { lhs = Tax_TmpBase which = Tmp_4 }
		multiply_key = { lhs = Tax_TmpBase which = Tmp_7 }
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcSlot = { GoodID=6 TaxType=GameNO } # Tax the slot
			Tax_CalcSlot = { GoodID=21 TaxType=GameNO } # Tax the slot
			Tax_CalcSlot = { GoodID=22 TaxType=GameNO } # Tax the slot
			Tax_CalcSlot = { GoodID=23 TaxType=GameNO } # Tax the slot
		}
		Tax_ResetTax = yes
	}
	# Forestry Monopoly
	if = {
		limit = {
			owner = { Privilege_HasGreater = { Privilege=NOForestry Lvl=1 } }
		}
		if = {
			limit = {
				owner = { Privilege_Has = { Privilege=NOForestry Lvl=2 } }
			}
			set_key = { lhs = Tax_TmpBase value = 20 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 10 }
		}
		multiply_key = { lhs = Tax_TmpBase which = Tmp_4 }
		multiply_key = { lhs = Tax_TmpBase which = Tmp_7 }
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcSlot = { GoodID=13 TaxType=ForestryNO } # Tax the slot
		}
		Tax_ResetTax = yes
	}
	
	# Commerce flows
	# Merchants need protections
	if = {
		limit = {
			owner = {
				Tax_FlowCommerceNOCan = yes
			}
			owner = {
				NOT = { has_country_modifier = BG_TaxRelief_S }
				NOT = { has_country_modifier = BG_TaxRelief_M }
				NOT = { has_country_modifier = BG_TaxRelief_L }
			}
		}
		# Calc tax rate
		# Lower rate for urban
		if = {
			limit = {
				owner = { Rights_BGCom4Has = yes }
			}
			set_key = { lhs = Tax_TmpBase value = 5 }
		}
		else_if = {
			limit = {
				owner = { Rights_BGCom5Has = yes }
			}
			set_key = { lhs = Tax_TmpBase value = 10 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 5 }
		} 
		multiply_key = { lhs = Tax_TmpBase which = Prov_NOPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		multiply_key = { lhs = Tax_TmpBase which = Tmp_7 }

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=BG TaxBase=IncomeProd Burgher=yes TaxType=CommerceNO Flow=yes }
		}

		Tax_ResetTax = yes
	}
	set_key = { lhs = Tmp_3 value = 0 }
	set_key = { lhs = Tmp_4 value = 0 }
	set_key = { lhs = Tmp_7 value = 0 }
}
Prov_DoPowerBG = {
}
Prov_DoTaxBG = {
	# Local taxation
	## Property tax
	## Represents local urban taxation within the city
	## Most common form of tax, will fund cities in place of a bureaucracy
	## Applies to urbanites, and nobles proportionate to their urban presence (property share)
	# Calc tax rate
	if = {
		limit = {
			owner = {
				Rights_BGGov6HasGreater = yes
			}
		}
		set_key = { lhs = Tax_TmpBase value = 5 }
	}
	else_if = {
		limit = {
			owner = {
				Rights_BGGov5Has = yes
			}
		}
		set_key = { lhs = Tax_TmpBase value = 4 }
	}
	else_if = {
		limit = {
			owner = {
				Rights_BGGov4Has = yes
			}
		}
		set_key = { lhs = Tax_TmpBase value = 3 }
	}
	else_if = {
		limit = {
			owner = {
				Rights_BGGov3Has = yes
			}
		}
		set_key = { lhs = Tax_TmpBase value = 2 }
	}
	else = {
		set_key = { lhs = Tax_TmpBase value = 1 }
	}
	
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
		multiply_key = { lhs = Tax_TmpBase value = 0.01 }
	}
	set_key = { lhs = Tmp_4 which = Tax_TmpBase }
	if = {
		limit = {
			owner = {
				Rights_NOGov4HasGreater = yes
				Rights_NOGov6Has = no
			}
		}
		multiply_key = { lhs = Tax_TmpBase value = 0.5 }
	}

	if = {
		limit = {
			check_key = { lhs = Tax_TmpBase value = 0.001 }
		}
		Tax_CalcClass = { Class=BG TaxBase=WealthBuilding TaxType=PropBG Flow=yes }
	}

	multiply_key = { lhs = Tax_TmpBase which = Prov_BGPow } # Proportionate to power
	multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale

	if = {
		limit = {
			check_key = { lhs = Tax_TmpBase value = 0.001 }
		}
		Tax_CalcClass = { Class=RE TaxBase=WealthBuilding TaxType=PropBG Flow=yes }
	}
	multiply_key = { lhs = Tax_TmpBase value = 0.5 }
	Tax_CalcClass = { Class=NO TaxBase=WealthBuilding TaxType=PropBG Flow=yes }
	if = {
		limit = {
			owner = { # Charity dues exempt clergy
				Rights_CLObl3Has = yes
			}
		}
		Tax_CalcClass = { Class=CL TaxBase=WealthBuilding TaxType=PropBG Flow=yes }
	}
	# Calc tax rate
	if = {
		limit = {
			owner = {
				Rights_BGGov6HasGreater = yes
			}
		}
		if = {
			limit = {
				owner = {
					Rights_BGGov6Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 0.25 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 0.5 }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}

		multiply_key = { lhs = Tax_TmpBase which = Prov_BGPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=WealthResources TaxType=PropBG Flow=yes }
		}
	}
	Tax_ResetTax = yes
	if = {
		limit = {
			owner = {
				Rights_NOGov4HasGreater = yes
				Rights_NOGov6Has = no
			}
		}
		set_key = { lhs = Tax_TmpBase which = Tmp_4 }
		multiply_key = { lhs = Tax_TmpBase value = 0.5 }

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=NO TaxBase=WealthBuilding TaxType=PropNO Flow=yes }
		}

		multiply_key = { lhs = Tax_TmpBase which = Prov_NOPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=RE TaxBase=WealthBuilding TaxType=PropNO Flow=yes }
			multiply_key = { lhs = Tax_TmpBase value = 0.25 }
			Tax_CalcClass = { Class=BG TaxBase=WealthBuilding TaxType=PropNO Flow=yes }
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { Class=CL TaxBase=WealthBuilding TaxType=PropNO Flow=yes }
			}
		}
		Tax_ResetTax = yes
		set_key = { lhs = Tmp_4 value = 0 }
	}
	Tax_ResetTax = yes

	## Excises
	## Represents burgher taxes on goods, common period-appropriate taxation
	## Bureau will take over this domain
	if = {
		limit = {
			owner = {
				Rights_BGGov5HasGreater = yes
			}
		}
		# Calc tax rate
		set_key = { lhs = Tax_TmpBase value = 8 }
		if = {
			limit = {
				check_key = { lhs = TN_ProvPrc9 value = 35 }
			}
			multiply_key = { lhs = Tax_TmpBase value = 35 }
		}
		else = {
			multiply_key = { lhs = Tax_TmpBase which = TN_ProvPrc9 } # Multiply by good price
		}
		multiply_key = { lhs = Tax_TmpBase which = Prov_BUPowInv } # Proportionate to power

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=BG TaxBase=Bought9 TaxType=ExciseBG Flow=yes }
		}

		multiply_key = { lhs = Tax_TmpBase which = Prov_BGPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=RE TaxBase=Bought9 TaxType=ExciseBG Flow=yes }
		}
		set_key = { lhs = Tmp_4 which = Tax_TmpBase }
		if = {
			limit = {
				owner = {
					Rights_BGGov6HasGreater = yes
				}
			}
			multiply_key = { lhs = Tax_TmpBase which = SF_PrpBuilding } # Proportionate to power
			multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=SF TaxBase=Bought9 TaxType=ExciseBG Flow=yes }
			}
		}
		set_key = { lhs = Tax_TmpBase which = Tmp_4 }
		multiply_key = { lhs = Tax_TmpBase which = NO_PrpBuilding } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=NO TaxBase=Bought9 TaxType=ExciseBG Flow=yes }
		}

		if = {
			limit = {
				owner = { # Charity dues exempt clergy
					Rights_CLObl3Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase which = Tmp_4 }
			multiply_key = { lhs = Tax_TmpBase which = CL_PrpBuilding } # Proportionate to power
			multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=CL TaxBase=Bought9 TaxType=ExciseBG Flow=yes }
			}
		}
		
		set_key = { lhs = Tax_TmpBase value = 8 }
		if = {
			limit = {
				check_key = { lhs = TN_ProvPrc9 value = 35 }
			}
			multiply_key = { lhs = Tax_TmpBase value = 35 }
		}
		else = {
			multiply_key = { lhs = Tax_TmpBase which = TN_ProvPrc10 } # Multiply by good price
		}
		multiply_key = { lhs = Tax_TmpBase which = Prov_BUPowInv } # Proportionate to power

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=BG TaxBase=Bought10 TaxType=ExciseBG Flow=yes }
		}

		multiply_key = { lhs = Tax_TmpBase which = Prov_BGPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=RE TaxBase=Bought10 TaxType=ExciseBG Flow=yes }
		}
		set_key = { lhs = Tmp_4 which = Tax_TmpBase }
		if = {
			limit = {
				owner = {
					Rights_BGGov6HasGreater = yes
				}
			}
			multiply_key = { lhs = Tax_TmpBase which = SF_PrpBuilding } # Proportionate to power
			multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=SF TaxBase=Bought10 TaxType=ExciseBG Flow=yes }
			}
		}
		set_key = { lhs = Tax_TmpBase which = Tmp_4 }
		multiply_key = { lhs = Tax_TmpBase which = NO_PrpBuilding } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=NO TaxBase=Bought10 TaxType=ExciseBG Flow=yes }
		}

		if = {
			limit = {
				owner = { # Charity dues exempt clergy
					Rights_CLObl3Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase which = Tmp_4 }
			multiply_key = { lhs = Tax_TmpBase which = CL_PrpBuilding } # Proportionate to power
			multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=CL TaxBase=Bought10 TaxType=ExciseBG Flow=yes }
			}
		}
		Tax_ResetTax = yes
	}

	# Obligations
	## Tolls
	## Represents burgher taxation on trade entering cities, proportionate to power
	## Bureau will take over this unless autonomy is institutional
	if = {
		limit = {
			owner = {
				OR = {
					has_country_modifier = BG_SpecialToll_S
					has_country_modifier = BG_SpecialToll_M
					has_country_modifier = BG_SpecialToll_L
				}
			}
		}		
		# Calc tax rate
		set_key = { lhs = Tax_TmpBase value = 10 }
		multiply_key = { lhs = Tax_TmpBase which = Prov_BGPow } # Proportionate to power
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		#multiply_key = { lhs = Tax_TmpBase which = Prov_BUPowInv }
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			
			#Tax_CalcSlot = { GoodID=31 TaxType=TollBU } # Tax the slot
			Tax_CalcSlot = { GoodID=32 TaxType=TollBU } # Tax the slot
			
		}
		Tax_ResetTax = yes
	}
	set_key = { lhs = Tmp_4 value = 0 }
}
Prov_DoPowerCL = {
}
Prov_DoTaxCL = {
	# Tax_TmpBase = base rate of the tax
	# Local taxation
	## Tithe (tenancy tax)
	## Catholic-like 10% tithe. Without churches and clergy being present, this tax is a non starter
	## Applies to the rural environment, to all who work regardless of land
	set_key = { lhs = Tmp_3 which = Prov_CLPow }
	multiply_key = { lhs = Tmp_3 value = 0.01 } # 0-100 scale -> 0-1 scale
	set_key = { lhs = Tmp_4 which = Tmp_3 }
	multiply_key = { lhs = Tmp_3 which = Tmp_3 }
	multiply_key = { lhs = Tmp_3 value = 0.666 }
	multiply_key = { lhs = Tmp_4 value = 0.333 }
	change_key = { lhs = Tmp_3 which = Tmp_4 }
	if = {
		limit = {
			owner = { # Charity dues exempt clergy
				NOT = { Rights_CLTax3HasGreater = yes }
			}
		}
		if = {
			limit = {
				owner = {
					Rights_CLTax1Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 20 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 10 }
		}
		multiply_key = { lhs = Tax_TmpBase which = Tmp_3 } ## Semi-exponential clergy power
		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=IncomeProd TaxType=TitheCL Flow=yes }
		}
		if = {
			limit = {
				owner = {
					Rights_CLTax1Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 8 }
		multiply_key = { lhs = Tax_TmpBase which = Tmp_3 } ## Semi-exponential clergy power

			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=RE TaxBase=IncomeProd TaxType=TitheCL Flow=yes }
			}
		}
		Tax_ResetTax = yes
	}
	 
	## Donations (tithing)
	## Represents willing and free donations to the church
	## Always present, but clergy power will make such payments obligatory in the minds of the people

	# Calc tax rate
	### Pious (extra rate)
	if = {
		limit = {
			owner = {
				Rights_CLTax2HasGreater = yes
			}
			check_key = { lhs = CL_Total value = 0.01 }
		}
		set_key = { lhs = Tax_TmpBase value = 0.04 } # 0.25% of Wealth
		multiply_key = { lhs = Tax_TmpBase which = Tmp_3 } ## Semi-exponential clergy power
		### Base
		change_key = { lhs = Tax_TmpBase value = 0.04 } # +0.2 = 0.5% of Wealth
		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}

		if = {
			limit = {
				owner = {
					Rights_CLTax3Has = yes
				}
			}
			Tax_CalcClass = { Class=SF TaxBase=Income TaxType=DonationsCL Flow=yes }
		}
		Tax_CalcClass = { Class=RE TaxBase=Income TaxType=DonationsCL Flow=yes }
		Tax_ResetTax = yes
	}
	if = {
		limit = {
			check_key = { lhs = CL_Total value = 0.01 }
		}
		# Some are less willing to part with their wealth, but still want to be seen as pious (lower rate)
		# Calc tax rate
		### Pious (extra rate)
		### Base
		set_key = { lhs = Tax_TmpBase value = 0.05 } # 0.03% of Wealth
		multiply_key = { lhs = Tax_TmpBase which = Tmp_3 } ## Semi-exponential clergy power
		change_key = { lhs = Tax_TmpBase value = 0.05 } # 0.03% of Wealth
		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		Tax_CalcClass = { Class=BG TaxBase=Wealth Burgher=yes TaxType=DonationsCL Flow=yes }
		
		multiply_key = { lhs = Tax_TmpBase value = 0.5 } # 0.01% of Wealth
		Tax_CalcClass = { Class=NO TaxBase=Wealth TaxType=DonationsCL Flow=yes }

		Tax_ResetTax = yes
		
		if = {
			limit = {
				check_key = { lhs = SF_Total value = 0.5 }
			}
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				if = {
					limit = {
						check_key = { lhs = SF_Total value = 10 }
					}
					set_key = { lhs = Tax_TmpBase value = 0.5 } # 0.4% of Wealth
				}
				else = {
					set_key = { lhs = Tax_TmpBase value = 0.25 } # 0.1% of Wealth
				}
			}
			else = {
				if = {
					limit = {
						check_key = { lhs = SF_Total value = 10 }
					}
					set_key = { lhs = Tax_TmpBase value = 0.8 } # 0.4% of Wealth
				}
				else = {
					set_key = { lhs = Tax_TmpBase value = 0.4 } # 0.1% of Wealth
				}
			}
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 0.5 } # 0.75% of Wealth
			}
			else = {
				set_key = { lhs = Tax_TmpBase value = 0.8 } # 0.75% of Wealth
			}
			Tax_CalcClass = { Class=CL TaxBase=Wealth TaxType=CharitySF Flow=yes }
			Tax_ResetTax = yes
		}
		
		if = {
			limit = {
				check_key = { lhs = RE_Total value = 0.5 }
			}
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				if = {
					limit = {
						check_key = { lhs = RE_Total value = 10 }
					}
					set_key = { lhs = Tax_TmpBase value = 0.35 } # 0.4% of Wealth
				}
				else = {
					set_key = { lhs = Tax_TmpBase value = 0.1 } # 0.1% of Wealth
				}
			}
			else = {
				if = {
					limit = {
						check_key = { lhs = RE_Total value = 10 }
					}
					set_key = { lhs = Tax_TmpBase value = 0.6 } # 0.4% of Wealth
				}
				else = {
					set_key = { lhs = Tax_TmpBase value = 0.15 } # 0.1% of Wealth
				}
			}
			Tax_CalcClass = { Class=CL TaxBase=Wealth TaxType=CharityRE Flow=yes }
			Tax_ResetTax = yes
		}

	}
}
# Clans
Prov_DoPowerTR = {
}
Prov_DoTaxTR = {
	if = {
		limit = {
			check_key = { lhs = Prov_TRPow value = 0.001 }
		}
		# Tribute
		# Represents the tribute payed by all members of clans to the leaders, the 'chiefs'
		# Calc tax rate
		set_key = { lhs = Tmp_3 value = 100 }  # 1% of all wealth
		subtract_key = { lhs = Tmp_3 which = Prov_TRPow } # Proportionate to power
		multiply_key = { lhs = Tmp_3 value = 0.01 } # 0-100 scale -> 0-1 scale
		multiply_key = { lhs = Tmp_3 which = Tmp_3 }
		set_key = { lhs = Tax_TmpBase value = 1 }
		subtract_key = { lhs = Tax_TmpBase which = Tmp_3 }
		set_key = { lhs = Tmp_3 which = Tax_TmpBase }
		# left with a 1% wealth tax, that gets high quick

		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=SF TaxBase=Wealth TaxType=TributeTR Flow=yes }

			Tax_CalcClass = { Class=RE TaxBase=Wealth TaxType=TributeTR Flow=yes }
			Tax_CalcClass = { Class=NM TaxBase=Wealth TaxType=TributeTR Flow=yes }

			Tax_CalcClass = { Class=CL TaxBase=Wealth TaxType=TributeTR Flow=yes }
			multiply_key = { lhs = Tax_TmpBase value = 0.25 } # 1.5%, More parasitic on the elites
			Tax_CalcClass = { Class=NO TaxBase=Wealth TaxType=TributeTR Flow=yes }
			multiply_key = { lhs = Tax_TmpBase value = 0.25 } # Way less from these
			Tax_CalcClass = { Class=BG TaxBase=Wealth Burgher=yes TaxType=TributeTR Flow=yes }
		}
		Tax_ResetTax = yes

		if = {
			limit = {
				check_key = { lhs = NM_Total value = 0.001 }
			}
			# Tribute
			# Represents the tribute payed by all members of clans to the leaders, the 'chiefs'
			# Calc tax rate
			set_key = { lhs = Tax_TmpBase value = 20 } # 5% of all revenue
			multiply_key = { lhs = Tax_TmpBase which = Tmp_3 } # Proportionate to power, already calced

			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=NM TaxBase=Income TaxType=TributeTR Flow=yes }
			}
			Tax_ResetTax = yes
		}
	}
}
Prov_DoPowerBU = {
}
Prov_DoTaxBU = {
	if = {
		limit = {
			owner = { Tax_FlowFeesCan = yes }
		}
		set_key = { lhs = Tax_TmpBase value = 0.05 }
		Tax_CalcClass = { Class=SF TaxBase=Wealth TaxType=Fees Bureau=yes }
		
		set_key = { lhs = Tax_TmpBase value = 0.1 }
		Tax_CalcClass = { Class=RE TaxBase=Wealth TaxType=Fees Bureau=yes }
		
		set_key = { lhs = Tax_TmpBase value = 0.05 }
		Tax_CalcClass = { Class=BG TaxBase=Wealth TaxType=Fees Bureau=yes }
		
		set_key = { lhs = Tax_TmpBase value = 0.02 }
		Tax_CalcClass = { Class=NO TaxBase=Wealth TaxType=Fees Bureau=yes }
		if = {
			limit = {
				owner = { # Charity dues exempt clergy
					Rights_CLObl3Has = yes
				}
			}
			Tax_CalcClass = { Class=CL TaxBase=Wealth TaxType=Fees Bureau=yes }
		}
		Tax_ResetTax = yes
	}
	# BrutusY: delay applying BU_TaxRelief modifier to here
	# This allows the timed modifier to be in sync with tax cycle
	# Using country_flag BU_TaxReliefStarted to set the modifier
	if = {
		limit = {
			owner = {
				has_country_flag = BU_TaxReliefStarted 
			}
		}
		owner = {
			clr_country_flag = BU_TaxReliefStarted
			BU_TaxRelief = yes
			# Maybe adding a event here indicating that Tax Relief is in effect
			# Description would be how your subjects are relishing in the new tax relief measure
		}
	}
	# End of delayed applying BU_TaxRelief
	if = {
		limit = {
			owner = { NOT = { has_country_modifier = BU_TaxRelief } }
		}
		
		### Land tax
		if = {
			limit = {
				owner = { Tax_TaxLandCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxLand }
			set_key = { lhs = Tax_TmpBase value = 5 }
			# Calc tax rate
			# Get base rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcClass = { building=yes Class=SF TaxBase=WealthResources TaxType=Land Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=WealthResources TaxType=Land Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=WealthResources Notable=yes TaxType=Land Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=WealthResources Notable=yes TaxType=Land Burgher=yes Bureau=yes }

			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=WealthResources Notable=yes TaxType=Land Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		### Property tax
		if = {
			limit = {
				owner = { Tax_TaxPropCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxProp }
			set_key = { lhs = Tax_TmpBase value = 5 }
			# Calc tax rate
			# Get base rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcClass = { building=yes Class=SF TaxBase=WealthBuilding TaxType=PropertyBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=WealthBuilding TaxType=PropertyBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=WealthBuilding Notable=yes TaxType=PropertyBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=WealthBuilding Notable=yes TaxType=PropertyBU Burgher=yes Bureau=yes }	

			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=WealthBuilding Notable=yes TaxType=PropertyBU Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		# Commerce flows
		# Merchants need protections
		if = {
			limit = {
				owner = {
					Tax_FlowCommerceBUCan = yes
					NOT = { has_country_modifier = BG_TaxRelief_S }
					NOT = { has_country_modifier = BG_TaxRelief_M }
					NOT = { has_country_modifier = BG_TaxRelief_L }
				}
			}
			if = {
				limit = {
					owner = { Rights_BGCom1Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 15 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom2Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 7.5 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom3Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 5 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom4Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 2.5 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom7Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 1 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom8Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 2 }
			}
			else_if = {
				limit = {
					owner = { Rights_BGCom10Has = yes }
				}
				set_key = { lhs = Tax_TmpBase value = 0.5 }
			}
			else = {
				set_key = { lhs = Tax_TmpBase value = 0 }
			}

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { Class=BG TaxBase=IncomeProd TaxType=Commerce Burgher=yes Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		# Poll Tax
		# Simple yet effective tax, a tax per head. Abstracts hearth taxes as well
		# Applies to all free classes
		if = {
			limit = {
				owner = { Tax_TaxPollCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxPoll }
			set_key = { lhs = Tax_TmpBase value = 5 }
			# Calc tax rate
			# X ducats per 1000 people

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcClass = { building=yes Class=SF TaxBaseOverflow=yes TaxType=Poll Bureau=yes }
			
			Tax_CalcClass = { building=yes Class=RE TaxBaseOverflow=yes TaxType=Poll Bureau=yes }

			Tax_CalcClass = { building=yes Class=NO TaxBaseOverflow=yes Notable=yes TaxType=Poll Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBaseOverflow=yes Notable=yes TaxType=Poll Burgher=yes Bureau=yes }
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBaseOverflow=yes Notable=yes TaxType=Poll Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		# Inheritance Tax
		# A more political tax, applies on wealth, proportionate to death rates
		# Applies to those with land and property, those with more assets
		# Not enforced on poorer classes like residents, artisans and peasants
		if = {
			limit = {
				owner = { Tax_TaxInheritCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxInherit }
			set_key = { lhs = Tax_TmpBase value = 30 }
			# Calc tax rate
			# Get base rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			
			Tax_CalcClass = { building=yes Class=NO TaxBase=WealthResources Notable=yes MultiplierVal=0.04 TaxType=Inheritance Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=WealthBuilding Notable=yes MultiplierVal=0.04 TaxType=Inheritance Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=Wealth Notable=yes MultiplierVal=0.005 TaxType=Inheritance Bureau=yes }

			Tax_CalcClass = { building=yes Class=BG TaxBase=WealthResources Notable=yes MultiplierVal=0.04 TaxType=Inheritance Burgher=yes Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=WealthBuilding Notable=yes MultiplierVal=0.04 TaxType=Inheritance Burgher=yes Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=Wealth Notable=yes MultiplierVal=0.005 TaxType=Inheritance Burgher=yes Bureau=yes }
			
			
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=WealthResources Notable=yes MultiplierVal=0.04 TaxType=Inheritance Bureau=yes }
				Tax_CalcClass = { building=yes Class=CL TaxBase=WealthBuilding Notable=yes MultiplierVal=0.04 TaxType=Inheritance Bureau=yes }
				Tax_CalcClass = { building=yes Class=CL TaxBase=Wealth Notable=yes MultiplierVal=0.005 TaxType=Inheritance Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		# Chattels tax
		# An effective wealth tax, it asseses the assets of individuals and taxes a portion of a class's effective wealth
		if = {
			limit = {
				owner = { Tax_TaxChattelsCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxChattels }
			set_key = { lhs = Tax_TmpBase value = 25 }
			# Calc tax rate
			# Get base rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcClass = { building=yes Class=SF TaxBase=Wealth TaxType=Chattel MultiplierVal=0.01 Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=Wealth TaxType=Chattel MultiplierVal=0.01 Bureau=yes }
			
			Tax_CalcClass = { building=yes Class=NO TaxBase=Wealth Notable=yes TaxType=Chattel MultiplierVal=0.01 Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=Wealth Notable=yes TaxType=Chattel MultiplierVal=0.01 Burgher=yes Bureau=yes }
			
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=Wealth Notable=yes TaxType=Chattel MultiplierVal=0.01 Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		## Tolls
		if = {
			limit = {
				owner = { Tax_TaxTollCan = yes }
				owner = {
					NOT = { has_country_modifier = BG_TaxRelief_S }
					NOT = { has_country_modifier = BG_TaxRelief_M }
					NOT = { has_country_modifier = BG_TaxRelief_L }
				}
			}
			Tax_GetTaxRate = { TaxName=TaxToll }
			set_key = { lhs = Tax_TmpBase value = 8 }
			# Calc tax rate
			# Get base rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			if = {
				limit = {
					Post_Has = yes
				}
				multiply_key = { lhs = Tax_TmpBase which = Post_LocalInfluence }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			
			Tax_CalcSlotScaled = { GoodID=32 TaxType=TollBU } # Tax the slot
			Tax_ResetTax = yes
		}

		# Excises
		# Core of early modern tax, the primary set of indirect taxes and the first to historically bureaucratise

		## Salt
		## Applies to salt consumption, at a rate of X * Salt price
		if = {
			limit = {
				owner = { Tax_TaxSaltCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxSalt }
			set_key = { lhs = Tax_TmpBase value = 30 }
			# Calc tax rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			
			multiply_key = { lhs = Tax_TmpBase which = TN_ProvPrc2 } # Multiply by good price
			
			Tax_CalcClass = { building=yes Class=SF TaxBase=Bought2 TaxType=SaltBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=Bought2 TaxType=SaltBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=Bought2 Notable=yes TaxType=SaltBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=Bought2 Notable=yes TaxType=SaltBU Burgher=yes Bureau=yes }
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=Bought2 Notable=yes TaxType=SaltBU Bureau=yes }
			}
			Tax_ResetTax = yes
		}

		## Substances
		## Applies to cashcrop consumption, at a rate of X * cashcrop price
		if = {
			limit = {
				owner = { Tax_TaxSubstCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxSubst }
			set_key = { lhs = Tax_TmpBase value = 30 }
			# Calc tax rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			set_key = { lhs = Tmp_4 which = Tax_TmpBase }
			
			multiply_key = { lhs = Tax_TmpBase which = TN_ProvPrc9 } # Multiply by good price

			Tax_CalcClass = { building=yes Class=SF TaxBase=Bought9 TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=Bought9 TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=Bought9 Notable=yes TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=Bought9 Notable=yes TaxType=SubstancesBU Burgher=yes Bureau=yes }
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=Bought9 Notable=yes TaxType=SubstancesBU Bureau=yes }
			}
			
			set_key = { lhs = Tax_TmpBase which = Tmp_4 }
			multiply_key = { lhs = Tax_TmpBase which = TN_ProvPrc10 } # Multiply by good price
			
			Tax_CalcClass = { building=yes Class=SF TaxBase=Bought10 TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=RE TaxBase=Bought10 TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=NO TaxBase=Bought10 Notable=yes TaxType=SubstancesBU Bureau=yes }
			Tax_CalcClass = { building=yes Class=BG TaxBase=Bought10 Notable=yes TaxType=SubstancesBU Burgher=yes Bureau=yes }
			if = {
				limit = {
					owner = { # Charity dues exempt clergy
						Rights_CLObl3Has = yes
					}
				}
				Tax_CalcClass = { building=yes Class=CL TaxBase=Bought10 Notable=yes TaxType=SubstancesBU Bureau=yes }
			}
			Tax_ResetTax = yes
			set_key = { lhs = Tmp_4 value = 0 }
		}

		## Timber
		## Applies to the timber slot, simple X * Slot income tax
		if = {
			limit = {
				owner = { Tax_TaxTimberCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxTimber }
			set_key = { lhs = Tax_TmpBase value = 15 }
			# Calc tax rate
			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcSlotScaled = { GoodID=7 TaxType=TimberBU }
			Tax_ResetTax = yes
		}

		## Alcohol
		## Applies to the food slot, simple X * SLot income tax
		if = {
			limit = {
				owner = { Tax_TaxAlcoholCan = yes }
			}
			Tax_GetTaxRate = { TaxName=TaxAlcohol }
			set_key = { lhs = Tax_TmpBase value = 7.5 }
			# Calc tax rate

			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}

			Tax_CalcSlotScaled = { GoodID=1 TaxType=AlcoholBU }
			Tax_ResetTax = yes
		}
	}
	## State Feudal dues
	## Effects peasants, serfs, freeholders and urbanites
	## Subjects with more freedom or institutional power to back them suffer less from feudal dues
	## Abstracts seigneurial rights into this, proportionate to noble power
	if = {
		limit = {
			owner = { Tax_TaxFeudalCan = yes }
		}
		Tax_GetTaxRate = { TaxName=TaxFeudal }
		
		set_key = { lhs = Tax_TmpBase value = 8 }
		if = {
			limit = {
				is_capital = yes
			}
			change_key = { lhs = Tax_TmpBase value = 7 }
		}
		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		multiply_key = { lhs = Tax_TmpBase which = BU_PrpResources } # Proportionate to state land
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
		
		# Tax the timber slot at this rate, seigneurial forestry
		Tax_CalcSlotScaled = { GoodID=7 TaxType=ForestBU }
		Tax_ResetTax = yes
		
		set_key = { lhs = Tax_TmpBase value = 20 }
		# Calc tax rate
		if = {
			limit = {
				is_capital = yes
			}
			change_key = { lhs = Tax_TmpBase value = 10 }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		multiply_key = { lhs = Tax_TmpBase which = BU_PrpResources } # Proportionate to state land
		multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale

		Tax_CalcClass = { building=yes Class=SF TaxBase=Income TaxType=Rents Bureau=yes }

		if = {
			limit = {
				owner = {
					NOT = { Rights_NOGov5HasGreater = yes }
					NOT = { Rights_BUTax4Has = yes }
					Rights_BGGov3HasGreater = yes
					Rights_BGGov6HasGreater = no
				}
			}
			# Calc tax rate
			# Lower rate for urban
			if = {
				limit = {
					owner = {
						Rights_NOGov1Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 2.5 }
			}
			else_if = {
				limit = {
					owner = {
						Rights_NOGov2Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 2 }
			}
			else_if = {
				limit = {
					owner = {
						Rights_NOGov3Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 1.5 }
			}
			else_if = {
				limit = {
					owner = {
						Rights_NOGov4Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 1.0 }
			}
			else_if = {
				limit = {
					owner = {
						Rights_NOGov5Has = yes
					}
				}
				set_key = { lhs = Tax_TmpBase value = 0.5 }
			}
			else = {
				set_key = { lhs = Tax_TmpBase value = 0 }
			}
			
			# Tribal cap
			if = {
				limit = {
					check_key = { lhs = Prov_TRPow value = 0.001 }
				}
				multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
				multiply_key = { lhs = Tax_TmpBase value = 0.01 }
			}
			if = {
				limit = {
					owner = {
						Rights_BGGov4Has = yes
					}
				}
				multiply_key = { lhs = Tax_TmpBase value = 0.5 }
			}
			else_if = {
				limit = {
					owner = {
						Rights_BGGov5HasGreater = yes
					}
				}
				multiply_key = { lhs = Tax_TmpBase value = 0.25 }
			}
			multiply_key = { lhs = Tax_TmpBase which = BU_PrpResources } # Proportionate to state land
			multiply_key = { lhs = Tax_TmpBase value = 0.01 } # 0-100 scale -> 0-1 scale
			multiply_key = { lhs = Tax_TmpBase which = Prov_BUPowInv }

			if = {
				limit = {
					check_key = { lhs = Tax_TmpBase value = 0.001 }
				}
				Tax_CalcClass = { building=yes Class=RE TaxBase=Income TaxType=Rents Bureau=yes }
				Tax_CalcClass = { building=yes Class=BG TaxBase=Income TaxType=Rents Burgher=yes Bureau=yes }
			}
		}
		Tax_ResetTax = yes

		set_key = { lhs = Tmp_4 value = 0 }
	}

	set_key = { lhs = Tax_TmpBase value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
}
Tax_DoObligations = {
	# Obligations
	## Rent dues
	## Represents feudal payments from nobles to the crown
	## Not an income tax, like most feudal taxes its based on wealth
	## Proportionate to noble power, then their loyalty, then made redundant by any bureaucracy
	if = {
		limit = {
			owner = { Tax_TaxNobleCan = yes }
		}
		# Calc tax rate
		# Get base rate
		Tax_GetTaxRate = { TaxName=TaxNoble }
		if = {
			limit = {
				owner = {
					Rights_NOObl1Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 5 }
		}
		else_if = {
			limit = {
				owner = {
					Rights_NOObl2Has = yes
				}
			}
			set_key = { lhs = Tax_TmpBase value = 10 }
		}
		else = {
			set_key = { lhs = Tax_TmpBase value = 15 }
		}
		if = {
			limit = {
				is_capital = yes
			}
			change_key = { lhs = Tax_TmpBase value = 5 }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		Tax_CalcClass = { building=yes Class=NO TaxBase=IncomeTax TaxType=ObligationsNO Bureau=yes }
		Tax_ResetTax = yes
	}
	## Charter fees
	## Represents the creation of a wealth transfer within the feudal transfer for urban cities
	## Difficulties of urban tax by a feudal state keeps the rate low
	## Bureaucracy will end difficulties and end this tax, and its dependent on burgher power and sentiment
	if = {
		limit = {
			owner = { Tax_TaxCharterCan = yes }
		}
		# Calc tax rate
		# Get base rate
		Tax_GetTaxRate = { TaxName=TaxCharter }
		set_key = { lhs = Tax_TmpBase value = 25 }
		if = {
			limit = {
				owner = { government = republic }
			}
			change_key = { lhs = Tax_TmpBase value = 10 }
		}
		if = {
			limit = {
				is_capital = yes
			}
			change_key = { lhs = Tax_TmpBase value = 10 }
		}

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		Tax_CalcClass = { building=yes Class=BG TaxBase=IncomeTax TaxType=ObligationsBG Burgher=yes Bureau=yes }

		Tax_ResetTax = yes
	}

	## Church fees
	if = {
		limit = {
			check_key = { lhs = CL_IncomeTax value = 0.001 }

			owner = {
				Rights_CLObl2Has = yes
			}
		}
		set_key = { lhs = Tax_TmpBase value = 5 }

		multiply_key = { lhs = Tax_TmpBase which = Prov_CLLoy } # Proportionate to loyalty
		multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		
		# 90% Autonomy effect
		set_key = { lhs = Tmp_3 which = Tax_Tmp9 }
		multiply_key = { lhs = Tmp_3 value = 0.9 }
		change_key = { lhs = Tmp_3 value = 0.1 }
		
		multiply_key = { lhs = Tax_TmpBase which = Tmp_3 }
		
		set_key = { lhs = Tmp_3 value = 0 }

		if = {
			limit = {
				check_key = { lhs = Prov_TRPow value = 0.001 }
			}
			multiply_key = { lhs = Tax_TmpBase which = Prov_TRPowCap }
			multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		}
		
		if = {
			limit = {
				check_key = { lhs = Tax_TmpBase value = 0.001 }
			}
			Tax_CalcClass = { Class=CL TaxBase=IncomeTax TaxType=ObligationsCL Bureau=yes } # Its purely donative this way
		}
		Tax_ResetTax = yes
	}
	## Tribute
	## Tribute payed by the leaders of clans, to the highest leader, the tribal body (council, single leader, etc)
	if = {
		limit = {
			owner = { Tax_TaxTributeCan = yes }
		}
		# Calc tax rate
		# Get base rate
		Tax_GetTaxRate = { TaxName=TaxTribute }
		set_key = { lhs = Tax_TmpBase value = 10 }
		multiply_key = { lhs = Tax_TmpBase which = Privilege_TRTax }

		if = {
			limit = {
				owner = {
					OR = {
						has_country_modifier = TR_ExtraTribute_S
						has_country_modifier = TR_ExtraTribute_M
						has_country_modifier = TR_ExtraTribute_L
					}
				}
			}
			multiply_key = { lhs = Tax_TmpBase value = 2 }
		}
		else_if = {
			limit = {
				owner = {
					OR = {
						has_country_modifier = TR_ReduceTribute_S
						has_country_modifier = TR_ReduceTribute_M
						has_country_modifier = TR_ReduceTribute_L
					}
				}
			}
			multiply_key = { lhs = Tax_TmpBase value = 0.5 }
		}
		
		Tax_CalcClass = { building=yes Class=NO AnyBase=TR_IncomeTax TaxType=ObligationsTR Bureau=yes }
		Tax_ResetTax = yes
	}
}
Prov_Special = {
	# Post fees
	if = {
		limit = {
			Post_Has = yes
		}
		set_key = { lhs = Post_Fees value = 0 }
		set_key = { lhs = Post_LocalFees value = 0 }
		
		set_key = { lhs = Tax_TmpBase value = 33 }
		multiply_key = { lhs = Tax_TmpBase which = Post_ForeignInfluence }
		multiply_key = { lhs = Tax_TmpBase value = 0.01 }
		Tax_CalcClass = { Class=BG TaxBase=Income TaxType=Post Flow=yes }
		set_key = { lhs = TaxD_BGPost value = 0 }
		
		Tax_MoveTax = { TaxDest=Post_Fees }
		multiply_key = { lhs = Post_Fees value = 0.9 } # 80% to owners
		Tax_MoveTax = { TaxDest=Post_LocalFees }
		multiply_key = { lhs = Post_LocalFees value = 0.1 } # 20% to locals
		
		Tax_ResetTax = yes
	}
	else = {
		set_key = { lhs = Post_Fees value = 0 }
		set_key = { lhs = Post_LocalFees value = 0 }
	}
}
Prov_Unfree = {
	change_key = { lhs = SF_Freedom which = Modi_SFFreedomChange }

	if = {
		limit = {
			owner = { Rights_NOTen2Has = yes }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = SF_Freedom value = 20 } }
			}
			set_key = { lhs = SF_Freedom value = 20 }
		}
	}
	else_if = {
		limit = {
			owner = { Rights_NOTen3Has = yes }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = SF_Freedom value = 35 } }
			}
			set_key = { lhs = SF_Freedom value = 35 }
		}
	}
	else_if = {
		limit = {
			owner = { Rights_NOTen4Has = yes }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = SF_Freedom value = 50 } }
			}
			set_key = { lhs = SF_Freedom value = 50 }
		}
	}

	if = {
		limit = {
			check_key = { lhs = SF_Freedom value = 100.001 }
		}
		set_key = { lhs = SF_Freedom value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = SF_Freedom value = 0 } }
		}
		set_key = { lhs = SF_Freedom value = 0 }
	}
	
	# Cutoff after 1 decimal for display
	multiply_key = { lhs = SF_Freedom value = 0.001 }
	multiply_key = { lhs = SF_Freedom value = 1000 }
	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
}

# Tax Assembly Scripts
Tax_CalcDucatBase = {
	Tax_AvailableWealthAdjust = { Class=$Class$ } ## Shouldnt extract until the end
	change_key = { lhs = $Class$_SpendTax which = Tmp_1 }
	[[TaxType]
	change_key = { lhs = TaxD_$TaxType$ which = Tmp_1 }
	]
	if = {
		limit = {
			owner = { ai = no }
		}
		[[TaxType]
		change_key = { lhs = TaxD_$Class$$TaxType$ which = Tmp_1 }
		change_key = { lhs = TaxD_$Class$ which = Tmp_1 }
		]
		[[Bureau]
		if = {
			limit = {
				always = $Bureau$
			}
			change_key = { lhs = TaxD_$Class$_BU which = Tmp_1 }
		}
		]
		[[Flow]
		if = {
			limit = {
				always = $Flow$
			}
			change_key = { lhs = TaxD_$Class$_Flow which = Tmp_1 }
		}
		]
	}
}

Tax_CalcClass = {
	if = {
		limit = {
			check_key = { lhs = $Class$_Total value = 0.01 }
		}
		## TaxBase == class value to multiply by the base rate, such as $Class$_Wealth, $Class$_Income, $Class$_Surplus
		[[TaxBase]
		set_key = { lhs = Tmp_1 which = Tax_TmpBase }
		Tax_CalcAmount = { RateBaseVar=$Class$_$TaxBase$ }
		]
		## TaxBase but less precision to avoidoverflow
		[[TaxBaseOverflow]
			if = {
				limit = {
					always = $TaxBaseOverflow$
				}
				set_key = { lhs = Tmp_1 which = Tax_TmpBase }
				Tax_CalcAmountPoll = { RateBaseVar=$Class$_Total }
			}
		]
		## AnyBase == any value to multiply by the base rate, such as Investment_Income, etc
		[[AnyBase]
			set_key = { lhs = Tmp_1 which = Tax_TmpBase }
			Tax_CalcAmount = { RateBaseVar=$AnyBase$ }
		]
		## if taxing an elite, use their privileges, and multiplier
		[[Notable]
			if = {
				limit = {
					always = $Notable$
				}
				multiply_key = { lhs = Tmp_1 which = Privilege_$Class$Tax }
				multiply_key = { lhs = Tmp_1 which = $Class$_Multi }
			}
		]
		## also scale by property
		[[Property]
			multiply_key = { lhs = Tmp_1 which = $Class$_Prp$Property$ }
			multiply_key = { lhs = Tmp_1 value = 0.01 }
		]
		## if burgher, reduce tax by the trade post influence if existent
		[[Burgher]
			if = {
				limit = {
					always = $Burgher$
					Post_Has = yes
				}
				multiply_key = { lhs = Tmp_1 which = Post_LocalInfluence }
				multiply_key = { lhs = Tmp_1 value = 0.01 }
			}
		]
		# multiply by a fixed value
		[[MultiplierVal]
			multiply_key = { lhs = Tmp_1 value = $MultiplierVal$ }
		]
		# multiply by a variable
		[[MultiplierKey]
			multiply_key = { lhs = Tmp_1 which = $MultiplierKey$ }
		]
		[[building]
		if = {
			limit = {
				always = $building$
			}
			change_key = { lhs = TaxD_$TaxType$High which = Tmp_1 }			
			multiply_key = { lhs = Tmp_1 which = Tax_TmpScalar }
		}
		]
		### actually deduct tax
		if = {
			limit = {
				check_key = { lhs = Tmp_1 value = 0.001 }
			}
			Tax_CalcDucatBase = { Class=$Class$ TaxType=$TaxType$ [[Bureau] Bureau=$Bureau$ ] [[Flow] Flow=$Flow$ ] }
		}
	}
}

# Tax any slot that has the given good ID
Tax_CalcSlot = {
	set_key = { lhs = Tmp_1 which = Tax_TmpBase }
	Tax_CalcSlotPer = { SlotID=0 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=1 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=2 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=3 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=4 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=5 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=6 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=7 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=8 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=9 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=10 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=11 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=12 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=13 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=14 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPer = { SlotID=15 GoodID=$GoodID$ TaxType=$TaxType$ }
}

# Taxes a given slot
Tax_CalcSlotPer = {
	if = {
		limit = {
            has_province_flag = Prod_S$SlotID$
			is_key_equal = { lhs = Prod_S$SlotID$ value = $GoodID$ }
		}
		Tax_CalcAmount = { RateBaseVar=Prod_S$SlotID$Income }
		if = {
			limit = {
				check_key = { lhs = Tmp_1 value = 0.001 }
			}
			change_key = { lhs = Prod_S$SlotID$SpendTax which = Tmp_1 }
			change_key = { lhs = TaxD_$TaxType$ which = Tmp_1 }
		}
	}
}

# Tax any slot that has the given good ID
Tax_CalcSlotScaled = {
	set_key = { lhs = Tmp_1 which = Tax_TmpBase }
	Tax_CalcSlotPerScaled = { SlotID=0 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=1 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=2 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=3 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=4 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=5 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=6 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=7 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=8 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=9 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=10 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=11 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=12 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=13 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=14 GoodID=$GoodID$ TaxType=$TaxType$ }
	Tax_CalcSlotPerScaled = { SlotID=15 GoodID=$GoodID$ TaxType=$TaxType$ }
}

# Taxes a given slot
Tax_CalcSlotPerScaled = {
	if = {
		limit = {
            has_province_flag = Prod_S$SlotID$
			is_key_equal = { lhs = Prod_S$SlotID$ value = $GoodID$ }
		}
		Tax_CalcAmount = { RateBaseVar=Prod_S$SlotID$Income }
		if = {
			limit = {
				check_key = { lhs = Tmp_1 value = 0.001 }
			}
			change_key = { lhs = TaxD_$TaxType$High which = Tmp_1 }
		
			multiply_key = { lhs = Tmp_1 which = Tax_TmpScalar }
			change_key = { lhs = Prod_S$SlotID$SpendTax which = Tmp_1 }
			change_key = { lhs = TaxD_$TaxType$ which = Tmp_1 }
		}
	}
}

# Multiply rate by the tax base
Tax_CalcAmount = {
	if = {
		limit = {
			check_key = { lhs = Tmp_1 value = 100 }
		}
		set_key = { lhs = Tmp_1 value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Tmp_1 value = 0.001 } }
		}
		set_key = { lhs = Tmp_1 value = 0 }
	}
	multiply_key = { lhs = Tmp_1 which = $RateBaseVar$ }
	multiply_key = { lhs = Tmp_1 value = 0.01 }
	if = {
		limit = {
			NOT = { check_key = { lhs = Tmp_1 value = 0.001 } }
		}
		set_key = { lhs = Tmp_1 value = 0 }
	}
}
# Multiply rate by the tax base
Tax_CalcAmountPoll = {
	if = {
		limit = {
			check_key = { lhs = Tmp_1 value = 100 }
		}
		set_key = { lhs = Tmp_1 value = 100 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Tmp_1 value = 0.001 } }
		}
		set_key = { lhs = Tmp_1 value = 0 }
	}
	multiply_key = { lhs = Tmp_1 value = 0.01 }
	multiply_key = { lhs = Tmp_1 which = $RateBaseVar$ }
	if = {
		limit = {
			NOT = { check_key = { lhs = Tmp_1 value = 0.001 } }
		}
		set_key = { lhs = Tmp_1 value = 0 }
	}
}
Tax_GetTaxRate = {
	set_key = { lhs = Tax_TmpScalar which = Tax_Cost$TaxName$Rate }
	multiply_key = { lhs = Tax_TmpScalar value = 0.01 }
}
# Adds to a classes used wealth
Tax_AvailableWealthAdjust = {
	if = {
		limit = {
			check_key = { lhs = Tmp_1 value = 0.001 }
			check_key = { lhs = $Class$_Wealth value = 1.001 }
		}
		# Factor out already taxed wealth
		set_key = { lhs = Tmp_9 which = $Class$_Wealth }
		subtract_key = { lhs = Tmp_9 value = 5 } # base amount of wealth
		subtract_key = { lhs = Tmp_9 which = $Class$_SpendTax }
		if = {
			limit = {
				check_key = { lhs = Tmp_9 value = 0.001 }
			}
			# Dont take more than is present
			if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_9 which = Tmp_1 } }
				}
				set_key = { lhs = Tmp_1 which = Tmp_9 }
			}
			change_key = { lhs = Tmp_2 which = Tmp_1 }
		}
		else = {
			set_key = { lhs = Tmp_1 value = 0 }
		}
		set_key = { lhs = Tmp_9 value = 0 }
	}
	else = {
		set_key = { lhs = Tmp_1 value = 0 }
	}
}
# Moves tax into a given variable
Tax_MoveTax = {
	change_key = { lhs = $TaxDest$ which = Tmp_2 }
}

# Resets the tax var
Tax_ResetTax = {
	set_key = { lhs = Tmp_2 value = 0 }
}
Tax_ResetRates = {
	set_key = { lhs = Tax_TmpBase value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
}
Tax_GetRate = {
	owner = {
		set_key = { lhs = $Var$ which = Tax_$Tax$Rate }
		PREV = { set_key = { lhs = $Var$ which = PREV } }
		set_key = { lhs = $Var$ value = 0 }
	}
	multiply_key = { lhs = $Var$ value = 0.01 }
}

Prov_DoMaint = {
	set_key = { lhs = Prov_$inst$WealthChange which = Prov_$inst$Wealth }
	multiply_key = { lhs = Prov_$inst$WealthChange value = 0.05 }
	subtract_key = { lhs = Prov_$inst$Wealth which = Prov_$inst$WealthChange }

	set_key = { lhs = Prov_$inst$Dmnd41 which = Prov_$inst$WealthChange }
	divide_key = { lhs = Prov_$inst$Dmnd41 which = TN_ProvPrc41 }

	capital_scope = {
		set_key = { lhs = Prov_$inst$Dmnd41 which = PREV }
	}
}

Prov_DoStat = {
	set_key = { lhs = Prov_$inst$StatChange which = Prov_$inst$Dmnd41 }
	multiply_key = { lhs = Prov_$inst$StatChange value = 0.01 }

	if = {
		limit = {
			check_key = { lhs = Prov_$inst$StatChange value = 1 }
		}
		if = {
			limit = {
				check_key = { lhs = Prov_$inst$StatChange value = 3 }
			}
			if = {
				limit = {
					check_key = { lhs = Prov_$inst$StatChange value = 9 }
				}
				if = {
					limit = {
						check_key = { lhs = Prov_$inst$StatChange value = 27 }
					}
					if = {
						limit = {
							check_key = { lhs = Prov_$inst$StatChange value = 81 }
						}
						if = {
							limit = {
								check_key = { lhs = Prov_$inst$StatChange value = 243 }
							}
							set_key = { lhs = Prov_$inst$StatChange value = 6 }
						}
						else = {
							set_key = { lhs = Prov_$inst$StatChange value = 5 }
						}
					}
					else = {
						set_key = { lhs = Prov_$inst$StatChange value = 4 }
					}
				}
				else = {
					set_key = { lhs = Prov_$inst$StatChange value = 3 }
				}
			}
			else = {
				set_key = { lhs = Prov_$inst$StatChange value = 2 }
			}
		}
		else = {
			set_key = { lhs = Prov_$inst$StatChange value = 1 }
		}
	}
	else = {
		set_key = { lhs = Prov_$inst$StatChange value = 0 }
	}

	subtract_key = { lhs = Prov_$inst$StatChange which = Prov_$inst$ }
	multiply_key = { lhs = Prov_$inst$StatChange value = 0.1 }

	set_key = { lhs = Tmp_0 value = 0 }

	change_key = { lhs = Prov_$inst$Stat which = Prov_$inst$StatChange }

	change_key = { lhs = Prov_$inst$Adm which = Prov_$inst$Stat }
	change_key = { lhs = Prov_$inst$Dip which = Prov_$inst$Stat }
	change_key = { lhs = Prov_$inst$Mil which = Prov_$inst$Stat }
}

Prov_DoComp = {
	set_key = { lhs = Prov_$inst$ComptChange which = Prov_$inst$Adm }
	change_key = { lhs = Prov_$inst$ComptChange which = Prov_$inst$Dip }
	change_key = { lhs = Prov_$inst$ComptChange which = Prov_$inst$Mil }
	multiply_key = { lhs = Prov_$inst$ComptChange value = 0.1 }

	multiply_key = { lhs = Prov_$inst$Adm value = 0.9 }
	multiply_key = { lhs = Prov_$inst$Dip value = 0.9 }
	multiply_key = { lhs = Prov_$inst$Mil value = 0.9 }

	set_key = { lhs = Prov_$inst$Cost value = 1 }

	multiply_key = { lhs = Prov_$inst$ComptChange value = 100 }
	divide_key = { lhs = Prov_$inst$ComptChange which = Prov_$inst$Cost }
	
	subtract_key = { lhs = Prov_$inst$ComptChange which = Prov_$inst$Compt }
	multiply_key = { lhs = Prov_$inst$ComptChange value = 0.1 }

	change_key = { lhs = Prov_$inst$Compt which = Prov_$inst$ComptChange }

	if = {
		limit = {
			check_key = { lhs = Prov_$inst$Compt value = 100 }
		}
		set_key = { lhs = Prov_$inst$Compt value = 100 }
	}
	else_if = {
		limit = {
			NOT = {
				check_key = { lhs = Prov_$inst$Compt value = 0 }
			}
		}
		set_key = { lhs = Prov_$inst$Compt value = 0 }
	}
}

Prov_DoCost = {
	if = {
		limit = {
			has_country_flag = Prov_$inst$Governance
		}

	}
}
Prov_GetReformDiff = {
	owner = {
		set_key = { lhs = Tmp_0 which = Rights_$Reform$ }
	}
	set_key = { lhs = Tmp_0 which = owner }
	subtract_key = { lhs = Tmp_0 which = Rights_$Reform$ }
	multiply_key = { lhs = Tmp_0 value = $Amount$ }
	change_key = { lhs = Prov_$Elite$Loy which = Tmp_0 }
}
Prov_GetReformDiffBU = {
	owner = {
		set_key = { lhs = Tmp_0 which = Rights_$Reform$ }
	}
	set_key = { lhs = Tmp_0 which = owner }
	subtract_key = { lhs = Tmp_0 which = Rights_$Reform$ }
	multiply_key = { lhs = Tmp_0 value = $Amount$ }
	multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
	multiply_key = { lhs = Tmp_0 value = 0.01 }
	change_key = { lhs = Prov_BULoy which = Tmp_0 }
}
Prov_OwnerChange_NO = {
	set_key = { lhs = Prov_NOLoy value = 50 }
	Prov_GetReformDiff = { Elite=NO Reform=NOGov Amount=-8 }
	Prov_GetReformDiff = { Elite=NO Reform=NOObl Amount=-4 }
	Prov_GetReformDiff = { Elite=NO Reform=NOTen Amount=-8 }
	Prov_GetReformDiff = { Elite=NO Reform=NOSer Amount=-4 }
	if = {
		limit = {
			check_key = { lhs = Prov_NOLoy value = 80 }
		}
		set_key = { lhs = Prov_NOLoy value = 80 }
	}
	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_NOLoy value = 20 } }
		}
		set_key = { lhs = Prov_NOLoy value = 20 }
	}
}
Prov_OwnerChange_BG = {
	set_key = { lhs = Prov_BGLoy value = 50 }
	Prov_GetReformDiff = { Elite=BG Reform=BGGov Amount=8 }
	Prov_GetReformDiff = { Elite=BG Reform=BGCom Amount=8 }
	if = {
		limit = {
			check_key = { lhs = Prov_BGLoy value = 80 }
		}
		set_key = { lhs = Prov_BGLoy value = 80 }
	}
	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_BGLoy value = 20 } }
		}
		set_key = { lhs = Prov_BGLoy value = 20 }
	}
}
Prov_OwnerChange_CL = {
	set_key = { lhs = Prov_CLLoy value = 50 }
	Prov_GetReformDiff = { Elite=CL Reform=CLHie Amount=-8 }
	Prov_GetReformDiff = { Elite=CL Reform=CLObl Amount=-8 }
	Prov_GetReformDiff = { Elite=CL Reform=CLTax Amount=-4 }
	if = {
		limit = {
			check_key = { lhs = Prov_CLLoy value = 80 }
		}
		set_key = { lhs = Prov_CLLoy value = 80 }
	}
	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_CLLoy value = 20 } }
		}
		set_key = { lhs = Prov_CLLoy value = 20 }
	}
	if = {
		limit = {
			has_owner_religion = no
		}
		subtract_key = { lhs = Prov_CLLoy value = 5 }
	}
	if = {
		limit = {
			NOT = { religion_group = owner }
		}
		subtract_key = { lhs = Prov_CLLoy value = 5 }
	}
}
Prov_OwnerChange_TR = {
	if = {
		limit = {
			owner = {
				is_tribal = no
				is_nomad = no
			}
		}
		set_key = { lhs = Prov_TRLoy value = 40 }
	}
	else = {
		set_key = { lhs = Prov_TRLoy value = 50 }
	}
}
Prov_OwnerChange_BU = {
	Prov_GetReformDiffBU = { Reform=BUTax Amount=-8 }
	Prov_GetReformDiffBU = { Reform=BUDir Amount=-4 }
	Prov_GetReformDiffBU = { Reform=BUInd Amount=-4 }
	if = {
		limit = {
			check_key = { lhs = Prov_BULoy value = 100 }
		}
		set_key = { lhs = Prov_BULoy value = 100 }
	}
	if = {
		limit = {
			NOT = { check_key = { lhs = Prov_BULoy value = 20 } }
		}
		set_key = { lhs = Prov_BULoy value = 20 }
	}
}

Prov_OwnerChange_effect = {
	set_key = { lhs = YearsOfRule value = 0 }
	set_key = { lhs = YearTimer5 value = 0 }
	set_key = { lhs = YearTimer10 value = 0 }
	set_key = { lhs = YearTimer25 value = 0 }
	clr_province_flag = PlayerTaxCost
	set_key = { lhs = Construct_Cost value = 0 }
	set_key = { lhs = Construct_ContribNO value = 0 }
	set_key = { lhs = Construct_ContribBG value = 0 }
	set_key = { lhs = Construct_ContribCL value = 0 }
	set_key = { lhs = Construct_ContribLV value = 0 }
	set_key = { lhs = Construct_ContribMP value = 0 }
	owner = {
		set_country_flag = tf_recalculate_communication_efficiency
	}
	FROM  = {
		set_country_flag = tf_recalculate_communication_efficiency
	}
	
	remove_province_modifier = Timber_Disp
    #remove_province_modifier = Prod_Price_disp
    remove_province_modifier = Infra_disp
    
    remove_province_modifier = Disp_Pop
    remove_province_modifier = Disp_Prod
    remove_province_modifier = Disp_Prod2
    remove_province_modifier = Disp_Trade
    remove_province_modifier = Disp_Trade_Cent
	remove_province_modifier = Disp_Trade_Amount
	remove_province_modifier = DG_RelGrp
    remove_province_modifier = Tax_Mod
	remove_province_modifier = Disp_Mil
    remove_province_modifier = POP_Unrest
    remove_province_modifier = Prov_Info_mod
    remove_province_modifier = POP_NaturalFeature 
	
	add_permanent_province_modifier = { 
        name = Timber_Disp
        duration = -1  
    }
    
    add_permanent_province_modifier = {
		name = Tax_Mod
		duration = -1
	}
	
    add_permanent_province_modifier = {
		name = Disp_Mil
		duration = -1
	}
    
    add_permanent_province_modifier = {
        name = Prov_Info_mod
        duration = -1
    }
    
    add_permanent_province_modifier = {
        name = POP_Unrest
        duration = -1
    }
    
    add_permanent_province_modifier = { 
		name = DG_RelGrp
		duration = -1  
		desc = DG_RelGrp_tooltip
	}
    
    add_permanent_province_modifier = { 
        name = Disp_Pop
        duration = -1  
    }
    
    add_permanent_province_modifier = { 
        name = Infra_disp
        duration = -1  
    }
    
    add_permanent_province_modifier = { 
        name = Disp_Prod
        duration = -1  
    }
    add_permanent_province_modifier = { 
        name = Disp_Prod2
        duration = -1  
    }
    
    add_permanent_province_modifier = { 
        name = Disp_Trade
        duration = -1  
    }
    
    #add_permanent_province_modifier = {
	#	name = Disp_Prp
	#	duration = -1
	#}

	if = {
		limit = {
			owner = { has_country_flag = POP_Init }
		}
		set_key = { lhs = Stat_MP value = 0 }
		set_key = { lhs = Tax_MP value = 0 }
	}

	set_province_flag = Unrest_Update

	if = {
		limit = {
			has_province_flag = UI_Select
		}
	
		province_event = { id = SYS_Pin.001 }
	}
	if = {
		limit = {
			is_city = no
		}
		set_province_flag = Infra_Update
	}
	Prov_OwnerChange_NO = yes
	Prov_OwnerChange_BG = yes
	Prov_OwnerChange_CL = yes
	Prov_OwnerChange_TR = yes
	Prov_OwnerChange_BU = yes
	if = {
		limit = {
			has_owner_culture = no
		}

		# Brutus: I have refactored the manual decreasing of powerbroker loyalty
		# With the more robust public function Public_ChangePowerbrokerLoyalty
		# subtract_key = { lhs = Prov_NOLoy value = 5 }
		# subtract_key = { lhs = Prov_BGLoy value = 5 }
		# subtract_key = { lhs = Prov_CLLoy value = 5 }
		# change_key = { lhs = Prov_BULoy value = 5 }

		Public_ChangePowerbrokerLoyalty = { Powerbroker=NO type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=BG type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=CL type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=BU type=value inp=5 }
	}
	if = {
		limit = {
			NOT = { culture_group = owner }
		}
		
		# subtract_key = { lhs = Prov_NOLoy value = 5 }
		# subtract_key = { lhs = Prov_BGLoy value = 5 }
		# subtract_key = { lhs = Prov_CLLoy value = 5 }
		# change_key = { lhs = Prov_BULoy value = 5 }

		Public_ChangePowerbrokerLoyalty = { Powerbroker=NO type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=BG type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=CL type=value inp=-5 }
		Public_ChangePowerbrokerLoyalty = { Powerbroker=BU type=value inp=5 }
	}
}