DiploAnnex_Dev = {
	if = {
		limit = {
			development = 31
			owner = {
				is_subject = yes
				OR = {
					is_subject_of_type = vassal
					is_subject_of_type = personal_union
					is_subject_of_type = personal_union_limited
					is_subject_of_type = client_vassal
					is_subject_of_type = warlord
					is_subject_of_type = custom_vassal
					is_subject_of_type = decentralized_vassal
				}
			}
			is_core = owner
		}
		DiploAnnex_Add = yes
	}
	else_if = {
		limit = {
			has_province_modifier = DiploAnnexMod_disp
		}
		DiploAnnex_Remove = yes
	}
}
DiploAnnex_Remove = {
	set_key = { lhs = DiploAnnexMod value = 0 }
	remove_province_modifier = DiploAnnexMod_disp
	POP_ClrMod = { modname=DiploAnnexMod value=0.64 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.32 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.16 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.08 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.04 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.02 type=province }
	POP_ClrMod = { modname=DiploAnnexMod value=0.01 type=province }
}
DiploAnnex_Add = {
	if = {
		limit = {
			NOT = { has_province_modifier = DiploAnnexMod_disp }
		}
		add_province_modifier = { name = DiploAnnexMod_disp duration = -1 }
	}
	export_to_key = { lhs = Public_Tmp9 value = development }
	set_key = { lhs = Public_Tmp8 value = 30 }
	divide_key = { lhs = Public_Tmp8 which = Public_Tmp9 }
	set_key = { lhs = Public_Tmp9 value = 1 }
	subtract_key = { lhs = Public_Tmp9 which = Public_Tmp8 }
	export_to_key = { lhs = Public_Tmp8 value = modifier:local_core_creation }
	multiply_key = { lhs = Public_Tmp8 value = 100 }
	change_key = { lhs = Public_Tmp8 which = DiploAnnexMod }
	multiply_key = { lhs = Public_Tmp8 value = 0.01 }
	multiply_key = { lhs = Public_Tmp8 which = Public_Tmp9 }
	change_key = { lhs = Public_Tmp9 which = Public_Tmp8 }
	multiply_key = { lhs = Public_Tmp9 value = 100 }
	if = {
		limit = {
			NOT = { is_key_equal = { lhs = Public_Tmp9 which = DiploAnnexMod } }
		}
		set_key = { lhs = DiploAnnexMod which = Public_Tmp9 }
		multiply_key = { lhs = Public_Tmp9 value = 0.01 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.64 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.32 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.16 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.08 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.04 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.02 }
		POP_SetMod = { varname = Public_Tmp9 modname = DiploAnnexMod type = province value = 0.01 }
	}
	set_key = { lhs = Public_Tmp9 value = 0 }
	set_key = { lhs = Public_Tmp8 value = 0 }
}

appanage_reversion_effect = { #handles the special vassal types which "revert to the crown on extinction of the male line"
	if = {
		limit = { 
			is_subject_of_type = appanage_subject
			male_line_extinct_trigger = yes
			NOT = { has_country_modifier = bur_succession_cooldown }
			NOT = { has_country_flag = burgundian_succession_crisis }
		}
		overlord = { 
			country_event = {
				id = mec_vassals.1
			}
		}
	}
}

temporary_union_break_effect = { #grants independence to those tags under a temporary_union dependency
	if = {
		limit = { 
			OR = {
				is_subject_of_type = temporary_union
				is_subject_of_type = temporary_union_limited
			}
		}
		overlord = {
			if = {
				limit = {
					OR = {
						is_subject_of_type = daimyo_vassal
						is_subject_of_type = appanage_subject
					}
				}
				ROOT = {
					set_dynasty = PREV
					set_ruler_culture = PREV
					set_ruler_religion = PREV
				}
				overlord = {
					hidden_effect = { ROOT = { set_key = { lhs = Vassal_Type value = 10 } } }
					create_subject = {
						subject_type = daimyo_vassal
						subject = ROOT
					}
				}
			}
			else = {
				ROOT = {
					grant_independence = yes
					if = {
						limit = {
							nominal_monarchy_trigger = yes
						}
						set_dynasty = PREV
						set_ruler_culture = PREV
						set_ruler_religion = PREV
					}
					dependency_lost_color_effect = yes
				}
			}
		}
	}
}

dependency_lost_color_effect = {
	if = {
		limit = {
			has_country_flag = has_overriden_color_flag
			NOT = { subject_with_overlord_color_trigger = yes }
		}
		restore_country_color = yes	
		#log = "country had color restored:dependency_lost_color_effect"
		clr_country_flag = has_overriden_color_flag
	}
	every_subject_country = {
		if = {
			limit = {
				has_country_flag = has_overriden_color_flag
			}
			restore_country_color = yes
			#log = "their subject had color restored:dependency_lost_color_effect"
			clr_country_flag = has_overriden_color_flag
		}
		if = {
			limit = {
				subject_with_overlord_color_trigger = yes
			}
			change_country_color = { country = overlord }
			#log = "their subject had color changed to match their overlord:dependency_lost_color_effect"
			set_country_flag = has_overriden_color_flag
		}
	}
}

grant_independence_effect = {
	grant_independence = yes
	dependency_lost_color_effect = yes
}

vassal_type_tracking_effect = {
	if = {
		limit = {
			OR = {
				is_subject_of_type = overseas_fief
				is_subject_of_type = personal_union
				is_subject_of_type = personal_union_limited
				is_subject_of_type = temporary_union
				is_subject_of_type = temporary_union_limited
				is_subject_of_type = permanent_union
				is_subject_of_type = permanent_union_limited
			}
		}
		set_key = { lhs = Had_PU value = 1 }
	}
	if = {
		limit = {
			is_subject = yes 
		}
		trigger_switch = {
			on_trigger = is_subject_of_type

			vassal = { 
				set_key = { lhs = Vassal_Type value = 1 }
			}
			
			custom_vassal = { 
				set_key = { lhs = Vassal_Type value = 1 }
			}
			
			march = { 
				set_key = { lhs = Vassal_Type value = 2 }
			}
			
			client_vassal = { 
				set_key = { lhs = Vassal_Type value = 3 }
			}
			
			client_march = { 
				set_key = { lhs = Vassal_Type value = 4 }
			}
			
			colony = { 
				set_key = { lhs = Vassal_Type value = 5 }
			}
			
			protectorate = { 
				set_key = { lhs = Vassal_Type value = 6 }
			}
			
			tributary_state = { 
				set_key = { lhs = Vassal_Type value = 7 }
			}
			
			close_tributary_state = { 
				set_key = { lhs = Vassal_Type value = 8 }
			}
			
			appanage_subject = { 
				set_key = { lhs = Vassal_Type value = 9 }
			}
			
			daimyo_vassal = { 
				set_key = { lhs = Vassal_Type value = 10 }			
			}
			
			decentralized_vassal = { 
				set_key = { lhs = Vassal_Type value = 11 }
			}
			
			rebellious_decentralized_vassal = { 
				set_key = { lhs = Vassal_Type value = 12 }
			}
			
			personal_union = { 
				set_key = { lhs = Vassal_Type value = 15 }
			}
			
			warlord = { 
				set_key = { lhs = Vassal_Type value = 14 }
			}
			
			overseas_fief = { 
				set_key = { lhs = Vassal_Type value = 15 }
			}
			
			temporary_union = { 
				set_key = { lhs = Vassal_Type value = 16 }
			}
			
			permanent_union = { 
				set_key = { lhs = Vassal_Type value = 17 }
			}
			
			muscovite_tributary_state = { 
				set_key = { lhs = Vassal_Type value = 18 }
			}

			commission = { 
				set_key = { lhs = Vassal_Type value = 19 }
			}
			
			personal_union_limited = { 
				set_key = { lhs = Vassal_Type value = 20 }
			}

			temporary_union_limited = { 
				set_key = { lhs = Vassal_Type value = 21 }
			}
			
			permanent_union_limited = { 
				set_key = { lhs = Vassal_Type value = 22 }
			}
		}
	}
	else = {
		set_key = { lhs = Vassal_Type value = 0 }
	}
}

prev_vassals_dev_prop_effect = {
	set_key = { lhs = This_AllSubjects_DevProp value = 0 }
	export_to_key = { lhs = Vassal_Tmp0 value = total_development }
	every_subject_country = {
		limit = {
			OR = {
				is_subject_of_type = rebellious_decentralized_vassal
				is_subject_of_type = decentralized_vassal
			}
		}
		export_to_key = { lhs = This_AllSubjects_DevProp value = total_development }
		PREV = {
			change_key = { lhs = This_AllSubjects_DevProp which = PREV }
		}
		set_key = { lhs = This_AllSubjects_DevProp value = 0 }
	}
	every_subject_country = {
		limit = {	
			NOT = {
				liberty_desire = 50
				OR = {
					is_subject_of_type = rebellious_decentralized_vassal
					is_subject_of_type = decentralized_vassal
					is_subject_of_type = tributary_state
					is_subject_of_type = close_tributary_state	
					is_subject_of_type = muscovite_tributary_state
				}
			}
		}
		export_to_key = { lhs = Vassal_Tmp0 value = total_development }
		PREV = {
			change_key = { lhs = Vassal_Tmp0 which = PREV }
		}
		set_key = { lhs = Vassal_Tmp0 value = 0 }
	}
	divide_key = { lhs = This_AllSubjects_DevProp which = Vassal_Tmp0 }
	set_key = { lhs = Vassal_Tmp0 value = 0 }
}


decentral_collapse_check = {
	if = {
		limit = {
			has_disaster = decentral_collapse_disaster
		}
		country_flaws_count = yes
		set_key = { lhs = Vassal_Tmp0 which = Country_Flaws }
		if = {
			limit = {
				NOT = { 
					faction_influence = {
						faction = FC_BU
						influence = 40
					}
				}
			}
			change_key = { lhs = Vassal_Tmp0 value = 1 }
		}
		if = {
			limit = {
				NOT = { absolutism = 30 }
			}
			change_key = { lhs = Vassal_Tmp0 value = 1 }
		}
		if = {
			limit = { 
				check_key = { lhs = Vassal_Tmp0 value = 2 }
			}
			prev_vassals_dev_prop_effect = yes
			if = {
				limit = { 
					OR = {
						AND = {
							NOT = { has_country_flag = Had_Heir }
							check_key = { lhs = This_AllSubjects_DevProp value = 1 }
						}
						AND = {
							has_regency = yes
							has_consort_regency = no
							check_key = { lhs = This_AllSubjects_DevProp value = 2 }
						}
					}
				}
				country_event = {
					id = mec_vassals.2
				}
			}
		}
		set_key = { lhs = Vassal_Tmp0 value = 0 }
	}				
}	
	

subject_transition_effect = { #TODO: check FROM in section sending notification to overlord, as it displays overlord name
	set_country_flag = country_color_to_be_processed
	overlord = { set_country_flag = country_color_to_be_processed }
	if = {
		limit = {
			is_subject = yes
			is_at_war = no
		}
		save_global_event_target_as = subject_notify_name_et
		if = { #from Division to Rebellious Division
			limit = {
				is_subject_of_type = decentralized_vassal
				liberty_desire = 50
				NOT = {
					tag = PA2
					overlord = {
						tag = PAP
						num_of_cities = 1
					}
				}
			}
			if = { limit = { ai = no } country_event = { id = mec_vassals.11 } }
			overlord = {
				create_subject = {
					subject_type = rebellious_decentralized_vassal
					subject = ROOT
				}
				if = { limit = { ai = no } country_event = { id = mec_vassals.12 } }
			}
		}
		else_if = { #from Rebellious Division to Division
			limit = {
				OR = {
					AND = {
						is_subject_of_type = rebellious_decentralized_vassal
						NOT = { liberty_desire = 50 }
					}
					AND = {
						overlord = { 
							subject_centralisation_trigger = yes
						}
						OR = {
							is_subject_of_type = daimyo_vassal
							is_subject_of_type = appanage_subject
						}
					}
					AND = {
						tag = PA2
						overlord = {
							tag = PAP
							num_of_cities = 1
						}
						is_subject_of_type = rebellious_decentralized_vassal
					}
				}
			}
			if = { limit = { ai = no } country_event = { id = mec_vassals.13 } }
			overlord = {
				create_subject = {
					subject_type = decentralized_vassal
					subject = ROOT
				}
				if = { limit = { ai = no } country_event = { id = mec_vassals.14 } }
			}
		}
		else_if = { #from Tributary to Close Tributary
			limit = {
				is_subject_of_type = tributary_state
				
				overlord = {
					OR = {
						AND = {
							is_emperor_of_china = yes
							PREV = { culture_group = tibetic }
						}
						AND = {
							is_subject_of_type = muscovite_tributary_state
							NOT = { total_development = 10 }
						}
						AND = {
							is_neighbor_of = PREV

							has_opinion = {
								value = 100
								who = PREV
							}
							trust = {
								who = PREV
								value = 50
							}

							PREV = {
								has_opinion = {
									value = 125
									who = PREV
								}
								trust = {
									who = PREV
									value = 50
								}
							}
						}
					}
					
					NOT = {
						is_subject_of_type = close_tributary_state
						is_subject_of_type = tributary_state
						is_nomad = yes
					}
				}
			}
			if = { limit = { ai = no } country_event = { id = mec_vassals.15 } }
			overlord = {
				create_subject = {
					subject_type = close_tributary_state
					subject = ROOT
				}
				if = { limit = { ai = no } country_event = { id = mec_vassals.16 } }
			}
		}
		else_if = { #from Close Tributary to Tributary or to Feudatory
			limit = {
				is_subject_of_type = close_tributary_state
			}
			export_to_key = { lhs = Vassal_Tmp0 value = total_development }
			export_to_key = { lhs = Vassal_Tmp1 value = total_development who = overlord }
			divide_key = { lhs = Vassal_Tmp1 which = Vassal_Tmp0 }
			
			if = { #from Close Tributary to Tributary
				limit = {
					overlord = {
						OR = {
							NOT = {
								has_opinion = {
									value = 100
									who = PREV
								}
							}
							NOT = {
								PREV = {
									has_opinion = {
										value = 100
										who = PREV
									}
								}
							}
						}
						OR = {
							is_emperor_of_china = no
							PREV = { NOT = { culture_group = tibetic } }
						}
						NOT = { is_subject_of_type = muscovite_tributary_state }
					}
				}
				if = { limit = { ai = no } country_event = { id = mec_vassals.17 } }
				overlord = {
					create_subject = {
						subject_type = tributary_state
						subject = ROOT
					}
					if = { limit = { ai = no } country_event = { id = mec_vassals.18 } }
				}				
			}
			else_if = { #from Close Tributary to Feudatory or PU
				limit = {
					check_key = { lhs = Vassal_Tmp1 value = 3 } # Overlord 3x as much dev as close tributary
					overlord = {
						is_neighbor_of = PREV	
						PREV = {
							has_opinion = {
								value = 150
								who = PREV
							}
							trust = {
								who = PREV
								value = 50
							}
							NOT = { liberty_desire = 25 }
						}
						prestige = 25
						is_nomad = no
						NOT = { religion_group = buddhism } #Changed to DG 'Eastern' equivalent
					}			
				}
				if = {
					limit = {
						overlord = {
							dynasty = PREV
						}
						OR = {
							AND = {
								has_regency = no
								has_consort_regency = no
							}
							heir_has_ruler_dynasty = yes
						}
					}
					overlord = {
						country_event = { id = mec_vassals.25 } #event allowing for decision on what to do
					}
				}
				else = {
					overlord = {
						create_subject = {
							subject_type = daimyo_vassal
							subject = ROOT
						}
					}
				}				
			}
		}
		else_if = { #from Overseas Fief to Personal Union
			limit = {
				is_subject_of_type = overseas_fief
				overlord = {
					OR = {
						subject_centralisation_trigger = yes
						any_owned_province = {
							any_neighbor_province = {
								owner = {
									tag = ROOT
								}
							}
						}
					}
					OR = {
						NOT = { tag = ENG }
						has_global_flag = hundred_years_war_ENG_win
						has_global_flag = hundred_years_war_FRA_win
						is_year = 1500
					}
				}
			}
			if = { limit = { ai = no tag = GUY } country_event = { id = mec_vassals.21 } }
			else_if = { limit = { ai = no } country_event = { id = mec_vassals.23 }}
			set_key = { lhs = Had_PU value = 0 }
			overlord = {
				create_subject = {
					subject_type = personal_union
					subject = ROOT
				}
				if = { limit = { ai = no OR = { tag = ENG tag = GBR tag = UEF } GUY = { is_subject_of = ROOT } } country_event = { id = mec_vassals.22 } }
				else_if = { limit = { ai = no } country_event = { id = mec_vassals.24 } }
			}
			set_key = { lhs = Integration_Progress value = 50 }
		}
	}
	vassal_type_tracking_effect = yes
	hidden_effect = {
		every_country = {
			limit = {
				has_country_flag = country_color_to_be_processed
			}
			dependency_lost_color_effect = yes
			clr_country_flag = country_color_to_be_processed
		}
	}
}


# Execute in subject scope
# Inputs: $type$ -> vassal, personal_union
calc_integration_progress = {
	#safety_cleanup
	hidden_effect = {
		set_key = { lhs = Public_Tmp1  value = 0 }
		set_key = { lhs = Public_Tmp2  value = 0 }
		set_key = { lhs = Public_Tmp3  value = 0 }
		set_key = { lhs = Public_Tmp4  value = 0 }
		set_key = { lhs = Public_Tmp5  value = 0 }
		set_key = { lhs = Public_Tmp6  value = 0 }
		set_key = { lhs = Public_Tmp7  value = 0 }
		set_key = { lhs = Public_Tmp8  value = 0 }
		set_key = { lhs = Public_Tmp9  value = 0 }
		set_key = { lhs = Public_Tmp10 value = 0 }
		set_key = { lhs = Public_Tmp11 value = 0 }
		set_key = { lhs = Public_Tmp12 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_1 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_2 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_3 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_4 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_5 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_6 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_7 value = 0 }
		set_key = { lhs = Subj_Integr_Disp_8 value = 0 }
	}
	set_country_flag = Check_$type$
	
	#### Set base progress in DEV points ####
	
	## relative dev points
	set_key = { lhs = Public_Tmp0 which = Dev_Total }
	overlord = { set_key = { lhs = Public_Tmp1 which = Dev_Total } }
	set_key = { lhs = Public_Tmp1 which = PREV }
	overlord = { set_key = { lhs = Public_Tmp1 value = 0 } }
	
	divide_key = { lhs = Public_Tmp1 which = Public_Tmp0 } # Base out of relative Development
	

	## Cap base progress based on defines and modi
	set_key = { lhs = Public_Tmp2 value = 0.05 } # `DEFINE_YEARLY_MAX_BASE_INTEGRATION_RATE~value`
	change_key = { lhs = Public_Tmp2 which = Modi_Diplo_BaseIntegrationProgress }

	# Max Ratio of Subject Development that can be integrated per Year
	multiply_key = { lhs = Public_Tmp0 value = 0.05 } # `DEFINE_YEARLY_MAX_BASE_INTEGRATION_RATE~value`
	
	if = { limit = { check_key = { lhs = Public_Tmp1 which = Public_Tmp0 } }
		set_key = { lhs = Public_Tmp1 which = Public_Tmp0  }
	}
	
	set_key = { lhs = Subj_Integr_Disp_1 which = Public_Tmp1 }
	
		
	#### Modify base progress - Multiplicative modifiers 
	## Vassal Type Modifier
	trigger_switch = {
		on_trigger = has_country_flag
		Check_vassal 			= { multiply_key = { lhs = Public_Tmp1 value = 1 } clr_country_flag = Check_vassal } # 100% base integration time for vassals
		Check_personal_union 	= { multiply_key = { lhs = Public_Tmp1 value = 0.75 } clr_country_flag = Check_personal_union } # 75% base integration time for personal union
	}
	
	### Government modifier ##
	trigger_switch = { on_trigger = government
		monarchy = {
			overlord = {
				trigger_switch = { on_trigger = government
					monarchy = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 1 } } }	# Unmodified base progress from subjects government family 	
					republic = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 0.5 } } } # 1/2 base progress from subjects government family	
					theocracy = { PREV = { multiply_key = { lhs = Public_Tmp1 value = 0.25 } } }	# 1/4 base progress from subjects government family
				}	
			}
		}
		republic = {  
			overlord = { 
				trigger_switch = { on_trigger = government
					monarchy = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 0.5 } } } # 1/2 base progress from subjects government family			
					republic = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 1 } } } # Unmodified base progress from subjects government family 
					theocracy = { PREV = { multiply_key = { lhs = Public_Tmp1 value = 0.25 } } }	# 1/4 base progress from subjects government family
				}	
			}
		
		}	
		theocracy = { 
			overlord = { 
				trigger_switch = { on_trigger = government
					monarchy = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 0.5 } } }	# 1/2 base progress from subjects government family 	
					republic = { PREV = {  multiply_key = { lhs = Public_Tmp1 value = 0.25 } } } 	# Unmodified base progress from subjects government family
					theocracy = { PREV = { multiply_key = { lhs = Public_Tmp1 value = 1 } } }	# 1/4 base progress from subjects government family
				}	
			}
		}	
	}
	
	### Number of Diplomats Modifier
	overlord = {
		export_to_key = {
			lhs = Public_Tmp0
			value = trigger_value:num_of_diplomats
		}
		subtract_key = { lhs = Public_Tmp0 value = 1 }
	}
	set_key = { lhs = Public_Tmp0 which = PREV }
	multiply_key = { lhs = Public_Tmp0 value = 0.075 } #7.5% modi per diplomat
	set_key = { lhs = Subj_Integr_Disp_6 which = Public_Tmp0 }
	multiply_key = { lhs = Subj_Integr_Disp_6 value = 100 }
	change_key = { lhs = Public_Tmp0 value = 1 }
	
	multiply_key = { lhs = Public_Tmp1 which = Public_Tmp0 }
	set_key = { lhs = Public_Tmp0 value = 0 }
		
	#### Calculate integration speed modifier ####
	set_key = { lhs = Public_Tmp2 value = 1 }
	
	### Additive modifiers ###
	
	## Integration Progress Modifier ##
	export_to_key = {
		lhs = Public_Tmp3
		value = modifier:diplomatic_annexation_cost
		who = ROOT
	}
	multiply_key = { lhs = Public_Tmp3 value = -1 }
	change_key = { lhs = Public_Tmp2 which = Public_Tmp3 }
	set_key = { lhs = Subj_Integr_Disp_2 which = Public_Tmp3 } # Integration Modifier
	multiply_key = { lhs = Subj_Integr_Disp_2 value = 100 }
	
	## Liberty Desire modifier ##
	export_to_key = {
		lhs = Public_Tmp4
		value = trigger_value:liberty_desire
	}
	if = { limit = { NOT = { check_key = { lhs = Public_Tmp4 value = 1 } } }
		set_key = { lhs = Public_Tmp4 value = 1 }
	}
	divide_key = { lhs = Public_Tmp4 	value = 35 } #100 LD -> -4 modifier 50LD -> -2 Modifier
	multiply_key = { lhs = Public_Tmp4 	value = -1 } #Negative Modifier
	multiply_key = { lhs = Public_Tmp4	value = 0.2 }
	change_key = { lhs = Public_Tmp2 which = Public_Tmp4 }
	set_key = { lhs = Subj_Integr_Disp_3 which = Public_Tmp4 } # Liberty Desire
	multiply_key = { lhs = Subj_Integr_Disp_3 value = 100 }

	## Opinion modifier ##
	overlord = {
		export_to_variable = {
			which = Subject_Opinion
			value = opinion
			who = PREV ## this is not supported with keys, so i used a variable
		}
	}
	set_variable = { which = Subject_Opinion which = PREV }
	set_key_from_var = { key = Public_Tmp8  var = Subject_Opinion }
	subtract_key = { lhs = Public_Tmp8 value = 50 } # Base Opinion of Overlord 50
	divide_key = {
		lhs = Public_Tmp8 
		value = 50
	}
	multiply_key = { lhs = Public_Tmp8	value = 0.2 }
	change_key = { lhs = Public_Tmp2 which = Public_Tmp8 }
	set_key = { lhs = Subj_Integr_Disp_4 which = Public_Tmp8 } # Opinion of Overlord
	multiply_key = { lhs = Subj_Integr_Disp_4 value = 100 }
	
	set_variable = { which = Subject_Opinion value = 0 }

	## Religion Modifier ##
	if = {
		limit = { NOT = { religion = ROOT } religion_group = ROOT }
		change_key = { lhs = Public_Tmp2 value = -0.1 } # 5 % slower if not same religion, but same religious group
	}
	else_if = {
		limit = { NOT = { religion_group = ROOT } } # 20 % slower if not same religious group
		change_key = { lhs = Public_Tmp2 value = -0.25 }
	}
	

	## Culture Modifier ##
	if = {
		limit = { NOT = { primary_culture = ROOT } culture_group = ROOT }
		change_key = { lhs = Public_Tmp2 value = -0.05 }	# 5 % slower if different culture, same culture group
	}
	else_if = {
		limit = { NOT = { culture_group = ROOT } }
		change_key = { lhs = Public_Tmp2 value = -0.15 } # 15 % slower if different culture group
	}
	
	## Policies modifier ##
	if = { limit = { ROOT = { has_active_policy = one_currency_act } } change_key = { lhs = Public_Tmp2 value = 0.1 } }	# 10% bonus from policy (unlock adm tech 10)
	if = { limit = { ROOT = { has_active_policy = vassal_integration_act } } change_key = { lhs = Public_Tmp2 value = 0.1 } }	# 10% bonus from policy (unlock adm tech 20)
	if = { limit = { ROOT = { has_active_policy = full_sovereignty_act } } change_key = { lhs = Public_Tmp2 value = 0.1 } }	# 10% bonus from policy (unlock adm tech 30)



	##### Calculate Integration
	### Calculate Progress with multiplicative modifier
	multiply_key = { lhs = Public_Tmp1 which = Public_Tmp2 }
	set_key = { lhs = Subj_Integr_Disp_5 which = Public_Tmp2 }
	multiply_key = { lhs = Subj_Integr_Disp_5 value = 100 }
	
	### Change integration Progress Variable by yearly progress (in DEV values)
	change_key = { lhs = Integration_Progress which = Public_Tmp1 }
	
	### Set Integration_Progress to 0 if below 0
	if = { limit = { NOT = { check_key = { lhs = Integration_Progress value = 0 } } }
		set_key = { lhs = Integration_Progress value = 0 }
	}
		
	### Calculate Remaining Years
	if = { limit = { NOT = { is_key_equal = { lhs = Integration_Progress value = 0 } } }	
		set_key = { lhs = Remaining_Years 		which = Dev_Total }
		subtract_key = { lhs = Remaining_Years 	which = Integration_Progress }
		divide_key = { lhs = Remaining_Years 	which = Public_Tmp1 }
	}
}

check_integration_progress = {
	if = { limit = { check_key = { lhs = Integration_Progress which = Dev_Total } }
		set_country_flag = MEC_SUBJ_INTEGRATED
		set_key = { lhs = Integration_Progress value = 100 }
	}
	else = {
		clr_country_flag = MEC_SUBJ_INTEGRATED
	}
}

diplomatic_annexation_subject_transfer_effect = {
	if = { limit = { is_subject_of_type = personal_union }
		every_subject_country = {
			trigger_switch = {
				on_trigger = is_subject_of_type
				personal_union = { grant_independence = yes 					ROOT = { create_subject = { subject_type = personal_union 			subject = PREV  } } }
				personal_union_limited = { grant_independence = yes 			ROOT = { create_subject = { subject_type = personal_union_limited 	subject = PREV  } } }
				overseas_fief = { grant_independence = yes 						ROOT = { create_subject = { subject_type = overseas_fief 			subject = PREV  } } }
				permanent_union = { grant_independence = yes 					ROOT = { create_subject = { subject_type = permanent_union 			subject = PREV  } } }
				permanent_union_limited = { grant_independence = yes 			ROOT = { create_subject = { subject_type = permanent_union_limited	subject = PREV  } } }
				custom_vassal = { grant_independence = yes 						ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
				client_vassal = { grant_independence = yes 						ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }	
				march = { grant_independence = yes 								ROOT = { create_subject = { subject_type = march 					subject = PREV  } } }
				client_march = { grant_independence = yes						ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
				daimyo_vassal = { grant_independence = yes 						ROOT = { create_subject = { subject_type = daimyo_vassal 			subject = PREV  } } }
				decentralized_vassal = { grant_independence = yes 				ROOT = { create_subject = { subject_type = decentralized_vassal 	subject = PREV  } } }
				rebellious_decentralized_vassal = { grant_independence = yes 	ROOT = { add_casus_belli = { target = PREV type = cb_annex months = 72 } } }
				appanage_subject = { grant_independence = yes 					ROOT = { create_subject = { subject_type = appanage_subject 		subject = PREV  } } }
				#colony = { grant_independence = yes 							ROOT = { create_subject = { subject_type = colony			 		subject = PREV  } } } ## should be covered by vanilla
				#protectorate = { grant_independence = yes 						ROOT = { create_subject = { subject_type = protectorate		 		subject = PREV  } } } ## should be covered by vanilla
				tributary_state = { grant_independence = yes					ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
				close_tributary_state = { grant_independence = yes				ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
				muscovite_tributary_state = { grant_independence = yes			ROOT = { create_subject = { subject_type = muscovite_tributary_state 			subject = PREV  } } } ## tributaries are kept
			}
		}
	}
	else = {
		every_subject_country = {
			trigger_switch = {
				on_trigger = is_subject_of_type
				personal_union = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = personal_union 			subject = PREV  } } } }
				personal_union_limited = { grant_independence = yes 			ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = personal_union_limited		subject = PREV  } } } }
				overseas_fief = { grant_independence = yes 						ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = overseas_fief 				subject = PREV  } } } }
				permanent_union = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = permanent_union 			subject = PREV  } } } }
				permanent_union_limited = { grant_independence = yes 			ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = permanent_union_limited	subject = PREV  } } } }
				vassal = { grant_independence = yes 							ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
				custom_vassal = { grant_independence = yes 						ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
				client_vassal = { grant_independence = yes 						}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }	
				march = { grant_independence = yes 								}#ROOT = { create_subject = { subject_type = march 					subject = PREV  } } }
				client_march = { grant_independence = yes						}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
				daimyo_vassal = { grant_independence = yes 						ROOT = { create_subject = { subject_type = daimyo_vassal 			subject = PREV  } } }
				decentralized_vassal = { grant_independence = yes 				ROOT = { create_subject = { subject_type = decentralized_vassal 	subject = PREV  } } }
				rebellious_decentralized_vassal = { grant_independence = yes 	ROOT = { add_casus_belli = { target = PREV type = cb_annex months = 72 } } }
				appanage_subject = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = appanage_subject 		subject = PREV  } } } }
				#colony = { grant_independence = yes 							ROOT = { create_subject = { subject_type = colony			 		subject = PREV  } } } ## should be covered by vanilla
				#protectorate = { grant_independence = yes 						ROOT = { create_subject = { subject_type = protectorate		 		subject = PREV  } } } ## should be covered by vanilla
				tributary_state = { grant_independence = yes					ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
				close_tributary_state = { grant_independence = yes				ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
				muscovite_tributary_state = { grant_independence = yes			ROOT = { create_subject = { subject_type = muscovite_tributary_state 			subject = PREV  } } } ## tributaries are kept
			}
		}	
	}
}

war_annexation_subject_transfer_effect = {
	every_subject_country = {
		trigger_switch = {
			on_trigger = is_subject_of_type
			personal_union = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = personal_union 			subject = PREV  } } } }
			personal_union_limited = { grant_independence = yes 			ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = personal_union_limited 	subject = PREV  } } } }
			overseas_fief = { grant_independence = yes 						ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = overseas_fief 				subject = PREV  } } } }
			permanent_union = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = permanent_union 			subject = PREV  } } } }
			permanent_union_limited = { grant_independence = yes 			ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = permanent_union_limited 	subject = PREV  } } } }
			appanage_subject = { grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = appanage_subject 			subject = PREV  } } } }
			#temporary_union = {  grant_independence = yes 					ROOT = { if = { limit = { dynasty = FROM } create_subject = { subject_type = appanage_subject 			subject = PREV  } } } } ## will automatically break
			vassal = { grant_independence = yes 							}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
			custom_vassal = { grant_independence = yes 						}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
			client_vassal = { grant_independence = yes 						}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }	
			march = { grant_independence = yes 								}#ROOT = { create_subject = { subject_type = march 					subject = PREV  } } }
			client_march = { grant_independence = yes						}#ROOT = { create_subject = { subject_type = custom_vassal 			subject = PREV  } } }
			daimyo_vassal = { grant_independence = yes 						ROOT = { if = { limit = { culture_group = japanese_g } create_subject = { subject_type = daimyo_vassal 	subject = PREV  } } } }
			decentralized_vassal = { grant_independence = yes 				}#ROOT = { create_subject = { subject_type = decentralized_vassal 	subject = PREV  } } }
			rebellious_decentralized_vassal = { grant_independence = yes 	}#ROOT = { add_casus_belli = { target = PREV type = cb_annex months = 72 } } }
			#colony = { grant_independence = yes 							ROOT = { create_subject = { subject_type = colony			 		subject = PREV  } } } ## should be covered by vanilla
			#protectorate = { grant_independence = yes 						ROOT = { create_subject = { subject_type = protectorate		 		subject = PREV  } } } ## should be covered by vanilla
			tributary_state = { grant_independence = yes					ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
			close_tributary_state = { grant_independence = yes				ROOT = { create_subject = { subject_type = tributary_state 			subject = PREV  } } } ## tributaries are kept
			muscovite_tributary_state = { grant_independence = yes			ROOT = { create_subject = { subject_type = muscovite_tributary_state 			subject = PREV  } } } ## tributaries are kept
		}
	
	}
}


	
