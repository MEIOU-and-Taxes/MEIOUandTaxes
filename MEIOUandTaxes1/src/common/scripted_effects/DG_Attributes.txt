
DG_Extract_ToleranceAll = {
	DG_Extract_Tolerance = { slot = 0 }
	DG_Extract_Tolerance = { slot = 1 }
	DG_Extract_Tolerance = { slot = 2 }
	DG_Extract_Tolerance = { slot = 3 }
	DG_Extract_Tolerance = { slot = 4 }
	DG_Extract_Tolerance = { slot = 5 }
}
#Extracts MN_S$slot$Tolerance
#Requires owner religion extracted as DG_Tmp1
#Requires being in a scripted_effect with slot = $slot$
DG_Extract_Tolerance = {
	set_key = { lhs = MN_S$slot$Tolerance value = 0 }
	if = {
		limit = { owner = { religion_group = christian } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ value = 32 } }
			set_key = { lhs = MN_S$slot$Tolerance value = 0 }
		}
		else_if = {
			limit = { NOT = { check_key = { lhs = MN_S$slot$ value = 13 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = {
			owner = { religion_group = dualist_group }
		}
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ value = 32 } }
			set_key = { lhs = MN_S$slot$Tolerance value = 0 }
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 13 } NOT = { check_key = { lhs = MN_S$slot$ value = 15 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = muslim } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {		#don't convert jews and zoroastrians
			limit = { 
				check_key = { lhs = MN_S$slot$ value = 30 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 34 } }
			}
			set_key = { lhs = MN_S$slot$Tolerance value = 0 }
			#export_to_key = {
			#	 lhs = MN_S$slot$Tolerance
			#	 value = modifier:tolerance_heathen
			#	 who = owner
			#}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 15 } NOT = { check_key = { lhs = MN_S$slot$ value = 21 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = buddhism } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 21 } NOT = { check_key = { lhs = MN_S$slot$ value = 26 } } }
			set_key = { lhs = MN_S$slot$Tolerance value = 0 }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = dharmic } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 26 } NOT = { check_key = { lhs = MN_S$slot$ value = 30 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = zro_group } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 30 } NOT = { check_key = { lhs = MN_S$slot$ value = 32 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = jewish_group } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 32 } NOT = { check_key = { lhs = MN_S$slot$ value = 34 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = mesoamerican_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 34 } NOT = { check_key = { lhs = MN_S$slot$ value = 38 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = andean_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 38 } NOT = { check_key = { lhs = MN_S$slot$ value = 40 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = totemism } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 40 } NOT = { check_key = { lhs = MN_S$slot$ value = 45 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = pantheism } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 45 } NOT = { check_key = { lhs = MN_S$slot$ value = 50 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = european_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 50 } NOT = { check_key = { lhs = MN_S$slot$ value = 55 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = african_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 55 } NOT = { check_key = { lhs = MN_S$slot$ value = 72 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = south_asia_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 72 } NOT = { check_key = { lhs = MN_S$slot$ value = 79 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = east_asia_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 79 } NOT = { check_key = { lhs = MN_S$slot$ value = 88 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = north_asia_pagan } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ value = 88 } NOT = { check_key = { lhs = MN_S$slot$ value = 90 } } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heretic
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
	else_if = {
		limit = { owner = { religion_group = inuuk_group } }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_own
				 who = owner
			}
		}
		else = {
			export_to_key = {
				 lhs = MN_S$slot$Tolerance
				 value = modifier:tolerance_heathen
				 who = owner
			}
		}
	}
}

#Calculates Entrenchment and Infrastructure
#Entrenchment is how much a religion resists conversion
#Infrastructure is the local clergy and buildings in that province
MN_GetInfrast_Helper = {
	if = {
		limit = { check_key = { lhs = MN_S$slot$ value = 1 } }
		#Starting infrastructure corresponds to 25% of the proportion of the religion in the province
		set_key = { lhs = MN_S$slot$INF which = MN_S$slot$TotP }
		divide_key = { lhs = MN_S$slot$INF value = 4 }
		#Owner's religion gets 5% bonus
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			change_key = { lhs = MN_S$slot$INF value = 5 }
		}
		else = {
			change_key = { lhs = MN_S$slot$INF value = 1 }
		}
		
		#Entrenchment starts at 50%
		set_key = { lhs = MN_S$slot$ENT value = 50 }
		#The fewer the number, the more zealot they are
#		set_key = { lhs = DG_Tmp1 value = 100 }
#		subtract_key = { lhs = DG_Tmp1 which = MN_S$slot$TotP }
#		multiply_key = { lhs = MN_S$slot$ENT which = DG_Tmp1 }
#		divide_key = { lhs = MN_S$slot$ENT value = 100 }
		#Effect of harsh terrains
		if = {
			limit = { forest_trigger = yes }
			multiply_key = { lhs = MN_S$slot$ENT value = 1.05 }
		}
		if = {
			limit = { jungle_trigger = yes }
			multiply_key = { lhs = MN_S$slot$ENT value = 1.10 }
		}
		if = {
			limit = { mountains_trigger = yes }
			multiply_key = { lhs = MN_S$slot$ENT value = 1.15 }
		}
		if = {
			limit = { highlands_trigger = yes }
			multiply_key = { lhs = MN_S$slot$ENT value = 1.05 }
		}
		#25% added depending based on subcontinent
		#Christians in Europe and Anatolia superregion
		if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 1 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 13 } }
				OR = {
					continent = europe
					superregion = anatolia_superregion
					region = harar_region
					region = abyssinia_region
				}
			}
			change_key = { lhs = MN_S$slot$ENT value = 25 }
		}
		#Muslims/Gnostics/Druze in MENA and central Asia
		else_if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 14 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 21 } }
				OR = {
					continent = mena
					continent = central_asia
				}
			}
			change_key = { lhs = MN_S$slot$ENT value = 25 }
		}
		#Taoic in East Indies superregion and central Asia
		else_if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 21 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 26 } }
				OR = {
					superregion = east_indies_superregion
					continent = asia
					superregion = japan_superregion
				}
			}
			change_key = { lhs = MN_S$slot$ENT value = 25 }
		}
		#Dharmic in India and central Asia
		else_if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 26 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 30 } }
				OR = {
					superregion = southeast_asia_superregion
					continent = indian_continent
				}
			}
			change_key = { lhs = MN_S$slot$ENT value = 25 }
		}
		#Zoroastrian in Persia
		else_if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 30 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 32 } }
				superregion = persia_superregion
			}
			change_key = { lhs = MN_S$slot$ENT value = 40 }
		}
		#Jews in Semien and Palestine, and in Europe and MENA
		else_if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 32 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 34 } }
			}
			if = {
				limit = {
					OR = {
						area = semien_area
						area = palestine_area
					}
				}
				change_key = { lhs = MN_S$slot$ENT value = 25 }
			}
			else_if = {
				limit = {
					OR = {
						continent = mena
						continent = europe
					}
				}
				change_key = { lhs = MN_S$slot$ENT value = 40 }
			}
		}
		#Additional 25% for owner religion
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			change_key = { lhs = MN_S$slot$ENT value = 25 }
		}
		#Entrenchment should be between 0.01 and 100
		if = {
			limit = { NOT = { check_key = { lhs = MN_S$slot$ENT value = 0.01 } } }
			set_key = { lhs = MN_S$slot$ENT value = 0.01 }
		}
		else_if = {
			limit = { check_key = { lhs = MN_S$slot$ENT value = 100 } }
			set_key = { lhs = MN_S$slot$ENT value = 100 }
		}
	}
}

MN_GetInfrast = {
	export_to_key = {
		 lhs = DG_Tmp1
		 value = religion
		 who = owner
	}
	MN_GetInfrast_Helper = { slot = 0 }
	MN_GetInfrast_Helper = { slot = 1 }
	MN_GetInfrast_Helper = { slot = 2 }
	MN_GetInfrast_Helper = { slot = 3 }
	MN_GetInfrast_Helper = { slot = 4 }
	MN_GetInfrast_Helper = { slot = 5 }
	set_key = { lhs = DG_Tmp1 value = 0 }
}


#Calculates by how much a minority is expected to change every other year.
#Primary factor is tolerance to said religion
#Impacted by entrenchment and infrastructure
MN_RlgShift_Helper = {
	if = {
		limit = {
			check_key = { lhs = MN_S$slot$ value = 1 } # slot is filled
			NOT = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp0 } } # slot not = owner religion
		}

		set_key = { lhs = DG_Tmp1 value = 0 }
		set_key = { lhs = DG_Tmp1 which = MN_S$slot$Tolerance } # get tolerance against the slot

		## Calculate base passive conversion value based on tolerance, entrenchment and infrastructure
		# Formula:
		# 			                         101 - Entrenchment        5 * Infrastructure
		# ToleranceOfOwnerToSlotReligion *  -------------------- * ----------------------- * 0.01 * Balance Factor
		#                    				2*Entrenchment + 75       Infrastructure + 5
		set_key = { lhs = DG_Tmp2 value = 101 }
		subtract_key = { lhs = DG_Tmp2 which = MN_S$slot$ENT }
		set_key = { lhs = DG_Tmp3 which = MN_S$slot$ENT }
		multiply_key = { lhs = DG_Tmp3 value = 2 }
		change_key = { lhs = DG_Tmp3 value = 75 }
		if = {
			limit = { NOT = { is_key_equal = { lhs = DG_Tmp3 value = 0 } } }
			divide_key = { lhs = DG_Tmp2			which = DG_Tmp3 }
		}

		multiply_key = { lhs = DG_Tmp1 which = DG_Tmp2 }

		set_key = { lhs = DG_Tmp2 which = MN_S$slot$INF }
		multiply_key = { lhs = DG_Tmp2 value = 5 }
		set_key = { lhs = DG_Tmp3 which = MN_S$slot$INF }
		change_key = { lhs = DG_Tmp3 value = 5 }
		if = {
			limit = { NOT = { is_key_equal = { lhs = DG_Tmp3 value = 0 } } }
			divide_key = { lhs = DG_Tmp2			which = DG_Tmp3 }
		}

		multiply_key = { lhs = DG_Tmp1 which = DG_Tmp2 }
		multiply_key = { lhs = DG_Tmp1 value = 0.01 } # bring back to % range
		
		#If owner religion is not main slot, main slot shifts to owner religion
		if = {
			limit = {
				is_key_equal = { lhs = MN_S$slot$ which = MN_S0 }
				NOT = { is_key_equal = { lhs = DG_Tmp0 which = MN_S0 } }
			}
			change_key = { lhs = DG_Tmp1 value = -0.010 }
		}

		#Preacher Impact and Special Cases
		set_key = { lhs = DG_Tmp3 which = MN_S$slot$Preach } # get preacher strength / 100
		divide_key = { lhs = DG_Tmp3 value = 100 }
		if = {
			limit = {
				is_key_equal = { lhs = MN_S$slot$ value = 1 } # Catholic Slot special cases
			}
			if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 } # 50% more preacher strength after catholic revival
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 1.2 } # 20% more preacher strength after 
			}
			if = {
				limit = { owner = { religion = catholic } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 } # -10% preacher strength if province has different culture group
			}
			if = {
				limit = { owner = { religion = baltic_pagan } } # special case for baltic pagans
				if = {
					limit = { 
						owner = {
							OR = {
								overlord = { 
									religion = catholic 
								}
								secondary_religion = catholic
							} 
							
						} 
					}
					set_key = { lhs = DG_Tmp1 value = 0.005 } # 0.5% if overlord of owner is catholic
				}
				else = {
					set_key = { lhs = DG_Tmp1 value = 0.001 } # 0.1% if slot is catholic and owner is baltic pagan
				}
			}	
		}
		else_if = {
			limit = {
				is_religion_enabled = protestant # Protestant Slot special cases
				is_key_equal = { lhs = MN_S$slot$ value = 2 }
			}
			if = {
				limit = { owner = { has_country_flag = support_02 } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 } # 50% preacher strength
			}
			else_if = {
				limit = { owner = { has_country_flag = silence_02 } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 } # -25% preacher strength from event options
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 } # -25% preacher strength from catholic revival
			}
			else_if = {
				limit = { NOT = { religion = protestant } owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 } # -25% preacher strength if province isnt fully protestant and country made religious compromise
			}
			if = {
				limit = { owner = { religion = protestant } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 } # -10% preacher strength for culture gruop difference
			}
		}
		else_if = {
			limit = {
				is_religion_enabled = reformed
				is_key_equal = { lhs = MN_S$slot$ value = 3 }
			}
			if = {
				limit = { owner = { has_country_flag = support_03 } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 }
			}
			else_if = {
				limit = { owner = { has_country_flag = silence_03 } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { NOT = { religion = reformed } owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			if = {
				limit = { owner = { religion = reformed } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 }
			}
		}
		else_if = {
			limit = {
				is_religion_enabled = hussite
				is_key_equal = { lhs = MN_S$slot$ value = 4 }
			}
			if = {
				limit = { owner = { has_country_flag = support_04 } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 }
			}
			else_if = {
				limit = { owner = { has_country_flag = silence_04 } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { NOT = { religion = hussite } owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			if = {
				limit = { owner = { religion = hussite } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 }
			}
		}
		else_if = {
			limit = {
				is_religion_enabled = waldensian
				is_key_equal = { lhs = MN_S$slot$ value = 5 }
			}
			if = {
				limit = { owner = { has_country_flag = support_05 } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 }
			}
			else_if = {
				limit = { owner = { has_country_flag = silence_05 } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { NOT = { religion = waldensian } owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			if = {
				limit = { owner = { religion = waldensian } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 }
			}
		}
		else_if = {
			limit = {
				is_religion_enabled = lollard
				is_key_equal = { lhs = MN_S$slot$ value = 6 }
			}
			if = {
				limit = { owner = { has_country_flag = support_06 } }
				multiply_key = { lhs = DG_Tmp3 value = 1.5 }
			}
			else_if = {
				limit = { owner = { has_country_flag = silence_06 } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { owner = { has_country_flag = DG_Catholic_Revival } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			else_if = {
				limit = { NOT = { religion = lollard } owner = { has_country_flag = DG_Religious_Compromise } }
				multiply_key = { lhs = DG_Tmp3 value = 0.75 }
			}
			if = {
				limit = { owner = { religion = lollard } NOT = { culture_group = owner } }
				multiply_key = { lhs = DG_Tmp3 value = 0.9 }
			}
		}
		else_if = {
			limit = {
				is_key_equal = { lhs = MN_S$slot$ value = 8 } # Orthodox slot special cases
			}
			if = {
				limit = { owner = { religion = baltic_pagan } }
				if = {
					limit = { 
						OR = { 
							owner = { 
								overlord = { 
									religion = orthodox 
								} 
								secondary_religion = orthodox 
							} 
						}
					}
					set_key = { lhs = DG_Tmp1 value = 0.005 } # 0.5% of pops converted to orthodox if overlord is orthodox or secondary religion is orthodox
				}
				else = {
					set_key = { lhs = DG_Tmp1 value = 0.001 }
				}
			}	
		}

		#Impact of the Tolerance Tenet
		if = {
			limit = { owner = { is_key_equal = { lhs = aspect_25 value = 1 } } } #One Faith
			multiply_key = { lhs = DG_Tmp1 value = 10 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
		}
		else_if = {
			limit = { owner = { is_key_equal = { lhs = aspect_25 value = 2 } } } #One Faith with Limited Tolerance
			if = {
				limit = { 
					owner = { OR = { religion_group = christian religion_group = muslim } }
					is_key_equal = { lhs = MN_S$slot$ value = 32 } # Slot is not Jewish
				}
				multiply_key = { lhs = DG_Tmp1 value = 0 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
			else_if = {
				limit = {
					owner = { religion_group = mesoamerican_pagan }
					is_key_equal = { lhs = MN_S$slot$ value = 35 } # Slot is not Cocijo
				}
				multiply_key = { lhs = DG_Tmp1 value = 0 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
			else = {
				multiply_key = { lhs = DG_Tmp1 value = 10 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
		}
		else_if = {
			limit = { owner = { is_key_equal = { lhs = aspect_25 value = 3 } } } #Selective Tolerance - Children of the book don't shift
			if = {
				limit = {
					owner = { OR = { religion_group = christian religion_group = muslim religion_group = jewish_group } }
					check_key = { lhs = MN_S$slot$ value = 21 }
					NOT = { is_key_equal = { lhs = MN_S$slot$ value = 32 } }
					NOT = { is_key_equal = { lhs = MN_S$slot$ value = 33 } }
					
				}
				multiply_key = { lhs = DG_Tmp1 value = 0 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
			else = {
				multiply_key = { lhs = DG_Tmp1 value = 10 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
		}
		else_if = {
			limit = { owner = { is_key_equal = { lhs = aspect_25 value = 4 } } } #Act of Tolerance
			if = {
				limit = {
					owner = { OR = { religion_group = christian religion_group = muslim religion_group = buddhism religion_group = dharmic  religion_group = zro_group religion_group = jewish_group } }
					check_key = { lhs = MN_S$slot$ value = 34 }		#Just convert the pagans
				}
				multiply_key = { lhs = DG_Tmp1 value = 10 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
			else = {
				multiply_key = { lhs = DG_Tmp1 value = 3.14 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
			}
		}
		else_if = {
			limit = { owner = { is_key_equal = { lhs = aspect_25 value = 5 } } } #Secularism
			multiply_key = { lhs = DG_Tmp1 value = 0 } # BALANCE Factor <- use this to increase or decrease overall speed of passive conversion
		}
		
		change_key = { lhs = DG_Tmp1 which = DG_Tmp3 } # add preacher strength to passive conversion based on tolerance
		
		set_key = { lhs = DG_Tmp4 which = MN_S$slot$Inquis }
		divide_key = { lhs = DG_Tmp4 value = 100 }
		subtract_key = { lhs = DG_Tmp1 which = DG_Tmp4 } # subtract inquisition strength from conversion based on tolerance
		
		if = {
			limit = { has_province_flag = evangelisation owner = { has_country_modifier = evangel_cm } }
			multiply_key = { lhs = DG_Tmp1 value = 50 } #Beorsferth: dunno what this does, but 50x multiplier seems pretty high. -> is probably a one time high conversion amount?
		}
		else = {
			clr_province_flag = evangelisation
		}
		
		if = {
			limit = { has_global_flag = historical_religion }
			multiply_key = { lhs = DG_Tmp1 value = 0.5 } # half passive conversion speed at historic religion game setting
		}
		
		#Handling Missionaries
		set_key = { lhs = DG_Tmp6 which = MN_S$slot$Tolerance }
		if = {
			limit = { has_missionary = yes }
			set_key = { lhs = DG_Tmp5 value = 1.0 }
			if = {
				limit = { check_key = { lhs = MN_S$slot$MStrength value = 0 } }
				change_key = { lhs = DG_Tmp5 which = MN_S$slot$MStrength }
			}
			divide_key   = { lhs = DG_Tmp6 value = -2 }
			multiply_key = { lhs = DG_Tmp5 which = DG_Tmp6 }	# missionary strength impact based on tolerance
			subtract_key = { lhs = DG_Tmp1 which = DG_Tmp5 }	# add missionary strength effect to passive conversion
		}
		else_if = {
			limit = { has_province_modifier = minority_missionary }
			set_key = { lhs = DG_Tmp5 value = 0.75 }
			if = {
				limit = { check_key = { lhs = MN_S$slot$MStrength value = 0 } }
				change_key = { lhs = DG_Tmp5 which = MN_S$slot$MStrength }
			}
			divide_key   = { lhs = DG_Tmp6 value = -5 }
			multiply_key = { lhs = DG_Tmp5 which = DG_Tmp6 }	# missionary strength impact based on tolerance
			subtract_key = { lhs = DG_Tmp1 which = DG_Tmp5 }	# add minority missionary effect to passive conversion
		}
		else_if = {
			limit = { any_neighbor_province = { owned_by = ROOT OR = { has_missionary = yes has_province_modifier = minority_missionary } } }
			set_key = { lhs = DG_Tmp5 value = 0.01 }
			if = {
				limit = { check_key = { lhs = MN_S$slot$MStrength value = 0 } }
				change_key = { lhs = DG_Tmp5 which = MN_S$slot$MStrength }
			}
			divide_key   = { lhs = DG_Tmp6 value = -10 }
			multiply_key = { lhs = DG_Tmp5 which = DG_Tmp6 }	# missionary strength impact based on tolerance
			subtract_key = { lhs = DG_Tmp1 which = DG_Tmp5 }	# effect of neighboring provinces having a missionary on conversion strength
		}

		#Jesuit Activity
		if = {
			limit = {
				check_key = { lhs = MN_S$slot$ value = 2 }
				NOT = { check_key = { lhs = MN_S$slot$ value = 7 } }
				has_province_modifier = jesuit_activity
			}
			set_key = { lhs = DG_Tmp5 value = 0.75 }
			if = {
				limit = { check_key = { lhs = MN_S$slot$MStrength value = 0 } }
				change_key = { lhs = DG_Tmp5 which = MN_S$slot$MStrength }
			}
			divide_key   = { lhs = DG_Tmp6 value = -5 }
			multiply_key = { lhs = DG_Tmp5 which = DG_Tmp6 }	# missionary strength impact based on tolerance
			subtract_key = { lhs = DG_Tmp1 which = DG_Tmp5 }	# add minority missionary effect to passive conversion
		}

		if = {
			limit = { NOT = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp0 } } is_colony = yes }
			change_key = { lhs = DG_Tmp1 value = -0.050 } # additive modifier of 5% of population per year on passive conversion from colonies
		}

		if = {
			limit = { owner = { western_christian = yes is_key_equal = { lhs = aspect_04 value = 3 } } } #Vernacular Bible
			change_key = { lhs = DG_Tmp1 value = -0.050 } # additive modifier of 5% of population per year on passive conversion from religious aspect
		}
		
		### Calculate actual effects on religious setup
		# if class is present modify its setup by multiplying a base value with calculated passive religious conversion %
		# Base values: Rural 40%, Urban 50%, Notables 25%
		if = {
			limit = { OR = { is_key_equal = { lhs = MN_S$slot$RurN value = 0 } NOT = { check_key = { lhs = Class_Rural value = 0.001 } } } }
			set_key = { lhs = MN_S$slot$Rur_Var value = 0 }
		}
		else = {
			set_key = { lhs = MN_S$slot$Rur_Var which = DG_Tmp1 }
			multiply_key = { lhs = MN_S$slot$Rur_Var value = 0.40 }
		}
		if = {
			limit = { OR = { is_key_equal = { lhs = MN_S$slot$UrbN value = 0 } NOT = { check_key = { lhs = Class_Urban value = 0.001 } } } }
			set_key = { lhs = MN_S$slot$Urb_Var value = 0 }
		}
		else = {
			set_key = { lhs = MN_S$slot$Urb_Var which = DG_Tmp1 }
			multiply_key = { lhs = MN_S$slot$Urb_Var value = 0.50 }
		}
		if = {
			limit = { OR = { is_key_equal = { lhs = MN_S$slot$NotN value = 0 } NOT = { check_key = { lhs = Class_Notables value = 0.001 } } } }
			set_key = { lhs = MN_S$slot$Not_Var value = 0 }
		}
		else = {
			set_key = { lhs = MN_S$slot$Not_Var which = DG_Tmp1 }
			multiply_key = { lhs = MN_S$slot$Not_Var value = 0.25 }
		}

		# sum up the total variance of the religious shift
		set_key    = { lhs = MN_S$slot$_Var which = MN_S$slot$Rur_Var }
		change_key = { lhs = MN_S$slot$_Var which = MN_S$slot$Urb_Var }
		change_key = { lhs = MN_S$slot$_Var which = MN_S$slot$Not_Var }
		
		set_key    = { lhs = DG_Tmp1 value = 0 }
		set_key    = { lhs = DG_Tmp2 value = 0 }
		set_key    = { lhs = DG_Tmp3 value = 0 }
		set_key    = { lhs = DG_Tmp4 value = 0 }
		set_key    = { lhs = DG_Tmp5 value = 0 }
		set_key    = { lhs = DG_Tmp6 value = 0 }
	}
}

MN_RlgShift = {
	export_to_key = {
		 lhs = DG_Tmp0
		 value = religion
		 who = owner
	}
	
	if = {
		limit = { NOT = { is_key_equal = { lhs = MN_S0 which = DG_Tmp0 } } }
		MN_AddReligion = { type = which religion = DG_Tmp0 }

		set_key      = { lhs = DG_Tmp2 value = 0.050 }
		set_key      = { lhs = DG_Tmp3 value = 0.250 }
		set_key      = { lhs = DG_Tmp4 value = 0.050 }
		
		MN_HeresyHelper = { to = DG_Tmp0 typeto = which from = MN_S0 typefrom = which }

		set_key = { lhs = DG_Tmp2 value = 0 }
		set_key = { lhs = DG_Tmp3 value = 0 }
		set_key = { lhs = DG_Tmp4 value = 0 }
	}
	export_to_key = {
		 lhs = DG_Tmp0
		 value = religion
		 who = owner
	}

	# calculate passive conversion
	MN_RlgShift_Helper = { slot = 0 }
	MN_RlgShift_Helper = { slot = 1 }
	MN_RlgShift_Helper = { slot = 2 }
	MN_RlgShift_Helper = { slot = 3 }
	MN_RlgShift_Helper = { slot = 4 }
	MN_RlgShift_Helper = { slot = 5 }
	
	set_key = { lhs = DG_Tmp1 which = MN_S0_Var }
	change_key = { lhs = DG_Tmp1 which = MN_S1_Var }
	change_key = { lhs = DG_Tmp1 which = MN_S2_Var }
	change_key = { lhs = DG_Tmp1 which = MN_S3_Var }
	change_key = { lhs = DG_Tmp1 which = MN_S4_Var }
	change_key = { lhs = DG_Tmp1 which = MN_S5_Var }

	if = {
		limit = {
			NOT = {
				is_key_equal = { lhs = DG_Tmp1 value = 0 }
			}
		}
		# make passive conversion effect proper slot
		if = {
			limit = { is_key_equal = { lhs = MN_S0 which = DG_Tmp0 } }
			set_key = { lhs = MN_S0_Var value = 0 }
			subtract_key = { lhs = MN_S0_Var which = MN_S1_Var }
			subtract_key = { lhs = MN_S0_Var which = MN_S2_Var }
			subtract_key = { lhs = MN_S0_Var which = MN_S3_Var }
			subtract_key = { lhs = MN_S0_Var which = MN_S4_Var }
			subtract_key = { lhs = MN_S0_Var which = MN_S5_Var }
			set_key = { lhs = MN_S0Rur_Var value = 0 }
			subtract_key = { lhs = MN_S0Rur_Var which = MN_S1Rur_Var }
			subtract_key = { lhs = MN_S0Rur_Var which = MN_S2Rur_Var }
			subtract_key = { lhs = MN_S0Rur_Var which = MN_S3Rur_Var }
			subtract_key = { lhs = MN_S0Rur_Var which = MN_S4Rur_Var }
			subtract_key = { lhs = MN_S0Rur_Var which = MN_S5Rur_Var }
			set_key = { lhs = MN_S0Urb_Var value = 0 }
			subtract_key = { lhs = MN_S0Urb_Var which = MN_S1Urb_Var }
			subtract_key = { lhs = MN_S0Urb_Var which = MN_S2Urb_Var }
			subtract_key = { lhs = MN_S0Urb_Var which = MN_S3Urb_Var }
			subtract_key = { lhs = MN_S0Urb_Var which = MN_S4Urb_Var }
			subtract_key = { lhs = MN_S0Urb_Var which = MN_S5Urb_Var }
			set_key = { lhs = MN_S0Not_Var value = 0 }
			subtract_key = { lhs = MN_S0Not_Var which = MN_S1Not_Var }
			subtract_key = { lhs = MN_S0Not_Var which = MN_S2Not_Var }
			subtract_key = { lhs = MN_S0Not_Var which = MN_S3Not_Var }
			subtract_key = { lhs = MN_S0Not_Var which = MN_S4Not_Var }
			subtract_key = { lhs = MN_S0Not_Var which = MN_S5Not_Var }
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S1 which = DG_Tmp0 } }
			set_key = { lhs = MN_S1_Var value = 0 }
			subtract_key = { lhs = MN_S1_Var which = MN_S0_Var }
			subtract_key = { lhs = MN_S1_Var which = MN_S2_Var }
			subtract_key = { lhs = MN_S1_Var which = MN_S3_Var }
			subtract_key = { lhs = MN_S1_Var which = MN_S4_Var }
			subtract_key = { lhs = MN_S1_Var which = MN_S5_Var }
			set_key = { lhs = MN_S1Rur_Var value = 0 }
			subtract_key = { lhs = MN_S1Rur_Var which = MN_S0Rur_Var }
			subtract_key = { lhs = MN_S1Rur_Var which = MN_S2Rur_Var }
			subtract_key = { lhs = MN_S1Rur_Var which = MN_S3Rur_Var }
			subtract_key = { lhs = MN_S1Rur_Var which = MN_S4Rur_Var }
			subtract_key = { lhs = MN_S1Rur_Var which = MN_S5Rur_Var }
			set_key = { lhs = MN_S1Urb_Var value = 0 }
			subtract_key = { lhs = MN_S1Urb_Var which = MN_S0Urb_Var }
			subtract_key = { lhs = MN_S1Urb_Var which = MN_S2Urb_Var }
			subtract_key = { lhs = MN_S1Urb_Var which = MN_S3Urb_Var }
			subtract_key = { lhs = MN_S1Urb_Var which = MN_S4Urb_Var }
			subtract_key = { lhs = MN_S1Urb_Var which = MN_S5Urb_Var }
			set_key = { lhs = MN_S1Not_Var value = 0 }
			subtract_key = { lhs = MN_S1Not_Var which = MN_S0Not_Var }
			subtract_key = { lhs = MN_S1Not_Var which = MN_S2Not_Var }
			subtract_key = { lhs = MN_S1Not_Var which = MN_S3Not_Var }
			subtract_key = { lhs = MN_S1Not_Var which = MN_S4Not_Var }
			subtract_key = { lhs = MN_S1Not_Var which = MN_S5Not_Var }
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S2 which = DG_Tmp0 } }
			set_key = { lhs = MN_S2_Var value = 0 }
			subtract_key = { lhs = MN_S2_Var which = MN_S0_Var }
			subtract_key = { lhs = MN_S2_Var which = MN_S1_Var }
			subtract_key = { lhs = MN_S2_Var which = MN_S3_Var }
			subtract_key = { lhs = MN_S2_Var which = MN_S4_Var }
			subtract_key = { lhs = MN_S2_Var which = MN_S5_Var }
			set_key = { lhs = MN_S2Rur_Var value = 0 }
			subtract_key = { lhs = MN_S2Rur_Var which = MN_S0Rur_Var }
			subtract_key = { lhs = MN_S2Rur_Var which = MN_S1Rur_Var }
			subtract_key = { lhs = MN_S2Rur_Var which = MN_S3Rur_Var }
			subtract_key = { lhs = MN_S2Rur_Var which = MN_S4Rur_Var }
			subtract_key = { lhs = MN_S2Rur_Var which = MN_S5Rur_Var }
			set_key = { lhs = MN_S2Urb_Var value = 0 }
			subtract_key = { lhs = MN_S2Urb_Var which = MN_S0Urb_Var }
			subtract_key = { lhs = MN_S2Urb_Var which = MN_S1Urb_Var }
			subtract_key = { lhs = MN_S2Urb_Var which = MN_S3Urb_Var }
			subtract_key = { lhs = MN_S2Urb_Var which = MN_S4Urb_Var }
			subtract_key = { lhs = MN_S2Urb_Var which = MN_S5Urb_Var }
			set_key = { lhs = MN_S2Not_Var value = 0 }
			subtract_key = { lhs = MN_S2Not_Var which = MN_S0Not_Var }
			subtract_key = { lhs = MN_S2Not_Var which = MN_S1Not_Var }
			subtract_key = { lhs = MN_S2Not_Var which = MN_S3Not_Var }
			subtract_key = { lhs = MN_S2Not_Var which = MN_S4Not_Var }
			subtract_key = { lhs = MN_S2Not_Var which = MN_S5Not_Var }
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S3 which = DG_Tmp0 } }
			set_key = { lhs = MN_S3_Var value = 0 }
			subtract_key = { lhs = MN_S3_Var which = MN_S0_Var }
			subtract_key = { lhs = MN_S3_Var which = MN_S1_Var }
			subtract_key = { lhs = MN_S3_Var which = MN_S2_Var }
			subtract_key = { lhs = MN_S3_Var which = MN_S4_Var }
			subtract_key = { lhs = MN_S3_Var which = MN_S5_Var }
			set_key = { lhs = MN_S3Rur_Var value = 0 }
			subtract_key = { lhs = MN_S3Rur_Var which = MN_S0Rur_Var }
			subtract_key = { lhs = MN_S3Rur_Var which = MN_S1Rur_Var }
			subtract_key = { lhs = MN_S3Rur_Var which = MN_S2Rur_Var }
			subtract_key = { lhs = MN_S3Rur_Var which = MN_S4Rur_Var }
			subtract_key = { lhs = MN_S3Rur_Var which = MN_S5Rur_Var }
			set_key = { lhs = MN_S3Urb_Var value = 0 }
			subtract_key = { lhs = MN_S3Urb_Var which = MN_S0Urb_Var }
			subtract_key = { lhs = MN_S3Urb_Var which = MN_S1Urb_Var }
			subtract_key = { lhs = MN_S3Urb_Var which = MN_S2Urb_Var }
			subtract_key = { lhs = MN_S3Urb_Var which = MN_S4Urb_Var }
			subtract_key = { lhs = MN_S3Urb_Var which = MN_S5Urb_Var }
			set_key = { lhs = MN_S3Not_Var value = 0 }
			subtract_key = { lhs = MN_S3Not_Var which = MN_S0Not_Var }
			subtract_key = { lhs = MN_S3Not_Var which = MN_S1Not_Var }
			subtract_key = { lhs = MN_S3Not_Var which = MN_S2Not_Var }
			subtract_key = { lhs = MN_S3Not_Var which = MN_S4Not_Var }
			subtract_key = { lhs = MN_S3Not_Var which = MN_S5Not_Var }
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S4 which = DG_Tmp0 } }
			set_key = { lhs = MN_S4_Var value = 0 }
			subtract_key = { lhs = MN_S4_Var which = MN_S0_Var }
			subtract_key = { lhs = MN_S4_Var which = MN_S1_Var }
			subtract_key = { lhs = MN_S4_Var which = MN_S2_Var }
			subtract_key = { lhs = MN_S4_Var which = MN_S3_Var }
			subtract_key = { lhs = MN_S4_Var which = MN_S5_Var }
			set_key = { lhs = MN_S4Rur_Var value = 0 }
			subtract_key = { lhs = MN_S4Rur_Var which = MN_S0Rur_Var }
			subtract_key = { lhs = MN_S4Rur_Var which = MN_S1Rur_Var }
			subtract_key = { lhs = MN_S4Rur_Var which = MN_S2Rur_Var }
			subtract_key = { lhs = MN_S4Rur_Var which = MN_S3Rur_Var }
			subtract_key = { lhs = MN_S4Rur_Var which = MN_S5Rur_Var }
			set_key = { lhs = MN_S4Urb_Var value = 0 }
			subtract_key = { lhs = MN_S4Urb_Var which = MN_S0Urb_Var }
			subtract_key = { lhs = MN_S4Urb_Var which = MN_S1Urb_Var }
			subtract_key = { lhs = MN_S4Urb_Var which = MN_S2Urb_Var }
			subtract_key = { lhs = MN_S4Urb_Var which = MN_S3Urb_Var }
			subtract_key = { lhs = MN_S4Urb_Var which = MN_S5Urb_Var }
			set_key = { lhs = MN_S4Not_Var value = 0 }
			subtract_key = { lhs = MN_S4Not_Var which = MN_S0Not_Var }
			subtract_key = { lhs = MN_S4Not_Var which = MN_S1Not_Var }
			subtract_key = { lhs = MN_S4Not_Var which = MN_S2Not_Var }
			subtract_key = { lhs = MN_S4Not_Var which = MN_S3Not_Var }
			subtract_key = { lhs = MN_S4Not_Var which = MN_S5Not_Var }
		}
		else_if = {
			limit = { is_key_equal = { lhs = MN_S5 which = DG_Tmp0 } }
			set_key = { lhs = MN_S5_Var value = 0 }
			subtract_key = { lhs = MN_S5_Var which = MN_S0_Var }
			subtract_key = { lhs = MN_S5_Var which = MN_S1_Var }
			subtract_key = { lhs = MN_S5_Var which = MN_S2_Var }
			subtract_key = { lhs = MN_S5_Var which = MN_S3_Var }
			subtract_key = { lhs = MN_S5_Var which = MN_S4_Var }
			set_key = { lhs = MN_S5Rur_Var value = 0 }
			subtract_key = { lhs = MN_S5Rur_Var which = MN_S0Rur_Var }
			subtract_key = { lhs = MN_S5Rur_Var which = MN_S1Rur_Var }
			subtract_key = { lhs = MN_S5Rur_Var which = MN_S2Rur_Var }
			subtract_key = { lhs = MN_S5Rur_Var which = MN_S3Rur_Var }
			subtract_key = { lhs = MN_S5Rur_Var which = MN_S4Rur_Var }
			set_key = { lhs = MN_S5Urb_Var value = 0 }
			subtract_key = { lhs = MN_S5Urb_Var which = MN_S0Urb_Var }
			subtract_key = { lhs = MN_S5Urb_Var which = MN_S1Urb_Var }
			subtract_key = { lhs = MN_S5Urb_Var which = MN_S2Urb_Var }
			subtract_key = { lhs = MN_S5Urb_Var which = MN_S3Urb_Var }
			subtract_key = { lhs = MN_S5Urb_Var which = MN_S4Urb_Var }
			set_key = { lhs = MN_S5Not_Var value = 0 }
			subtract_key = { lhs = MN_S5Not_Var which = MN_S0Not_Var }
			subtract_key = { lhs = MN_S5Not_Var which = MN_S1Not_Var }
			subtract_key = { lhs = MN_S5Not_Var which = MN_S2Not_Var }
			subtract_key = { lhs = MN_S5Not_Var which = MN_S3Not_Var }
			subtract_key = { lhs = MN_S5Not_Var which = MN_S4Not_Var }
		}
	}
	set_key = { lhs = DG_Tmp0 value = 0 }
	set_key = { lhs = DG_Tmp1 value = 0 }
}

#Impact on minority attributes
#Can use ENT, INF, Preach, Inquis or Tolerance
#DO NOT use the Rural, Urban or Notables
MN_Attribute_Effect = {
	if = {
		limit = {
			is_key_equal = { lhs = MN_S0 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S0$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S1 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S1$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S2 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S2$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S3 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S3$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S4 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S4$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S5 $reltype$ = $religion$ }
		}
		change_key = { lhs = MN_S5$typeEffect$ $typeStrength$ = $strength$ }
	}
}

MN_Attribute_Reset = {
	if = {
		limit = {
			is_key_equal = { lhs = MN_S0 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S0$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S1 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S1$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S2 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S2$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S3 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S3$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S4 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S4$typeEffect$ $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S5 $reltype$ = $religion$ }
		}
		set_key = { lhs = MN_S5$typeEffect$ $typeStrength$ = $strength$ }
	}
}

#Calculation of the minority effect on autonomy
#Formula: ( 3 - (ToleranceToSlot) ) / 6 
#Thats the amount of autonomy base per slot
#We adjust that for the percentage of the minority of the total population in the province
#Then we add these values up (as long as they are postive), which gives us the total autonomy effect
#Then we cap that at 0.45 autonomy to preserve sanity
MN_Autonomy_Helper = {
	set_key = { lhs = DG_Tmp7 value = 3 }
	subtract_key = { lhs = DG_Tmp7 which = MN_S$slot$Tolerance }
	divide_key = { lhs = DG_Tmp7 value = 6 }
	multiply_key = { lhs = DG_Tmp7 which = MN_S$slot$TotP }
	if = {
		limit = { check_key = { lhs = DG_Tmp7 value = 0.001 } }
		change_key = { lhs = DG_Tmp1 which = DG_Tmp7 }	#Update the autonomy to be added
	}
}


MN_Autonomy = {
    if = {
        limit = {
            has_province_flag = DG_Update
        }
        set_key = { lhs = DG_Tmp1 value = 0 }	#Reset our value just to be sure

		#Do the autonomy helper for all slots
        MN_Autonomy_Helper = { slot = 0 }
        MN_Autonomy_Helper = { slot = 1 }	
        MN_Autonomy_Helper = { slot = 2 }
        MN_Autonomy_Helper = { slot = 3 }
        MN_Autonomy_Helper = { slot = 4 }
        MN_Autonomy_Helper = { slot = 5 }
        
        

		if = {			#sanity check to make sure we can't get negative autonomy
			limit = {
				NOT = {
					check_key = { lhs = DG_Tmp1 value = 0 } 
				}
			}
			set_key = { lhs = DG_Tmp1 value = 0 }
		}
		else_if = {		#Sanity check to max out the autonomy at 0.45
			limit = {
				check_key = { lhs = DG_Tmp1 value = 45 }
			}
			set_key = { lhs = DG_Tmp1 value = 45 }
		}

		#Set the autonomy to the province 
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 256 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 128 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 64 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 32 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 16 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 8 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 4 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 2 }
        POP_SetMod = { varname = DG_Tmp1 modname = MN_A type = province value = 1 }
        
		#Reset our values to zero to not clog the savefile
        set_key = { lhs = DG_Tmp1 value = 0 }
		set_key = { lhs = DG_Tmp7 value = 0 }
    }
}

#Adds a trauma corresponding to the size of the minority, impacted by the strength set by event.
MinorityTrauma = {
	if = {
		limit = {
			is_key_equal = { lhs = MN_S0 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 0 strength = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S1 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 1 strength = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S2 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 2 strength = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S3 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 3 strength = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S4 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 4 strength = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S5 value = $religion$ }
		}
		MinorityTrauma_Helper = { slot = 5 strength = $strength$ }
	}
}

MinorityTrauma_Helper = {
	set_key = { lhs = DG_Tmp1 which = MN_S$slot$TotP }
	#divide_key = { lhs = DG_Tmp1 value = 100 }
	multiply_key = { lhs = DG_Tmp1 value = $strength$ }
	divide_key = { lhs = DG_Tmp1 value = 10 }
	POP_SetDevastation = {
		type = which
		inp = DG_Tmp1
	}
	set_key = { lhs = DG_Tmp1 value = 0 }
}

#Calculates if province is romanist bastion or a heresy bastion
BastionAssessment_Helper = {
	if = {
		limit = {
			OR = {
				is_key_equal = { lhs = MN_S$slot$ value = 1 }
				is_key_equal = { lhs = MN_S$slot$ value = $heresy$ }
			}
		}
		set_key = { lhs = MN_S$slot$Bastion which = MN_S$slot$ENT }
		divide_key = { lhs = MN_S$slot$Bastion value = 10 }
		if = {
			limit = { is_key_equal = { lhs = MN_S$slot$ which = DG_Tmp1 } }
			if = {
				limit = { is_core = ROOT }
				change_key = { lhs = MN_S$slot$Bastion value = 2 }
			}
			else = {
				change_key = { lhs = MN_S$slot$Bastion value = -2 }
			}
			if = {
				limit = {
					OR = {
						culture_group = ROOT
						has_owner_accepted_culture = yes
					}
				}
				change_key = { lhs = MN_S$slot$Bastion value = 1 }
			}
			else = {
				change_key = { lhs = MN_S$slot$Bastion value = -1 }
			}
			if = {
				limit = {
					any_neighbor_province = { NOT = { owned_by = ROOT } NOT = { is_key_equal = { lhs = MN_S0 value = $heresy$ } } }
				}
				change_key = { lhs = MN_S$slot$Bastion value = -2 }
			}
		}
		else = {
			if = {
				limit = { is_core = ROOT }
				change_key = { lhs = MN_S$slot$Bastion value = -2 }
			}
			else = {
				change_key = { lhs = MN_S$slot$Bastion value = 2 }
			}
			if = {
				limit = {
					OR = {
						culture_group = ROOT
						has_owner_accepted_culture = yes
					}
				}
				change_key = { lhs = MN_S$slot$Bastion value = -1 }
			}
			else = {
				change_key = { lhs = MN_S$slot$Bastion value = 1 }
			}
			if = {
				limit = {
					any_neighbor_province = { NOT = { owned_by = ROOT } NOT = { is_key_equal = { lhs = MN_S0 value = $heresy$ } } }
				}
				change_key = { lhs = MN_S$slot$Bastion value = 2 }
			}
		}
	}
}

BastionAssessment = {
	export_to_key = {
		 lhs = DG_Tmp1
		 value = religion
		 who = owner
	}
	BastionAssessment_Helper = { slot = 0 heresy = $heresy$ }
	BastionAssessment_Helper = { slot = 1 heresy = $heresy$ }
	BastionAssessment_Helper = { slot = 2 heresy = $heresy$ }
	BastionAssessment_Helper = { slot = 3 heresy = $heresy$ }
	BastionAssessment_Helper = { slot = 4 heresy = $heresy$ }
	BastionAssessment_Helper = { slot = 5 heresy = $heresy$ }
	if = {
		limit = {
			check_key = { lhs = MN_S0Bastion which = MN_S1Bastion }
			check_key = { lhs = MN_S0Bastion which = MN_S2Bastion }
			check_key = { lhs = MN_S0Bastion which = MN_S3Bastion }
			check_key = { lhs = MN_S0Bastion which = MN_S4Bastion }
			check_key = { lhs = MN_S0Bastion which = MN_S5Bastion }
		}
		set_key = { lhs = MN_S1Bastion value = 0 }
		set_key = { lhs = MN_S2Bastion value = 0 }
		set_key = { lhs = MN_S3Bastion value = 0 }
		set_key = { lhs = MN_S4Bastion value = 0 }
		set_key = { lhs = MN_S5Bastion value = 0 }
	}
	else_if = {
		limit = {
			check_key = { lhs = MN_S1Bastion which = MN_S0Bastion }
			check_key = { lhs = MN_S1Bastion which = MN_S2Bastion }
			check_key = { lhs = MN_S1Bastion which = MN_S3Bastion }
			check_key = { lhs = MN_S1Bastion which = MN_S4Bastion }
			check_key = { lhs = MN_S1Bastion which = MN_S5Bastion }
		}
		set_key = { lhs = MN_S0Bastion value = 0 }
		set_key = { lhs = MN_S2Bastion value = 0 }
		set_key = { lhs = MN_S3Bastion value = 0 }
		set_key = { lhs = MN_S4Bastion value = 0 }
		set_key = { lhs = MN_S5Bastion value = 0 }
	}
	else_if = {
		limit = {
			check_key = { lhs = MN_S2Bastion which = MN_S0Bastion }
			check_key = { lhs = MN_S2Bastion which = MN_S1Bastion }
			check_key = { lhs = MN_S2Bastion which = MN_S3Bastion }
			check_key = { lhs = MN_S2Bastion which = MN_S4Bastion }
			check_key = { lhs = MN_S2Bastion which = MN_S5Bastion }
		}
		set_key = { lhs = MN_S0Bastion value = 0 }
		set_key = { lhs = MN_S1Bastion value = 0 }
		set_key = { lhs = MN_S3Bastion value = 0 }
		set_key = { lhs = MN_S4Bastion value = 0 }
		set_key = { lhs = MN_S5Bastion value = 0 }
	}
	else_if = {
		limit = {
			check_key = { lhs = MN_S3Bastion which = MN_S0Bastion }
			check_key = { lhs = MN_S3Bastion which = MN_S1Bastion }
			check_key = { lhs = MN_S3Bastion which = MN_S2Bastion }
			check_key = { lhs = MN_S3Bastion which = MN_S4Bastion }
			check_key = { lhs = MN_S3Bastion which = MN_S5Bastion }
		}
		set_key = { lhs = MN_S0Bastion value = 0 }
		set_key = { lhs = MN_S1Bastion value = 0 }
		set_key = { lhs = MN_S2Bastion value = 0 }
		set_key = { lhs = MN_S4Bastion value = 0 }
		set_key = { lhs = MN_S5Bastion value = 0 }
	}
	else_if = {
		limit = {
			check_key = { lhs = MN_S4Bastion which = MN_S0Bastion }
			check_key = { lhs = MN_S4Bastion which = MN_S1Bastion }
			check_key = { lhs = MN_S4Bastion which = MN_S2Bastion }
			check_key = { lhs = MN_S4Bastion which = MN_S3Bastion }
			check_key = { lhs = MN_S4Bastion which = MN_S5Bastion }
		}
		set_key = { lhs = MN_S0Bastion value = 0 }
		set_key = { lhs = MN_S1Bastion value = 0 }
		set_key = { lhs = MN_S2Bastion value = 0 }
		set_key = { lhs = MN_S3Bastion value = 0 }
		set_key = { lhs = MN_S5Bastion value = 0 }
	}
	else = {
		set_key = { lhs = MN_S0Bastion value = 0 }
		set_key = { lhs = MN_S1Bastion value = 0 }
		set_key = { lhs = MN_S2Bastion value = 0 }
		set_key = { lhs = MN_S3Bastion value = 0 }
		set_key = { lhs = MN_S4Bastion value = 0 }
	}
	set_key = { lhs = DG_Tmp1 value = 0 }
}

#Adds preachers for new religions  
#MN_Preacher = { typeClass = Rural from = 2 to = 5 change = 10 typeFrom = value typeTo = value typeChange = value }
MN_Preacher = {
	MN_AddReligion = { type = $typeTo$ religion = $to$ }
	MN_ConvertReligion = {
		typeFrom = $typeFrom$ from = $from$	# From, as in the religion who is losing its believers
		typeTo = $typeTo$ to = $to$   # To, as in the religion who is gaining new believers
		typeChange = $typeChange$   # Change, as in how many people in absolute numbers are changing
		[[ruralChange]ruralChange = $ruralChange$] [[urbanChange]urbanChange = $urbanChange$] [[notablesChange]notablesChange = $notablesChange$]
	}
	[[ruralChange]
	MN_Preacher2 = { type = $typeTo$ religion = $to$ typeStrength = $typeStrength$ strength = $strength$ }
	]
	[[urbanChange]
	MN_Preacher2 = { type = $typeTo$ religion = $to$ typeStrength = $typeStrength$ strength = $strength$ }
	]
	[[notablesChange]
	MN_Preacher2 = { type = $typeTo$ religion = $to$ typeStrength = $typeStrength$ strength = $strength$ }
	]
	set_province_flag = DG_Update # Do once at the end of the month
}

MN_Preacher2 = {
	if = {
		limit = {
			is_key_equal = { lhs = MN_S0 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S0Preach $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S1 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S1Preach $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S2 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S2Preach $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S3 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S3Preach $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S4 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S4Preach $typeStrength$ = $strength$ }
	}
	else_if = {
		limit = {
			is_key_equal = { lhs = MN_S5 $type$ = $religion$ }
		}
		change_key = { lhs = MN_S5Preach $typeStrength$ = $strength$ }
	}
}
