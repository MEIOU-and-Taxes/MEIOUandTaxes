Tax_Clean = {
	Tax_CleanPer = { TaxName = TaxLand }
	Tax_CleanPer = { TaxName = TaxProp }
	Tax_CleanPer = { TaxName = TaxChattels }
	Tax_CleanPer = { TaxName = TaxInherit }
	Tax_CleanPer = { TaxName = TaxPoll }
	Tax_CleanPer = { TaxName = TaxToll }
	Tax_CleanPer = { TaxName = TaxSalt }
	Tax_CleanPer = { TaxName = TaxSubst }

	Tax_CleanPer = { TaxName = TaxTimber }
	Tax_CleanPer = { TaxName = TaxAlcohol }
	
	Tax_CleanPer = { TaxName = TaxNoble }
	Tax_CleanPer = { TaxName = TaxCharter }
	Tax_CleanPer = { TaxName = TaxTribute }
	Tax_CleanPer = { TaxName = TaxFeudal }
			
	Tax_CleanPer = { TaxName = PropAgriculture }
	Tax_CleanPer = { TaxName = PropExtraction }
	Tax_CleanPer = { TaxName = PropForestry }
	Tax_CleanPer = { TaxName = PropFishery }
	Tax_CleanPer = { TaxName = PropIndustrial }
	Tax_CleanPer = { TaxName = PropAcademic }
	Tax_CleanPer = { TaxName = PropCommercial }

	Tax_CleanPer = { TaxName = LevyDraft }
	Tax_CleanPer = { TaxName = LevyVolunt }
	Tax_CleanPer = { TaxName = LevyFeudal }
	Tax_CleanPer = { TaxName = LevyNoble }
	Tax_CleanPer = { TaxName = LevyUrban }
	Tax_CleanPer = { TaxName = LevyHorde }
}

Tax_CleanPer = {
	set_key = { lhs = Tax_Cost$TaxName$HighAI value = 0 }
	set_key = { lhs = Tax_Cost$TaxName$Rate value = 0 }
}

Tax_DistributeMana = {
	#AI_MaintBaseCalc = yes
	every_owned_province = {
		limit = {
			isValidProv = yes
		}
		Tax_Clean = yes
		if = {
			limit = {
				controlled_by = owner

				OR = {
					AND = {
						is_state = yes
						is_state_core = owner
					}
					is_owned_by_trade_company = yes
					AND = {
						OR = {
							owner = { NOT = { has_country_flag = POP_Init } }
							has_global_flag = POP_Sim
						}
						is_core = owner
					}
					has_global_flag = POP_Sim
				}
				
				[[flag]
					OR = {
						NOT = {
							always = $flag$
						}
						
						has_province_flag = Tax_CostFlag
					}
				]
			}
			set_province_flag = AI_Tax
		
			#if = {
			#	limit = {
			#		OR = {
			#			owner = { 
			#				OR = {
			#					ai = yes
			#					has_country_flag = Automatic_Maint 
			#				}
			#			}
			#			has_province_modifier = no_maint
			#			has_global_flag = POP_Sim
			#		}
			#		NOT = { has_global_flag = POP_Sim10 }
			#		NOT = { has_province_flag = Dont_Maint }
			#	}
		#
			#	AI_Property_Maint = { type = Agriculture }
			#	AI_Property_Maint = { type = Extraction }
			#	AI_Property_Maint = { type = Forestry }
			#	AI_Property_Maint = { type = Fishery }
			#	AI_Property_Maint = { type = Industrial }
			#	AI_Property_Maint = { type = Academic }
			#	AI_Property_Maint = { type = Commercial }
			#}
			#else_if = {
			#	limit = {
			#		has_global_flag = POP_Sim10
			#	}
			#	set_key = { lhs = Ai_Prp_MaintAgriculture value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintExtraction value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintForestry value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintFishery value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintIndustrial value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintAcademic value = 6 }
			#	set_key = { lhs = Ai_Prp_MaintCommercial value = 6 }
			#}
		}
		else = {
			clr_province_flag = AI_Tax
		}
	}
	if = {
		limit = {
			has_global_flag = Tax_AIDisable
		}
		AAA = {
			PREV = {
				set_key = { lhs = Tax_AssignADM which = PREV }
				set_key = { lhs = Tax_AssignDIP which = PREV }
				set_key = { lhs = Tax_AssignMIL which = PREV }
			}
		}
	}
	

	Tax_GetPre = { Type = ADM }
	Tax_GetPre = { Type = DIP }
	Tax_GetPre = { Type = MIL }

	every_owned_province = {
		limit = {
			has_province_flag = AI_Tax
		}
		Tax_GetPre = { Type = ADM }
		Tax_GetPre = { Type = DIP }
		Tax_GetPre = { Type = MIL }

		Tax_GetMetric = { Type = ADM TaxName = TaxLand DucatVar=TaxD_LandHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxProp DucatVar=TaxD_PropertyBUHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxChattels DucatVar=TaxD_ChattelHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxInherit DucatVar=TaxD_InheritanceHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxPoll DucatVar=TaxD_PollHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxToll DucatVar=TaxD_TollBUHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxSalt DucatVar=TaxD_SaltBUHigh }
		Tax_GetMetric = { Type = ADM TaxName = TaxSubst DucatVar=TaxD_SubstancesBUHigh }

		Tax_GetMetric = { Type = DIP TaxName = TaxTimber DucatVar=TaxD_TimberBUHigh }
		Tax_GetMetric = { Type = DIP TaxName = TaxAlcohol DucatVar=TaxD_AlcoholBUHigh }
		
		Tax_GetMetric = { Type = DIP TaxName = TaxNoble DucatVar=TaxD_ObligationsNOHigh }
		Tax_GetMetric = { Type = DIP TaxName = TaxCharter DucatVar=TaxD_ObligationsBGHigh }
		Tax_GetMetric = { Type = DIP TaxName = TaxTribute DucatVar=TaxD_ObligationsTRHigh }
		Tax_GetMetric = { Type = DIP TaxName = TaxFeudal DucatVar=TaxD_RentsHigh }
				
		Tax_GetMetric = { Type = DIP TaxName = PropAgriculture DucatVar=BU_GrossAgriculture }
		Tax_GetMetric = { Type = DIP TaxName = PropExtraction DucatVar=BU_GrossExtraction }
		Tax_GetMetric = { Type = DIP TaxName = PropForestry DucatVar=BU_GrossForestry }
		Tax_GetMetric = { Type = DIP TaxName = PropFishery DucatVar=BU_GrossFishery }
		Tax_GetMetric = { Type = DIP TaxName = PropIndustrial DucatVar=BU_GrossIndustrial }
		Tax_GetMetric = { Type = DIP TaxName = PropAcademic DucatVar=BU_GrossAcademic }
		Tax_GetMetric = { Type = DIP TaxName = PropCommercial DucatVar=BU_GrossCommercial }

		Tax_GetMetric = { Type = MIL TaxName = LevyDraft DucatVar=Mil_ConscriptHigh Scalar=Mil_StateSpendMulti }
		Tax_GetMetric = { Type = MIL TaxName = LevyVolunt DucatVar=Mil_VolunteerHigh Scalar=Mil_StateSpendMulti }
		Tax_GetMetric = { Type = MIL TaxName = LevyFeudal DucatVar=Mil_LevyHigh Scalar=Mil_StateSpendMulti }
		Tax_GetMetric = { Type = MIL TaxName = LevyNoble DucatVar=Mil_NobleHigh }
		Tax_GetMetric = { Type = MIL TaxName = LevyUrban DucatVar=Mil_BurgherHigh }
		Tax_GetMetric = { Type = MIL TaxName = LevyHorde DucatVar=Mil_ClanHigh }

		Tax_SumProvVars = { Type = ADM }
		Tax_SumProvVars = { Type = DIP }
		Tax_SumProvVars = { Type = MIL }
	}

	Tax_CalcNatManaGap = { Type = ADM }
	Tax_CalcNatManaGap = { Type = DIP }
	Tax_CalcNatManaGap = { Type = MIL }
	if = {
		limit = {
			OR = {
				has_country_flag = Tax_DelegateADM
				has_country_flag = Tax_DelegateDIP
				has_country_flag = Tax_DelegateMIL
			}
		}

		every_owned_province = {
			limit = {
				has_province_flag = AI_Tax
			}
			if = {
				limit = {
					PREV = { has_country_flag = Tax_DelegateADM }
					check_key = { lhs = Tax_CostSumADM value = 0.001 }
				}
				Tax_GetManaShare = { Type = ADM }
				Tax_SumAllocations = { Type = ADM }
			}
			if = {
				limit = {
					PREV = { has_country_flag = Tax_DelegateDIP }
					check_key = { lhs = Tax_CostSumDIP value = 0.001 }
				}
				Tax_GetManaShare = { Type = DIP }
				Tax_SumAllocations = { Type = DIP }
			}
			if = {
				limit = {
					PREV = { has_country_flag = Tax_DelegateMIL }
					check_key = { lhs = Tax_CostSumMIL value = 0.001 }
				}
				Tax_GetManaShare = { Type = MIL }
				Tax_SumAllocations = { Type = MIL }
			}
		}

		Tax_CalcNatAllocationGap = { Type = ADM }
		Tax_CalcNatAllocationGap = { Type = DIP }
		Tax_CalcNatAllocationGap = { Type = MIL }
	}

	every_owned_province = {
		limit = {
			has_province_flag = AI_Tax
		}
		if = {
			limit = {
				PREV = { has_country_flag = Tax_DelegateADM }
			}
			if = {
				limit = {
					check_key = { lhs = Tax_CostAllocationADM value = 0.001 }
				}
				Tax_ScaleByAllocationGap = { Type = ADM }
				if = {
					limit = {
						check_key = { lhs = Tax_CostAllocationADM which = Tax_CostSumADM }
					}
					Tax_AssignFullTaxRate = { TaxName = TaxLand }
					Tax_AssignFullTaxRate = { TaxName = TaxProp }
					Tax_AssignFullTaxRate = { TaxName = TaxChattels }
					Tax_AssignFullTaxRate = { TaxName = TaxInherit }
					Tax_AssignFullTaxRate = { TaxName = TaxPoll }
					Tax_AssignFullTaxRate = { TaxName = TaxToll }
					Tax_AssignFullTaxRate = { TaxName = TaxSalt }
					Tax_AssignFullTaxRate = { TaxName = TaxSubst }
				}
				else = {
					Tax_GetShareForTax = { Type = ADM TaxName = TaxLand }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxProp }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxChattels }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxInherit }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxPoll }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxToll }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxSalt }
					Tax_GetShareForTax = { Type = ADM TaxName = TaxSubst }

					Tax_CalcPerTaxRateGap = { Type = ADM }

					Tax_ScaleShareForTax = { TaxName = TaxLand }
					Tax_ScaleShareForTax = { TaxName = TaxProp }
					Tax_ScaleShareForTax = { TaxName = TaxChattels }
					Tax_ScaleShareForTax = { TaxName = TaxInherit }
					Tax_ScaleShareForTax = { TaxName = TaxPoll }
					Tax_ScaleShareForTax = { TaxName = TaxToll }
					Tax_ScaleShareForTax = { TaxName = TaxSalt }
					Tax_ScaleShareForTax = { TaxName = TaxSubst }
				}
			}
		}
		else_if = {
			limit = {
				PREV = { check_key = { lhs = Tax_AssignADM value = 0.001 } }
			}
			Tax_AssignFullTaxRate = { TaxName = TaxLand }
			Tax_AssignFullTaxRate = { TaxName = TaxProp }
			Tax_AssignFullTaxRate = { TaxName = TaxChattels }
			Tax_AssignFullTaxRate = { TaxName = TaxInherit }
			Tax_AssignFullTaxRate = { TaxName = TaxPoll }
			Tax_AssignFullTaxRate = { TaxName = TaxToll }
			Tax_AssignFullTaxRate = { TaxName = TaxSalt }
			Tax_AssignFullTaxRate = { TaxName = TaxSubst }
		}

		if = {
			limit = {
				PREV = { has_country_flag = Tax_DelegateDIP }
			}
			if = {
				limit = {
					check_key = { lhs = Tax_CostAllocationDIP value = 0.001 }
				}
				Tax_ScaleByAllocationGap = { Type = DIP }
				if = {
					limit = {
						check_key = { lhs = Tax_CostAllocationDIP which = Tax_CostSumDIP }
					}
					Tax_AssignFullTaxRate = { TaxName = TaxTimber }
					Tax_AssignFullTaxRate = { TaxName = TaxAlcohol }
		
					Tax_AssignFullTaxRate = { TaxName = TaxNoble }
					Tax_AssignFullTaxRate = { TaxName = TaxCharter }
					Tax_AssignFullTaxRate = { TaxName = TaxTribute }
					Tax_AssignFullTaxRate = { TaxName = TaxFeudal }
							
					Tax_AssignFullTaxRate = { TaxName = PropAgriculture }
					Tax_AssignFullTaxRate = { TaxName = PropExtraction }
					Tax_AssignFullTaxRate = { TaxName = PropForestry }
					Tax_AssignFullTaxRate = { TaxName = PropFishery }
					Tax_AssignFullTaxRate = { TaxName = PropIndustrial }
					Tax_AssignFullTaxRate = { TaxName = PropAcademic }
					Tax_AssignFullTaxRate = { TaxName = PropCommercial }
				}
				else = {
					Tax_GetShareForTax = { Type = DIP TaxName = TaxTimber }
					Tax_GetShareForTax = { Type = DIP TaxName = TaxAlcohol }
			
					Tax_GetShareForTax = { Type = DIP TaxName = TaxNoble }
					Tax_GetShareForTax = { Type = DIP TaxName = TaxCharter }
					Tax_GetShareForTax = { Type = DIP TaxName = TaxTribute }
					Tax_GetShareForTax = { Type = DIP TaxName = TaxFeudal }
							
					Tax_GetShareForTax = { Type = DIP TaxName = PropAgriculture }
					Tax_GetShareForTax = { Type = DIP TaxName = PropExtraction }
					Tax_GetShareForTax = { Type = DIP TaxName = PropForestry }
					Tax_GetShareForTax = { Type = DIP TaxName = PropFishery }
					Tax_GetShareForTax = { Type = DIP TaxName = PropIndustrial }
					Tax_GetShareForTax = { Type = DIP TaxName = PropAcademic }
					Tax_GetShareForTax = { Type = DIP TaxName = PropCommercial }

					Tax_CalcPerTaxRateGap = { Type = DIP }
					
					Tax_ScaleShareForTax = { TaxName = TaxTimber }
					Tax_ScaleShareForTax = { TaxName = TaxAlcohol }

					Tax_ScaleShareForTax = { TaxName = TaxNoble }
					Tax_ScaleShareForTax = { TaxName = TaxCharter }
					Tax_ScaleShareForTax = { TaxName = TaxTribute }
					Tax_ScaleShareForTax = { TaxName = TaxFeudal }
							
					Tax_ScaleShareForTax = { TaxName = PropAgriculture }
					Tax_ScaleShareForTax = { TaxName = PropExtraction }
					Tax_ScaleShareForTax = { TaxName = PropForestry }
					Tax_ScaleShareForTax = { TaxName = PropFishery }
					Tax_ScaleShareForTax = { TaxName = PropIndustrial }
					Tax_ScaleShareForTax = { TaxName = PropAcademic }
					Tax_ScaleShareForTax = { TaxName = PropCommercial }
				}
			}
		}
		else_if = {
			limit = {
				PREV = { check_key = { lhs = Tax_AssignDIP value = 0.001 } }
			}
			Tax_AssignFullTaxRate = { TaxName = TaxTimber }
			Tax_AssignFullTaxRate = { TaxName = TaxAlcohol }

			Tax_AssignFullTaxRate = { TaxName = TaxNoble }
			Tax_AssignFullTaxRate = { TaxName = TaxCharter }
			Tax_AssignFullTaxRate = { TaxName = TaxTribute }
			Tax_AssignFullTaxRate = { TaxName = TaxFeudal }
					
			Tax_AssignFullTaxRate = { TaxName = PropAgriculture }
			Tax_AssignFullTaxRate = { TaxName = PropExtraction }
			Tax_AssignFullTaxRate = { TaxName = PropForestry }
			Tax_AssignFullTaxRate = { TaxName = PropFishery }
			Tax_AssignFullTaxRate = { TaxName = PropIndustrial }
			Tax_AssignFullTaxRate = { TaxName = PropAcademic }
			Tax_AssignFullTaxRate = { TaxName = PropCommercial }
		}

		if = {
			limit = {
				PREV = { has_country_flag = Tax_DelegateMIL }
			}
			if = {
				limit = {
					check_key = { lhs = Tax_CostAllocationMIL value = 0.001 }
				}
				Tax_ScaleByAllocationGap = { Type = MIL }
				if = {
					limit = {
						check_key = { lhs = Tax_CostAllocationMIL which = Tax_CostSumMIL }
					}
					Tax_AssignFullTaxRate = { TaxName = LevyDraft }
					Tax_AssignFullTaxRate = { TaxName = LevyVolunt }
					Tax_AssignFullTaxRate = { TaxName = LevyFeudal }
					Tax_AssignFullTaxRate = { TaxName = LevyNoble }
					Tax_AssignFullTaxRate = { TaxName = LevyUrban }
					Tax_AssignFullTaxRate = { TaxName = LevyHorde }
				}
				else = {
					Tax_GetShareForTax = { Type = MIL TaxName = LevyDraft }
					Tax_GetShareForTax = { Type = MIL TaxName = LevyVolunt }
					Tax_GetShareForTax = { Type = MIL TaxName = LevyFeudal }
					Tax_GetShareForTax = { Type = MIL TaxName = LevyNoble }
					Tax_GetShareForTax = { Type = MIL TaxName = LevyUrban }
					Tax_GetShareForTax = { Type = MIL TaxName = LevyHorde }

					Tax_CalcPerTaxRateGap = { Type = MIL }
					
					Tax_ScaleShareForTax = { TaxName = LevyDraft }
					Tax_ScaleShareForTax = { TaxName = LevyVolunt }
					Tax_ScaleShareForTax = { TaxName = LevyFeudal }
					Tax_ScaleShareForTax = { TaxName = LevyNoble }
					Tax_ScaleShareForTax = { TaxName = LevyUrban }
					Tax_ScaleShareForTax = { TaxName = LevyHorde }
				}
			}
		}
		else_if = {
			limit = {
				PREV = { check_key = { lhs = Tax_AssignMIL value = 0.001 } }
			}
			Tax_AssignFullTaxRate = { TaxName = LevyDraft }
			Tax_AssignFullTaxRate = { TaxName = LevyVolunt }
			Tax_AssignFullTaxRate = { TaxName = LevyFeudal }
			Tax_AssignFullTaxRate = { TaxName = LevyNoble }
			Tax_AssignFullTaxRate = { TaxName = LevyUrban }
			Tax_AssignFullTaxRate = { TaxName = LevyHorde }
		}
	}

	every_owned_province = {
		Tax_SetRateDisplay = { BuildingName=tax_land TaxName = TaxLand }
		Tax_SetRateDisplay = { BuildingName=tax_prop TaxName = TaxProp }
		Tax_SetRateDisplay = { BuildingName=tax_chattels TaxName = TaxChattels }
		Tax_SetRateDisplay = { BuildingName=tax_inherit TaxName = TaxInherit }
		Tax_SetRateDisplay = { BuildingName=tax_poll TaxName = TaxPoll }
		Tax_SetRateDisplay = { BuildingName=tax_toll TaxName = TaxToll }
		Tax_SetRateDisplay = { BuildingName=tax_salt TaxName = TaxSalt }
		Tax_SetRateDisplay = { BuildingName=tax_subst TaxName = TaxSubst }

		Tax_SetRateDisplay = { BuildingName=tax_timber TaxName = TaxTimber }
		Tax_SetRateDisplay = { BuildingName=tax_alcohol TaxName = TaxAlcohol }

		Tax_SetRateDisplay = { BuildingName=obli_noble TaxName = TaxNoble }
		Tax_SetRateDisplay = { BuildingName=obli_charter TaxName = TaxCharter }
		Tax_SetRateDisplay = { BuildingName=obli_tribute TaxName = TaxTribute }
		Tax_SetRateDisplay = { BuildingName=obli_feudal TaxName = TaxFeudal }
				
		
		Tax_SetRateDisplay = { BuildingName=levy_draft TaxName = LevyDraft }
		Tax_SetRateDisplay = { BuildingName=levy_volunt TaxName = LevyVolunt }
		Tax_SetRateDisplay = { BuildingName=levy_feudal TaxName = LevyFeudal }
		Tax_SetRateDisplay = { BuildingName=levy_noble TaxName = LevyNoble }
		Tax_SetRateDisplay = { BuildingName=levy_urban TaxName = LevyUrban }
		Tax_SetRateDisplay = { BuildingName=levy_horde TaxName = LevyHorde }

		Tax_SetRateDisplayProp = { BuildingName=maint_Agriculture TaxName=PropAgriculture }
		Tax_SetRateDisplayProp = { BuildingName=maint_Extraction TaxName=PropExtraction special=pm }
		Tax_SetRateDisplayProp = { BuildingName=maint_Forestry TaxName=PropForestry }
		Tax_SetRateDisplayProp = { BuildingName=maint_Fishery TaxName=PropFishery }
		Tax_SetRateDisplayProp = { BuildingName=maint_Industrial TaxName=PropIndustrial }
		Tax_SetRateDisplayProp = { BuildingName=maint_Academic TaxName=PropAcademic }
		Tax_SetRateDisplayProp = { BuildingName=maint_Commercial TaxName=PropCommercial }
    }
}



## We need to know how 'hefty' each tax is. We dont want how much we can get, we want to know how much mana it costs
## We reduce allocation based on the sum of how hefty its taxes are
Tax_CalcWeight = {
	set_key = { lhs = Tax_Cost$TaxName$HighAI which = $DucatVar$ }
	[[Scalar] multiply_key = { lhs = Tax_Cost$TaxName$HighAI which = $Scalar$ } ]
	[[ScalarFixed] multiply_key = { lhs = Tax_Cost$TaxName$HighAI value = $ScalarFixed$ } ]
	if = {
		limit = {
			OR = {
				NOT = { check_key = { lhs = Tax_Cost$TaxName$HighAI value = 0 } }
				check_key = { lhs = Tax_Cost$TaxName$HighAI value = 5000 }
			}
		}
		set_key = { lhs = Tax_Cost$TaxName$HighAI value = 5000 } # NO CRAZY VALUES
	}
	#### DUCATS / MANA
	if = {
		limit = {
			check_key = { lhs = Tax_Cost$TaxName$High value = 0.05 }
		}
		divide_key = { lhs = Tax_Cost$TaxName$HighAI which = Tax_Cost$TaxName$High }
	}
	else = {
		multiply_key = { lhs = Tax_Cost$TaxName$HighAI value = 20 } #divide_key = { lhs = Tax_Cost$TaxName$HighAI value = 0.05 }
	}
	if = { ### OVERFLOW
		limit = {
			check_key = { lhs = Tax_Cost$TaxName$HighAI value = 500 }
		}
		set_key = { lhs = Tax_Cost$TaxName$HighAI value = 500 }
	}
	else_if = {
		limit = {
			NOT = { check_key = { lhs = Tax_Cost$TaxName$HighAI value = 0.001 } }
		}
		set_key = { lhs = Tax_Cost$TaxName$HighAI value = 0.001 }
	}
}
Tax_GetPre = {
	set_key = { lhs = Tax_CostScore$Type$ value = 0 }
	set_key = { lhs = Tax_CostSum$Type$ value = 0 }
	set_key = { lhs = Tax_CostAllocation$Type$ value = 0 }
	set_key = { lhs = Tax_CostMin$Type$ value = 0 }
}
Tax_GetMetric = {
	if = {
		limit = {
			owner = {
				Tax_$TaxName$Can = yes
			}
			check_key = { lhs = $DucatVar$ value = 0.001 }
			check_key = { lhs = Tax_Cost$TaxName$High value = 0.001 }
		}
		## Calc how much wealth adjusted mana this costs. Its basically either mana if mana > ducats, or mana / (ducats / mana) if ducats > mana
		Tax_CalcWeight = { TaxName=$TaxName$ DucatVar=$DucatVar$ [[Scalar] Scalar=$Scalar$ ] [[ScalarFixed] ScalarFixed=$ScalarFixed$ ] }
		## Also need to know the total sum of mana costs to check if we're going over
		change_key = { lhs = Tax_CostSum$Type$ which = Tax_Cost$TaxName$High } ### Sum up all mana costs while we're here
		change_key = { lhs = Tax_CostScore$Type$ which = Tax_Cost$TaxName$HighAI }
	}
}

Tax_SumProvVars = {
	# Reduce before we tally
	set_key = { lhs = Tax_Tmp0 which = Tax_CostSum$Type$ }
	multiply_key = { lhs = Tax_Tmp0 value = 0.01 } ### OVERFLOW SCALAR
	set_key = { lhs = Tax_Tmp1 which = Tax_CostScore$Type$ }
	multiply_key = { lhs = Tax_Tmp1 value = 0.01 } ### OVERFLOW SCALAR
	# Sum nationally
	PREV = {
		set_key = { lhs = Tax_Tmp0 which = PREV }
		change_key = { lhs = Tax_CostSum$Type$ which = Tax_Tmp0 }
		set_key = { lhs = Tax_Tmp1 which = PREV }
		change_key = { lhs = Tax_CostScore$Type$ which = Tax_Tmp1 }
	}
}

Tax_CalcNatManaGap = {
	set_key = { lhs = Tmp_7 which = Tax_Assign$Type$ }
	multiply_key = { lhs = Tmp_7 value = 0.01 } ### OVERFLOW SCALAR

	## We need to see if we have more mana costs than we do assigned mana
	## If we do, we need to know what the raw gap is, cause we'll distribute this across the provinces
	if = {
		limit = {
			check_key = { lhs = Tmp_7 value = 0.001 }
			check_key = { lhs = Tax_CostSum$Type$ which = Tmp_7 }
			NOT = { is_key_equal = { lhs = Tax_CostSum$Type$ which = Tmp_7 } }
		}
		set_country_flag = Tax_Delegate$Type$

		set_key = { lhs = Tax_CostGap$Type$ which = Tmp_7 }
		divide_key = { lhs = Tax_CostGap$Type$ which = Tax_CostSum$Type$ }

		set_key = { lhs = Tax_CostMin$Type$ which = Tax_CostScore$Type$ } ### SAVE
	}
	else = { ### If we don't, we remove the flag that says we do, and save many calcs
		clr_country_flag = Tax_Delegate$Type$
	}
}

Tax_GetManaShare = {
	if = {
		limit = {
			check_key = { lhs = Tax_CostScore$Type$ value = 0.001 }
		}
		### Algorithm here is Prov Mana Costs - (Prov Score/Total Score) * (Nat Total Mana-Nat Assigned Mana))
		### OR Tax_CostSum$Type$ - Tax_Tmp1/Tax_CostMin$Type$ * Tax_CostGap$Type$
		set_key = { lhs = Tax_Tmp2 which = Tax_CostSum$Type$ } ### SAVE

		set_key = { lhs = Tax_CostMin$Type$ which = PREV } ### LOAD NAT VALUE for CostScore
		set_key = { lhs = Tax_CostGap$Type$ which = PREV } ### Load what the raw mana gap is nationally
		set_key = { lhs = Tax_Assign$Type$ which = PREV } ### Load what the raw mana gap is nationally
		set_key = { lhs = Tax_CostSum$Type$ which = PREV } ### Load what the raw mana gap is nationally

		set_key = { lhs = Tax_CostAllocation$Type$ which = Tax_CostScore$Type$ }
		multiply_key = { lhs = Tax_CostAllocation$Type$ value = 0.01 }
		if = {
			limit = {
				NOT = { check_key = { lhs = Tax_CostAllocation$Type$ value = 0.001 } }
			}
			set_key = { lhs = Tax_CostAllocation$Type$ value = 0 }
		}
		if = {
			limit = {
				check_key = { lhs = Tax_CostAllocation$Type$ value = 0.001 }
				check_key = { lhs = Tax_CostMin$Type$ value = 0.001 }
			}
			divide_key = { lhs = Tax_CostAllocation$Type$ which = Tax_CostMin$Type$ }
		}
		multiply_key = { lhs = Tax_CostAllocation$Type$ which = Tax_Assign$Type$ }
		if = {
			limit = {
				check_key = { lhs = Tax_CostAllocation$Type$ which = Tax_Tmp2 }
			}
			set_key = { lhs = Tax_CostAllocation$Type$ which = Tax_Tmp2 }
			set_key = { lhs = Tax_Tmp1 which = Tax_Tmp2 }
			multiply_key = { lhs = Tax_Tmp1 value = 0.01 }
			divide_key = { lhs = Tax_Tmp1 which = Tax_CostSum$Type$ }
			multiply_key = { lhs = Tax_Tmp1 which = Tax_Assign$Type$ }
			multiply_key = { lhs = Tax_Tmp1 which = Tax_CostGap$Type$ }

			change_key = { lhs = Tax_CostAllocation$Type$ which = Tax_Tmp1 }
		}

		### Restore
		set_key = { lhs = Tax_CostSum$Type$ which = Tax_Tmp2 } ### RESTORE
	}
}

Tax_SumAllocations = {
	# Sum nationally
	PREV = {
		change_key = { lhs = Tax_CostAllocation$Type$ which = PREV }
	}
}

Tax_CalcNatAllocationGap = {
	if = {
		limit = {
			has_country_flag = Tax_Delegate$Type$
		}
		### We now need to check if the allocations we assigned have overflowed or underflowed the allocated mana value
		### Then we need to save the level of allocation overflow/underflow
		if = {
			limit = {
				check_key = { lhs = Tax_Assign$Type$ value = 0.001 }
				check_key = { lhs = Tax_CostAllocation$Type$ value = 0.001 }
			}
			set_key = { lhs = Tax_CostGap$Type$ which = Tax_CostAllocation$Type$ }
			divide_key = { lhs = Tax_CostGap$Type$ which = Tax_Assign$Type$ }
		}
		else = {
			set_key = { lhs = Tax_CostGap$Type$ value = 1 }
		}
	}
	else = {
		set_key = { lhs = Tax_CostGap$Type$ value = 0 }
	}
}

Tax_ScaleByAllocationGap = {
	### Here we apply it to the allocation, and check we havent overflowed again
	if = {
		limit = {
			PREV = { check_key = { lhs = Tax_CostGap$Type$ value = 0.001 } }
			check_key = { lhs = Tax_CostAllocation$Type$ value = 0.001 }
		}
		set_key = { lhs = Tax_CostGap$Type$ which = PREV }
		divide_key = { lhs = Tax_CostAllocation$Type$ which = Tax_CostGap$Type$ }
	}
	### Dont let the final amount exceed what the prov can be allocated
	if = {
		limit = {
			check_key = { lhs = Tax_CostAllocation$Type$ which = Tax_CostSum$Type$ }
		}
		set_key = { lhs = Tax_CostAllocation$Type$ which = Tax_CostSum$Type$ }
	}
	## We need this for the next step
	set_key = { lhs = Tax_Tmp2 value = 0 }
	set_key = { lhs = Tax_Tmp1 which = Tax_CostAllocation$Type$ }
	divide_key = { lhs = Tax_Tmp1 which = Tax_CostSum$Type$ }
}

Tax_GetShareForTax = {
	### So now we need to do this for each tax
	if = {
		limit = {
			check_key = { lhs = Tax_Cost$TaxName$HighAI value = 0.001 }
			NOT = { check_key = { lhs = Tax_Cost$TaxName$Rate value = 500 } } #Don't assign taxes if too costly
		}
		set_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$HighAI }
		divide_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_CostScore$Type$ }
		multiply_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_CostAllocation$Type$ }
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
			}
			set_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
		}

		set_key = { lhs = Tax_Tmp3 which = Tax_Cost$TaxName$High }
		divide_key = { lhs = Tax_Tmp3 which = Tax_CostSum$Type$ }
		multiply_key = { lhs = Tax_Tmp3 which = Tax_CostAllocation$Type$ }
		multiply_key = { lhs = Tax_Tmp3 which = Tax_Tmp1 }

		change_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Tmp3 }
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
			}
			set_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
		}

		change_key = { lhs = Tax_Tmp2 which = Tax_Cost$TaxName$Rate }
	}
}

Tax_CalcPerTaxRateGap = {
	## Same thing, have we wrongly allocated, save the level of underflow/overallocated
	if = {
		limit = {
			check_key = { lhs = Tax_Tmp2 value = 0.01 }
			NOT = { is_key_equal = { lhs = Tax_CostAllocation$Type$ value = 0 } }
		}
		divide_key = { lhs = Tax_Tmp2 which = Tax_CostAllocation$Type$ }
	}
	else = {
		set_key = { lhs = Tax_Tmp2 value = 0 }
	}
}

Tax_ScaleShareForTax = {
	if = {
		limit = {
			check_key = { lhs = Tax_Cost$TaxName$Rate value = 0.001 }
		}
		if = {
			limit = {
				check_key = { lhs = Tax_Tmp2 value = 0.001 }
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 0.001 }
			}
			divide_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Tmp2 }
		}
		### Dont let the final amount exceed what the tax can be allocated
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
			}
			set_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
		}
		### We now need to turn this into a 0-100 scalar
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 0.001 }
			}
			divide_key = { lhs = Tax_Cost$TaxName$Rate which = Tax_Cost$TaxName$High }
			multiply_key = { lhs = Tax_Cost$TaxName$Rate value = 100 }
		}
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 100 }
			}
			set_key = { lhs = Tax_Cost$TaxName$Rate value = 100 }
		}
		else_if = {
			limit = {
				NOT = { check_key = { lhs = Tax_Cost$TaxName$Rate value = 0 } }
			}
			set_key = { lhs = Tax_Cost$TaxName$Rate value = 0 }
		}
	}
	else = {
		set_key = { lhs = Tax_Cost$TaxName$Rate value = 0 }
	}
}

Tax_AssignFullTaxRate = {
	if = {
		limit = {
			check_key = { lhs = Tax_Cost$TaxName$HighAI value = 0.001 }
		}
		set_key = { lhs = Tax_Cost$TaxName$Rate value = 100 }
	}
}

Tax_SetRateDisplay = {
	if = { 
		limit = {
			owner = { ai = no }
		}
		if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 67 }
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_high
					}
				}
				remove_building = $BuildingName$_med
				remove_building = $BuildingName$_low
				remove_building = $BuildingName$_no

				add_building = $BuildingName$_high
			}
		}
		else_if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 34 }
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_med
					}
				}
				remove_building = $BuildingName$_high
				remove_building = $BuildingName$_low
				remove_building = $BuildingName$_no

				add_building = $BuildingName$_med
			}
		}
		else_if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 1 }
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_low
					}
				}
				remove_building = $BuildingName$_high
				remove_building = $BuildingName$_med
				remove_building = $BuildingName$_no

				add_building = $BuildingName$_low
			}
		}
		else_if = {
			limit = {
				NOT = {
					has_building = $BuildingName$_no
				}
			}
			remove_building = $BuildingName$_high
			remove_building = $BuildingName$_med
			remove_building = $BuildingName$_low
	
			add_building = $BuildingName$_no
		}
	}
	else_if = {
		limit = {
			NOT = {
				has_building = $BuildingName$_no
			}
		}
		remove_building = $BuildingName$_high
		remove_building = $BuildingName$_med
		remove_building = $BuildingName$_low

		add_building = $BuildingName$_no
	}
}

Tax_SetRateDisplayProp = {
	if = { 
		limit = {
			owner = { ai = no }
			NOT = { has_province_flag = Dont_Maint }
		}
		if = {
			limit = {
				OR = {
					check_key = { lhs = Tax_Cost$TaxName$Rate value = 30 }
					[[special] has_province_flag = $special$ ]
				}
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_high
					}
				}
				remove_building = $BuildingName$_med
				remove_building = $BuildingName$_low
				remove_building = $BuildingName$_no
	
				add_building = $BuildingName$_high
			}
		}
		else_if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 20 }
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_med
					}
				}
				remove_building = $BuildingName$_high
				remove_building = $BuildingName$_low
				remove_building = $BuildingName$_no
	
				add_building = $BuildingName$_med
			}
		}
		else_if = {
			limit = {
				check_key = { lhs = Tax_Cost$TaxName$Rate value = 1 }
			}
			if = {
				limit = {
					NOT = {
						has_building = $BuildingName$_low
					}
				}
				remove_building = $BuildingName$_high
				remove_building = $BuildingName$_med
				remove_building = $BuildingName$_no
	
				add_building = $BuildingName$_low
			}
		}
		else_if = {
			limit = {
				NOT = {
					has_building = $BuildingName$_no
				}
			}
			remove_building = $BuildingName$_high
			remove_building = $BuildingName$_med
			remove_building = $BuildingName$_low
	
			add_building = $BuildingName$_no
		}
	}
	else_if = {
		limit = {
			NOT = {
				has_building = $BuildingName$_no
			}
		}
		remove_building = $BuildingName$_high
		remove_building = $BuildingName$_med
		remove_building = $BuildingName$_low

		add_building = $BuildingName$_no
	}
}

Tax_ManaAI = {
	POP_GetAdminEffic = { return = Tax_AdminEffic }
	if = {
		limit = {
			NOT = { has_global_flag = Tax_AIDisable }
		}
		if = {
			limit = {
				OR  = {
					ai = yes
					[[base]	always = $base$	]
					has_global_flag = POP_Sim
				}
			}
			##########
			# Evaluate how much tax mana the AI spends
			##########

			# Export monthly ruler mana generation
			export_to_key = { lhs = Tax_AssignADM value = ADM }
			export_to_key = { lhs = Tax_AssignDIP value = DIP }
			export_to_key = { lhs = Tax_AssignMIL value = MIL }
			
			# Add monthly base mana generation
			change_key = { lhs = Tax_AssignADM value = 3 }
			change_key = { lhs = Tax_AssignDIP value = 3 }
			change_key = { lhs = Tax_AssignMIL value = 3 }
			
			## Add monthly advisor mana generation
			if = { 
				limit = {
					has_global_flag = POP_Sim # if sim assume lvl 2 advisor
				}
				change_key = { lhs = Tax_AssignADM value = 2 }
				change_key = { lhs = Tax_AssignDIP value = 2 }
				change_key = { lhs = Tax_AssignMIL value = 2 }
			}
			else = {

				Advisor_Get_Mana_per_Type = { type = ADM }
				Advisor_Get_Mana_per_Type = { type = DIP }
				Advisor_Get_Mana_per_Type = { type = MIL }

				change_key = { lhs = Tax_AssignADM which = Advisor_ADM }
				change_key = { lhs = Tax_AssignDIP which = Advisor_DIP }
				change_key = { lhs = Tax_AssignMIL which = Advisor_MIL }

				set_key = { lhs = Advisor_ADM value = 0 }
				set_key = { lhs = Advisor_DIP value = 0 }
				set_key = { lhs = Advisor_MIL value = 0 }
			}

			# Transform into yearly mana generation
			multiply_key = { lhs = Tax_AssignADM value = 12 }
			multiply_key = { lhs = Tax_AssignDIP value = 12 }
			multiply_key = { lhs = Tax_AssignMIL value = 12 }

			# Base ratio to spend on tax of yearly tax income
			set_key = { lhs = Tmp_4 value = 0.200 } # `DEFINE_AI_YEARLY_MANA_SPEND_BASE_RATIO_ADM~value`
			set_key = { lhs = Tmp_5 value = 0.225 } # `DEFINE_AI_YEARLY_MANA_SPEND_BASE_RATIO_DIP~value`
			set_key = { lhs = Tmp_6 value = 0.250 } # `DEFINE_AI_YEARLY_MANA_SPEND_BASE_RATIO_MIL~value`
	
			### Calculate multiplier on mana budget ratio on average_autonomy [0,100] => Spend more if autonomy is higher
			# Avg Autonomy * factor + 1
			export_to_key = { lhs = Public_Tmp9 value = average_autonomy }
			if = {
				limit = {
					NOT = { check_key = { lhs = Public_Tmp9 value = 0.001 } }
				}
				set_key = { lhs = Public_Tmp9 value = 0.001 }
			}
			multiply_key = { lhs = Public_Tmp9 value = 0.005 } # Average Autonomy 

			change_key = { lhs = Public_Tmp9 value = 1 }

			# Modify base budget ratio by autonomy
			multiply_key = { lhs = Tmp_4 which = Public_Tmp9 } 
			multiply_key = { lhs = Tmp_5 which = Public_Tmp9 } 
			multiply_key = { lhs = Tmp_6 which = Public_Tmp9 }

			set_key = { lhs = Public_Tmp9 value = 0 }

			## China fix => If treasury is super high, use less mana on money taxes
			if = {
				limit = {
					treasury = 10000
					check_key = { lhs = Tmp_4 value = 0.01 }
				}
				set_key = { lhs = Public_Tmp6 value = 10000 } # after this value of treasury start decreasing your tax rates
				export_to_key = { lhs = Public_Tmp7 value = treasury }
				divide_key = { lhs = Public_Tmp6 which = Public_Tmp7 }

				multiply_key = { lhs = Tmp_4 which = Public_Tmp6 }
				multiply_key = { lhs = Tmp_5 which = Public_Tmp6 }

				set_key = { lhs = Public_Tmp6 value = 0 }
			}
	
			# Lower Cap -> Dont spend nothing!
			if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_4 value = 0.001 } }
				}
				set_key = { lhs = Tmp_4 value = 0.001 }
			}
			if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_6 value = 0.001 } }
				}
				set_key = { lhs = Tmp_6 value = 0.001 }
			}
			if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_6 value = 0.001 } }
				}
				set_key = { lhs = Tmp_6 value = 0.001 }
			}

			#####
			# FRACTION ADJUSTMENTS AFTER CAP
			#####


			# Adjustments to balance China in sim
			if = {
				limit = {
					has_global_flag = POP_Sim
					tag = YUA
				}
				multiply_key = { lhs = Tmp_4 value = 6.5 }
				multiply_key = { lhs = Tmp_5 value = 4 }
				multiply_key = { lhs = Tmp_6 value = 1.7 }
			}

			# Nudge fractions
			[[adm] change_key = { lhs = Tmp_4 which = $adm$ } ]
			[[dip] change_key = { lhs = Tmp_5 which = $dip$ } ]
			[[mil] change_key = { lhs = Tmp_6 which = $mil$ } ]

			# Multiply yearly mana generation with calculated budget fractions
			multiply_key = { lhs = Tmp_4 which = Modi_TaxAI_ADM_RatioSpendingMulti } # adm budget fraction
			multiply_key = { lhs = Tmp_5 which = Modi_TaxAI_DIP_RatioSpendingMulti } # dip budget fraction
			multiply_key = { lhs = Tmp_6 which = Modi_TaxAI_MIL_RatioSpendingMulti } # mil budget fraction

			# Multiply yearly mana generation with calculated budget fractions
			multiply_key = { lhs = Tax_AssignADM which = Tmp_4 } # adm budget fraction
			multiply_key = { lhs = Tax_AssignDIP which = Tmp_5 } # dip budget fraction
			multiply_key = { lhs = Tax_AssignMIL which = Tmp_6 } # mil budget fraction

			# Base mana spending = 1 mana per category
			change_key = { lhs = Tax_AssignADM value = 1 }
			change_key = { lhs = Tax_AssignDIP value = 1 }
			change_key = { lhs = Tax_AssignMIL value = 1 }

			## Upper absolute cap for mana spending = 45
			## Lower absolute cap for mana spending = 2.5
			if = {
				limit = {
					OR = {
						NOT = { has_global_flag = POP_Sim }
						NOT = { tag = YUA }
					}
				}
				if = {
					limit = { check_key = { lhs = Tax_AssignADM value = 40 } } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`

					set_key = { lhs = Tax_AssignADM value = 40 } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`
				}
				else_if = {
					limit = { NOT = { check_key = { lhs = Tax_AssignADM value = 20 } } } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
					set_key = { lhs = Tax_AssignADM value = 20 } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
				}
				if = {
					limit = { check_key = { lhs = Tax_AssignDIP value = 40 } } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`

					set_key = { lhs = Tax_AssignDIP value = 40 } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`
				}
				else_if = {
					limit = { NOT = { check_key = { lhs = Tax_AssignDIP value = 20 } } } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
					set_key = { lhs = Tax_AssignDIP value = 20 } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
				}
				if = {
					limit = { check_key = { lhs = Tax_AssignMIL value = 40 } } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`

					set_key = { lhs = Tax_AssignMIL value = 40 } # `DEFINE_AI_MANA_TAX_SPENDING_UPPER_CAP~value`
				}
				else_if = {
					limit = { NOT = { check_key = { lhs = Tax_AssignMIL value = 20 } } } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
					set_key = { lhs = Tax_AssignMIL value = 20 } # `DEFINE_AI_MANA_TAX_SPENDING_LOWER_CAP~value`
				}
			}

			### WIP - for proper tag-switching ###
			#set_key = { lhs = Tax_CostAdmInp which = Tax_AssignADM }
			#set_key = { lhs = Tax_CostDipInp which = Tax_AssignDIP }
			#set_key = { lhs = Tax_CostMilInp which = Tax_AssignMIL }
			###	

			set_key = { lhs = Tmp_4 value = 0 }
			set_key = { lhs = Tmp_5 value = 0 }
			set_key = { lhs = Tmp_6 value = 0 }
		}
		else = {
			set_key = { lhs = Tax_AssignADM value = 0 }
			set_key = { lhs = Tax_AssignDIP value = 0 }
			set_key = { lhs = Tax_AssignMIL value = 0 }
			[[adm] set_key = { lhs = Tax_AssignADM which = $adm$ } ]
			[[dip] set_key = { lhs = Tax_AssignDIP which = $dip$ } ]
			[[mil] set_key = { lhs = Tax_AssignMIL which = $mil$ } ]
		}
	}
}