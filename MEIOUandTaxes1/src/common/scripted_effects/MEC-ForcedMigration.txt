ForcedMigration_Precalculation = {
	if = {
		limit = {
			has_country_flag = ForcedMigration_ScopesSetup
			has_country_flag = ForcedMigration_InpSetup
			OR = {
				has_country_flag = ForcedMigration_FromClassSF
				has_country_flag = ForcedMigration_FromClassNM
				has_country_flag = ForcedMigration_FromClassRE
			}
		}

		### Calculate Sum of moved population, if setup is done
		set_key = { lhs = ForcedMigration_Tmp0 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp1 value = 0 }
		
		if = {
			limit = {
				has_country_flag = ForcedMigration_Abs # For absolute input multiply amount of provinces with taken input
			}
			every_province = {
				limit = {
					has_province_flag = ForcedMigration_From
				}

				### Calculate Cultural Settlers
				if = {
					limit = { has_owner_culture = yes }
					ROOT = { 
						change_key = { lhs = ForcedMigration_Tmp0 which = ForcedMigration_Inp } 
						change_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Inp } 
					}
				}
				else = {
					ROOT = { 
						change_key = { lhs = ForcedMigration_Tmp0 which = ForcedMigration_Inp } 
						subtract_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Inp } 
					}
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_Prop # For proportional input sum up multiplication of input per province
			}
			every_province = {
				limit = {
					has_province_flag = ForcedMigration_From
				}
				set_key = { lhs = ForcedMigration_Inp which = ROOT }

				if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassSF }
					}
					set_key = { lhs = ForcedMigration_Tmp0 which = SF_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassNM }
					}
					set_key = { lhs = ForcedMigration_Tmp0 which = NM_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassRE }
					}
					set_key = { lhs = ForcedMigration_Tmp0 which = RE_Total }
				}
				multiply_key = { lhs = ForcedMigration_Tmp0 which = ForcedMigration_Inp }
				set_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp0 }

				if = {
					limit = { has_owner_culture = yes }
					#multiply_key = { lhs = ForcedMigration_Tmp1 value = 1 } # do nothing
				}
				else = {
					multiply_key = { lhs = ForcedMigration_Tmp1 value = -1 } # make settlers negative for cultural conversion
				}

				ROOT = { 
					change_key = { lhs = ForcedMigration_Tmp0 which = PREV } 
					change_key = { lhs = ForcedMigration_Tmp1 which = PREV } 
				}
			}
		}

		##
		# Store cultural settlers in tmp key
		set_key = { lhs = Public_Tmp0 which = ForcedMigration_Tmp1 }

		######
		## Calculate the cost of the movement -> initialize with amount of pops moved
		######
		set_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp0 } # Tmp1 = Money Cost
		set_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp0 } # Tmp2 = Mana Cost


		## Get Distance Moddifier
		#      Avg Prov Distance
		# 1 +  -----------------
		#           150

		set_key = { lhs = ForcedMigration_Tmp4 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp5 value = 0 }				
		set_key = { lhs = ForcedMigration_Tmp6 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp7 value = 0 }		
		every_province = {
			limit = { has_province_flag = ForcedMigration_From }

			every_province = {
				limit = { has_province_flag = ForcedMigration_To }

				PREV = {
					set_key = { lhs = Tmp_0 which = Coord_X }
					set_key = { lhs = Tmp_1 which = Coord_Y }
				}

				set_key = { lhs = Tmp_0 which = PREV }
				set_key = { lhs = Tmp_1 which = PREV }
				set_key = { lhs = Tmp_2 which = Coord_X }
				set_key = { lhs = Tmp_3 which = Coord_Y }

				distance_2d_effect = {
					which = ForcedMigration_Tmp4
					which_x1 = Tmp_0
					which_y1 = Tmp_1
					which_x2 = Tmp_2
					which_y2 = Tmp_3
				}

				ROOT = {
					change_key = { lhs = ForcedMigration_Tmp4 which = PREV }
					change_key = { lhs = ForcedMigration_Tmp5 value = 1 }
				}
			}
			ROOT = {
				divide_key = { lhs = ForcedMigration_Tmp4 which = ForcedMigration_Tmp5 }
				change_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp4 }
				change_key = { lhs = ForcedMigration_Tmp7 value = 1 }
			}
			
		}
		
		divide_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp7 } # Get average distance between all source and target provinces

		divide_key = { lhs = ForcedMigration_Tmp6 value = 150 } # Get multiplier out of average distance
		set_key = { lhs = ForcedMigration_Tmp3 value = 1 }
		change_key = { lhs = ForcedMigration_Tmp3 which = ForcedMigration_Tmp6 }

		## Get Peasant Freedom modifier [0.85,2]
		#      3.5 * Avg Peasant Freedom
		#  ------------------------------
		#      120 + Avg Peasant Freedom
		set_key = { lhs = ForcedMigration_Tmp5 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp6 value = 0 }

		every_province = {
			limit = { has_province_flag = ForcedMigration_From }

			set_key = { lhs = ForcedMigration_Tmp5 which = SF_Freedom }
			ROOT = {
				change_key = { lhs = ForcedMigration_Tmp5 which = PREV }
				change_key = { lhs = ForcedMigration_Tmp6 value = 1 }
			}
		}
		divide_key = { lhs = ForcedMigration_Tmp5 which = ForcedMigration_Tmp6 }
		set_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp5 }
		multiply_key = { lhs = ForcedMigration_Tmp6 value = 3.5 }
		change_key = { lhs = ForcedMigration_Tmp5 value = 120 }
		divide_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp5 }
		set_key = { lhs = ForcedMigration_Tmp4 which = ForcedMigration_Tmp6 }

		if = { 
			limit = { check_key = { lhs = ForcedMigration_Tmp4 value = 2 } }
			set_key = { lhs = ForcedMigration_Tmp4 value = 2 }
		}
		else_if = {
			limit = { NOT = { check_key = { lhs = ForcedMigration_Tmp4 value = 0.85 } } }
			set_key = { lhs = ForcedMigration_Tmp4 value = 0.85 }
		}
		## Get Local Autonomy (FROM | TO) modifier [0.75,1.5]
		#      (4.5 | 3.5) * Local Autonomy
		#  --------------------------
		#    Local Autonomy + 150
		set_key = { lhs = ForcedMigration_Tmp5 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp7 value = 0 }
		every_province = {
			limit = {
				OR = {
					has_province_flag = ForcedMigration_From 
					has_province_flag = ForcedMigration_To
				}
			}

			export_to_key = {
				lhs = ForcedMigration_Tmp5
				value = local_autonomy
			}
			set_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp5 }
			change_key = { lhs = ForcedMigration_Tmp6 value = 150 }

			if = {
				limit = { has_province_flag = ForcedMigration_From }
				multiply_key = { lhs = ForcedMigration_Tmp5 value = 4.5 }
			}
			else = {
				multiply_key = { lhs = ForcedMigration_Tmp5 value = 3.5 }
			}

			divide_key = { lhs = ForcedMigration_Tmp5 which = ForcedMigration_Tmp6 }

			ROOT = {
				change_key = { lhs = ForcedMigration_Tmp5 which = PREV }
				change_key = { lhs = ForcedMigration_Tmp7 value = 1 }
			}
		}
		divide_key = { lhs = ForcedMigration_Tmp5 which = ForcedMigration_Tmp7 } # Autonomy multiplier

		if = { 
			limit = { check_key = { lhs = ForcedMigration_Tmp5 value = 1.5 } }
			set_key = { lhs = ForcedMigration_Tmp5 value = 1.5 }
		}
		else_if = {
			limit = { NOT = { check_key = { lhs = ForcedMigration_Tmp5 value = 0.75 } } }
			set_key = { lhs = ForcedMigration_Tmp5 value = 0.75 }
		}

		## Get State Reach modifier [0.75,1.5]
		#      State Reach + 30
		#  --------------------------
		#     1.5 * State Reach 
		set_key = { lhs = ForcedMigration_Tmp6 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp7 value = 0 }
		every_province = {
			limit = {
				OR = {
					has_province_flag = ForcedMigration_From 
					has_province_flag = ForcedMigration_To
				}
			}

			set_key = { lhs = ForcedMigration_Tmp6 which = Prov_BUPow }
			set_key = { lhs = ForcedMigration_Tmp7 which = Prov_BUPow }
			change_key = { lhs = ForcedMigration_Tmp6 value = 30 }
			multiply_key = { lhs = ForcedMigration_Tmp7 value = 1.5 }
			divide_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp7 }

			ROOT = {
				change_key = { lhs = ForcedMigration_Tmp6 which = PREV }
				change_key = { lhs = ForcedMigration_Tmp7 value = 1 }
			}
		}
		divide_key = { lhs = ForcedMigration_Tmp6 which = ForcedMigration_Tmp7 } # State Reach modifier

		if = { 
			limit = { check_key = { lhs = ForcedMigration_Tmp6 value = 1.5 } }
			set_key = { lhs = ForcedMigration_Tmp6 value = 1.5 }
		}
		else_if = {
			limit = { NOT = { check_key = { lhs = ForcedMigration_Tmp5 value = 0.75 } } }
			set_key = { lhs = ForcedMigration_Tmp6 value = 0.75 }
		}

		## Get cultural and religious differences modifier
		set_key = { lhs = ForcedMigration_Tmp7 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp8 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp9 value = 0 }
		every_province = {
			limit = {
				OR = {
					has_province_flag = ForcedMigration_From 
					has_province_flag = ForcedMigration_To
				}
			}

			if = {
				limit = { has_owner_culture = yes }

				set_key = { lhs = ForcedMigration_Tmp7 value = 1.0 }
			}
			else_if = {
				limit = { has_owner_accepted_culture = yes }

				set_key = { lhs = ForcedMigration_Tmp7 value = 1.25 }
			}
			else = {
				set_key = { lhs = ForcedMigration_Tmp7 value = 2.0 } # not accepted or primary culture
			}

			if = { 
				limit = { has_owner_religion = yes }
				set_key = { lhs = ForcedMigration_Tmp8 value = 1.0 }
			}
			else = {
				set_key = { lhs = ForcedMigration_Tmp8 value = 1.5 }
			}

			ROOT = {
				change_key = { lhs = ForcedMigration_Tmp7 which = PREV }
				change_key = { lhs = ForcedMigration_Tmp8 which = PREV }
				change_key = { lhs = ForcedMigration_Tmp9 value = 1 }
			}
		}
		divide_key = { lhs = ForcedMigration_Tmp7 which = ForcedMigration_Tmp9 } # cultural modifier
		divide_key = { lhs = ForcedMigration_Tmp8 which = ForcedMigration_Tmp9 } # religious modifier

		### Calculate Modifiers of % change of pops in provinces
		#           average % taken of province
		#  0.975 + ----------------------------
		#                       0.15
		set_key = { lhs = ForcedMigration_Tmp10 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp11 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp12 value = 0 }

		if = {
			limit = {
				has_country_flag = ForcedMigration_Abs # For absolute input multiply amount of provinces with taken input
			}
			every_province = {
				limit = {
					has_province_flag = ForcedMigration_From
				}
				
				set_key = { lhs = ForcedMigration_Inp which = ROOT }
				set_key = { lhs = ForcedMigration_Tmp10 which = ForcedMigration_Inp }

				if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassSF }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = SF_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassNM }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = NM_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassRE }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = RE_Total }
				}
				if = {
					limit = {
						check_key = { lhs = ForcedMigration_Tmp11 value = 0.001 }
					}
					set_key = { lhs = ForcedMigration_Tmp10 value = 0 }
				}
				else = {
					divide_key = { lhs = ForcedMigration_Tmp10 which = ForcedMigration_Tmp11 }
				}
				

				set_key = { lhs = ForcedMigration_Tmp11 which = ForcedMigration_Inp }

				ROOT = { 
					change_key = { lhs = ForcedMigration_Tmp10 which = PREV }
					change_key = { lhs = ForcedMigration_Tmp11 which = PREV }
					change_key = { lhs = ForcedMigration_Tmp12 value = 1 }					
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_Prop # For proportional input sum up multiplication of input per province
			}
			every_province = {
				limit = {
					has_province_flag = ForcedMigration_From
				}
				set_key = { lhs = ForcedMigration_Inp which = ROOT }

				if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassSF }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = SF_Total }
					set_key = { lhs = ForcedMigration_Tmp10 which = SF_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassNM }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = NM_Total }
					set_key = { lhs = ForcedMigration_Tmp10 which = NM_Total }
				}
				else_if = {
					limit = {
						owner = { has_country_flag = ForcedMigration_FromClassRE }
					}
					set_key = { lhs = ForcedMigration_Tmp11 which = RE_Total }
					set_key = { lhs = ForcedMigration_Tmp10 which = RE_Total }
				}
				multiply_key = { lhs = ForcedMigration_Tmp10 which = ForcedMigration_Inp }
				
				if = {
					limit = {
						check_key = { lhs = ForcedMigration_Tmp11 value 0.001 }
					}
					set_key = { lhs = ForcedMigration_Tmp10 value = 0 }
				}
				else = {
					divide_key = { lhs = ForcedMigration_Tmp10 which = ForcedMigration_Tmp11 }
				}

				ROOT = {
					change_key = { lhs = ForcedMigration_Tmp10 which = PREV }
					change_key = { lhs = ForcedMigration_Tmp11 which = PREV }					
					change_key = { lhs = ForcedMigration_Tmp12 value = 1 }					
				}
			}
		}
		divide_key = { lhs = ForcedMigration_Tmp10 which = ForcedMigration_Tmp12 }
		divide_key = { lhs = ForcedMigration_Tmp10 value = 0.15 }
		change_key = { lhs = ForcedMigration_Tmp10 value = 0.95 }
		if = { 
			limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 5 } }
			set_key = { lhs = ForcedMigration_Tmp10 value = 5 }
		}
		else_if = {
			limit = { NOT = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.975 } } }
			set_key = { lhs = ForcedMigration_Tmp10 value = 0.975 }
		}


		#### Calculate final costs and hardcoded multipliers
		## Calculate Base Costs
		if = {
			limit = { has_country_flag = ForcedMigration_FromClassSF }
			multiply_key = { lhs = ForcedMigration_Tmp1 value = 3 } # Base 3 Ducats per 1k pops
			multiply_key = { lhs = ForcedMigration_Tmp2 value = 0.8 } # Base 1 MP per 1k pops
		}
		else_if = {
			limit = { has_country_flag = ForcedMigration_FromClassNM }
			multiply_key = { lhs = ForcedMigration_Tmp1 value = 4 } # Base 4 Ducats per 1k pops
			multiply_key = { lhs = ForcedMigration_Tmp2 value = 1.3 } # Base 1.5 MP per 1k pops
		}
		else_if = {
			limit = { has_country_flag = ForcedMigration_FromClassRE }
			multiply_key = { lhs = ForcedMigration_Tmp1 value = 5 } # Base 5 Ducats per 1k pops
			multiply_key = { lhs = ForcedMigration_Tmp2 value = 1.8 } # Base 2 MP per 1k pops
		}

		## Apply Ducat Cost multipliers
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp3 } # distance multiplier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp4 } # peasant freedom multiplier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp5 } # local autonomy multiplier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp6 } # state reach multiplier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp7 } # cultural modifier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp8 } # religious modifier
		multiply_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp10 } # relative % modifier

		## Apply Power Cost multipliers
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp3 } # distance multiplier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp4 } # peasant freedom multiplier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp5 } # local autonomy multiplier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp6 } # state reach multiplier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp7 } # cultural modifier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp8 } # religious modifier
		multiply_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp10 } # relative % modifier

		### Store Cultural Settlers in display key
		set_key = { lhs = ForcedMigration_Tmp9 which = Public_Tmp0 }

		### Get current country values
		export_to_key = {
			lhs = Public_Tmp0
			value = treasury
		}
		export_to_key = {
			lhs = Public_Tmp1
			value = trigger_value:mil_power
		}
	}
}

ForcedMigration_Execute = {
	if = {
		limit = {
			has_country_flag = ForcedMigration_Prop
		}
		if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassSF
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = SF
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassNM
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = SF
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = SF
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassNM
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassNM
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = NM
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = NM
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = NM
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassRE
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = RE
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = RE
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassNM
				}
				Public_PopMovementClass_GroupToGroup_Prop = {
					classFrom = RE
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
	}
	else_if = {
		limit = {
			has_country_flag = ForcedMigration_Abs
		}
		if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassSF
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = SF
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = SF
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassNM
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = SF
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassNM
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassNM
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = NM
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = NM
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = NM
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = ForcedMigration_FromClassRE
			}
			if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = RE
					classTo = RE
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassSF
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = RE
					classTo = SF
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
			else_if = {
				limit = {
					has_country_flag = ForcedMigration_ToClassRE
				}
				Public_PopMovementClass_GroupToGroup_Absolute = {
					classFrom = RE
					classTo = NM
					type = which
					inp = ForcedMigration_Inp
					wealth = no
					wealth_type = value
					wealth_inp = 0
					from_flag = ForcedMigration_From
					to_flag = ForcedMigration_To
					culture_change = yes
					culture_strength = 2
				}
			}
		}
	}
	
	hidden_effect = {
		# Round values to 1 point/ducat
		divide_key = { lhs = ForcedMigration_Tmp1 value = 1000 }
		divide_key = { lhs = ForcedMigration_Tmp2 value = 1000 }
		multiply_key = { lhs = ForcedMigration_Tmp1 value = 1000 }
		multiply_key = { lhs = ForcedMigration_Tmp2 value = 1000 }

		## Deduct Money and mana
		scaled_GameCurrency_change = { 
			type = treasury
			variable = ForcedMigration_Tmp1
			invert = yes
		}
		scaled_GameCurrency_change = { 
			type = mil_power
			variable = ForcedMigration_Tmp2
			invert = yes
		}

		add_country_modifier = {
			name = ForcedMigration_Cooldown
			duration = 1825
			hidden = yes
		}

		## Apply negative malus based on how much pops have been moved relative to countries total population
		every_owned_province = {
			set_key = { lhs = ForcedMigration_Tmp13 which = Class_Total }
			ROOT = {
				change_key = { lhs = ForcedMigration_Tmp13 which = PREV }
			}
		}

		set_key = { lhs = ForcedMigration_Tmp12 which = ForcedMigration_Tmp11 }
		divide_key = { lhs = ForcedMigration_Tmp11 which = ForcedMigration_Tmp13 }
		
		
		if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.5 } }

			add_country_modifier = { name = ForcedMigration_Severity_0.5 duration = 1825 }
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.4 } }

			add_country_modifier = { name = ForcedMigration_Severity_0.4 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.3 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.3 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.2 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.2 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.1 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.1 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.075 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.075 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.05 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.05 duration = 1825 }		
		}
		else_if = {
			limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.025 } }
			
			add_country_modifier = { name = ForcedMigration_Severity_0.025 duration = 1825 }		
		}
		else = {
			add_country_modifier = { name = ForcedMigration_Severity_0.0 duration = 3650 }		
		}

		# Get moved pops per province
		set_key = { lhs = ForcedMigration_Tmp11 which = ForcedMigration_Tmp12 }
		set_key = { lhs = ForcedMigration_Tmp12 value = 0 }
		every_province = {
			limit = {
				has_province_flag = ForcedMigration_To
			}

			ROOT = { 
				change_key = { lhs = ForcedMigration_Tmp12 value = 1 }
			}
		}

		divide_key = { lhs = ForcedMigration_Tmp11 which = ForcedMigration_Tmp12 }
	
		every_province = {
			limit = {
				has_province_flag = ForcedMigration_From
			}
			if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.5 } }

				add_province_modifier = { name = ForcedMigration_Severity_Local_0.5 duration = 3650 }
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.4 } }

				add_province_modifier = { name = ForcedMigration_Severity_Local_0.4 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.3 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.3 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.2 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.2 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.1 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.1 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.075 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.075 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.05 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.05 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp10 value = 0.025 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.025 duration = 3650 }		
			}
			else = {
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.0 duration = 3650 }		
			}
		}

		every_province = {
			limit = {
				has_province_flag = ForcedMigration_To
			}

			hidden_effect = {
				set_key = { lhs = ForcedMigration_Tmp11 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp11 which = Class_Total }
			}

			if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.5 } }

				add_province_modifier = { name = ForcedMigration_Severity_Local_0.5 duration = 3650 }
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.4 } }

				add_province_modifier = { name = ForcedMigration_Severity_Local_0.4 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.3 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.3 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.2 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.2 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.1 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.1 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.075 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.075 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.05 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.05 duration = 3650 }		
			}
			else_if = {
				limit = { check_key = { lhs = ForcedMigration_Tmp11 value = 0.025 } }
				
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.025 duration = 3650 }		
			}
			else = {
				add_province_modifier = { name = ForcedMigration_Severity_Local_0.0 duration = 3650 }		
			}
		}
	}

	hidden_effect = {
		### Distribute Wealth over the provinces
		# Get 1/3 of the movement cost for from provinces
		divide_key = { lhs = ForcedMigration_Tmp1 value = 3 } 
		# get 2/3 of the costs for To provinces
		set_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp1 }
		multiply_key = { lhs = ForcedMigration_Tmp2 value = 2 }

		set_key = { lhs = ForcedMigration_Tmp3 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp4 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp4 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp4 value = 0 }

		# Count amount of from provinces
		every_province = { 
			limit = {
				has_province_flag = ForcedMigration_From
			}
			ROOT = { change_key = { lhs = ForcedMigration_Tmp3 value = 1 } }
		}

		# Count amount of to provinces
		every_province = {
			limit = {
				has_province_flag = ForcedMigration_To
			}
			ROOT = { change_key = { lhs = ForcedMigration_Tmp4 value = 1 } }
		}

		divide_key = { lhs = ForcedMigration_Tmp1 which = ForcedMigration_Tmp3 } # get 1/3 of cost / Amount of from provinces
		divide_key = { lhs = ForcedMigration_Tmp2 which = ForcedMigration_Tmp4 } # get 2/3 of cost / Amount of To provinces

		# Add movement money to local investment of to and from province
		if = {
			limit = { # Moved Peasants
				has_country_flag = ForcedMigration_ToClassSF 
			} 

			every_province = {
				limit = { has_province_flag = ForcedMigration_From } # Investment and wealth in from provinces

				set_key = { lhs = ForcedMigration_Tmp1 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp1 value = 3 }

				change_key = { lhs = SF_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into class wealth pool
				
				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = Building_AgricultureWealth which = ForcedMigration_Tmp1 } 
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_AgricultureShareBU which = Tmp_0 }
			}

			every_province = {
				limit = { has_province_flag = ForcedMigration_To } # Investment and wealth in to provinces

				set_key = { lhs = ForcedMigration_Tmp2 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp2 value = 3 }

				change_key = { lhs = SF_Wealth which = ForcedMigration_Tmp2 } # 1/3 wealth into class wealth pool

				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp2 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = Building_AgricultureWealth which = ForcedMigration_Tmp2 } 
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_AgricultureShareBU which = Tmp_0 }
			}			
		}
		else_if = {
			limit = { has_country_flag = ForcedMigration_ToClassNM } # Moved Nomads

			every_province = {
				limit = { has_province_flag = ForcedMigration_From }

				set_key = { lhs = ForcedMigration_Tmp1 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp1 value = 3 }

				change_key = { lhs = NM_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into class wealth pool

				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = Building_AgricultureWealth which = ForcedMigration_Tmp1 }
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_AgricultureShareBU which = Tmp_0 }
			}

			every_province = {
				limit = {
					has_province_flag = ForcedMigration_To
				}
				set_key = { lhs = ForcedMigration_Tmp2 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp2 value = 3 }

				change_key = { lhs = NM_Wealth which = ForcedMigration_Tmp2 } # 1/3 wealth into class wealth pool

				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp2 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = Building_AgricultureWealth which = ForcedMigration_Tmp2 }
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_AgricultureShareBU which = Tmp_0 }
			}			
		}
		else_if = {
			limit = { 
				has_country_flag = ForcedMigration_ToClassRE
			 } 

			every_province = {
				limit = { has_province_flag = ForcedMigration_From }

				set_key = { lhs = ForcedMigration_Tmp1 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp1 value = 3 } # 1/3 wealth into class wealth pool

				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = RE_Wealth which = ForcedMigration_Tmp1 }

				change_key = { lhs = Building_IndustrialWealth which = ForcedMigration_Tmp1 }
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_IndustrialShareBU which = Tmp_0 }
			}

			every_province = {
				limit = {
					has_province_flag = ForcedMigration_To
				}
				set_key = { lhs = ForcedMigration_Tmp2 which = ROOT }
				divide_key = { lhs = ForcedMigration_Tmp2 value = 3 }

				change_key = { lhs = RE_Wealth which = ForcedMigration_Tmp2 } # 1/3 wealth into class wealth pool

				change_key = { lhs = Infra_Wealth which = ForcedMigration_Tmp1 } # 1/3 wealth into infrastructure wealth pool

				# 1/3 wealth into industry investment pool
				change_key = { lhs = Building_IndustrialWealth which = ForcedMigration_Tmp2 }
				
				set_key = { lhs = Tmp_0 value = 100 }
				subtract_key = { lhs = Tmp_0 which = Prov_BULoy }
				multiply_key = { lhs = Tmp_0 which = Prov_BUPow }
				divide_key = { lhs = Tmp_0 value = 10000 }
				change_key = { lhs = Building_IndustrialShareBU which = Tmp_0 }
			}
		}
	}
}

ForcedMigration_Cleanup = {
	hidden_effect = {
		set_key = { lhs = ForcedMigration_Inp value = 0 }
		set_key = { lhs = PublicHelper_Tmp1 value = 0 }
		set_key = { lhs = PublicHelper_Tmp2 value = 0 }
		set_key = { lhs = PublicHelper_Tmp3 value = 0 }
		set_key = { lhs = PublicHelper_Tmp4 value = 0 }

		set_key = { lhs = ForcedMigration_Tmp0 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp1 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp2 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp3 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp4 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp5 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp6 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp7 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp8 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp9 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp10 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp11 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp12 value = 0 }
		set_key = { lhs = ForcedMigration_Tmp13 value = 0 }

		clr_country_flag = ForcedMigration_Prop
		clr_country_flag = ForcedMigration_Abs
		clr_country_flag = ForcedMigration_FromClassSF
		clr_country_flag = ForcedMigration_FromClassNM
		clr_country_flag = ForcedMigration_FromClassRE
		clr_country_flag = ForcedMigration_ToClassSF
		clr_country_flag = ForcedMigration_ToClassNM
		clr_country_flag = ForcedMigration_ToClassRE
		clr_country_flag = ForcedMigration_ScopesSetup
		clr_country_flag = ForcedMigration_InpSetup

		every_province = {
			set_key = { lhs = PublicHelper_Tmp1 value = 0 }
			set_key = { lhs = PublicHelper_Tmp2 value = 0 }
			set_key = { lhs = PublicHelper_Tmp3 value = 0 }
			set_key = { lhs = PublicHelper_Tmp4 value = 0 }

			set_key = { lhs = ForcedMigration_Tmp0 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp1 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp2 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp3 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp4 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp5 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp6 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp7 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp8 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp9 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp10 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp11 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp12 value = 0 }
			set_key = { lhs = ForcedMigration_Tmp13 value = 0 }

			clr_province_flag = ForcedMigration_From
			clr_province_flag = ForcedMigration_To
		}
	}
}