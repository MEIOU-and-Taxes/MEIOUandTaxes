Ruler_AuthRulerFactors = {
	set_key = { lhs = Ruler_AuthRulerRest value = 0 } # Needs actual reform and stuff
	change_key = { lhs = Ruler_AuthRulerRest which = Modi_RulerPower }
	
	set_key = { lhs = Tmp_0 value = 150 }
	subtract_key = { lhs = Tmp_0 which = Ruler_AuthInstitution }
	divide_key = { lhs = Tmp_0 value = 1.5 }
	
	if = {
		limit = {
			check_key = { lhs = Ruler_AuthRulerRest which = Tmp_0 }
		}
		set_key = { lhs = Ruler_AuthRulerRest which = Tmp_0 }
	}
}
Ruler_AuthInstitutionFactors = {
	set_key = { lhs = Ruler_AuthInstitutionRest value = 0 } # Needs actual reform and stuff
	change_key = { lhs = Ruler_AuthInstitutionRest which = Modi_InstitutionalPower }
	
	set_key = { lhs = Tmp_0 value = 150 } 
	subtract_key = { lhs = Tmp_0 which = Ruler_AuthRuler }
	divide_key = { lhs = Tmp_0 value = 1.5 }
	
	if = {
		limit = {
			check_key = { lhs = Ruler_AuthInstitutionRest which = Tmp_0 }
		}
		set_key = { lhs = Ruler_AuthInstitutionRest which = Tmp_0 }
	}
}

Ruler_RestingPointCalc = {
	set_key = { lhs = $var$Rest value = 0 } # Needs actual reform and stuff
	$var$Factors = yes
	
	if = {
		limit = {
			has_global_flag = POP_Sim
		}
		set_key = { lhs = $var$ which = $var$Rest }
	}
	else = {
		set_key = { lhs = $var$Change which = $var$Rest }
		subtract_key = { lhs = $var$Change which = $var$ }
		multiply_key = { lhs = $var$Change value = 0.1 } # Takes 10 years to adjust

		change_key = { lhs = $var$ which = $var$Change }

		if = {
			limit = {
				check_key = { lhs = $var$ value = 100 }
			}
			set_key = { lhs = $var$ value = 100 }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = $var$ value = 0 } }
			}
			set_key = { lhs = $var$ value = 0 }
		}
	}
}

Ruler_Get = {    
	# Monarch adm/dip/mil summed
	set_key = { lhs = Ruler_SkillADM value = 0 }
	trigger_switch = {
		on_trigger = adm
		6 = { set_key = { lhs = Ruler_SkillADM value = 6 } }
		5 = { set_key = { lhs = Ruler_SkillADM value = 5 } }
		4 = { set_key = { lhs = Ruler_SkillADM value = 4 } }
		3 = { set_key = { lhs = Ruler_SkillADM value = 3 } }
		2 = { set_key = { lhs = Ruler_SkillADM value = 2 } }
		1 = { set_key = { lhs = Ruler_SkillADM value = 1 } }
	}
	
	set_key = { lhs = Ruler_SkillDIP value = 0 }
	trigger_switch = {
		on_trigger = dip
		6 = { set_key = { lhs = Ruler_SkillDIP value = 6 } }
		5 = { set_key = { lhs = Ruler_SkillDIP value = 5 } }
		4 = { set_key = { lhs = Ruler_SkillDIP value = 4 } }
		3 = { set_key = { lhs = Ruler_SkillDIP value = 3 } }
		2 = { set_key = { lhs = Ruler_SkillDIP value = 2 } }
		1 = { set_key = { lhs = Ruler_SkillDIP value = 1 } }
	}
	
	set_key = { lhs = Ruler_SkillMIL value = 0 }
	trigger_switch = {
		on_trigger = mil
		6 = { set_key = { lhs = Ruler_SkillMIL value = 6 } }
		5 = { set_key = { lhs = Ruler_SkillMIL value = 5 } }
		4 = { set_key = { lhs = Ruler_SkillMIL value = 4 } }
		3 = { set_key = { lhs = Ruler_SkillMIL value = 3 } }
		2 = { set_key = { lhs = Ruler_SkillMIL value = 2 } }
		1 = { set_key = { lhs = Ruler_SkillMIL value = 1 } }
	}
	Ruler_RefreshSkill = yes
}
Ruler_RefreshSkill = {
	set_key = { lhs = Ruler_Skill value = 0 }
	change_key = { lhs = Ruler_Skill which = Ruler_SkillADM }
	change_key = { lhs = Ruler_Skill which = Ruler_SkillDIP }
	change_key = { lhs = Ruler_Skill which = Ruler_SkillMIL }
}
Ruler_Set = {
	set_key = { lhs = Tmp_0 value = 0 }
	trigger_switch = {
		on_trigger = adm
		6 = { set_key = { lhs = Tmp_0 value = 6 } }
		5 = { set_key = { lhs = Tmp_0 value = 5 } }
		4 = { set_key = { lhs = Tmp_0 value = 4 } }
		3 = { set_key = { lhs = Tmp_0 value = 3 } }
		2 = { set_key = { lhs = Tmp_0 value = 2 } }
		1 = { set_key = { lhs = Tmp_0 value = 1 } }
	}
	
	set_key = { lhs = Tmp_1 value = 0 }
	trigger_switch = {
		on_trigger = dip
		6 = { set_key = { lhs = Tmp_1 value = 6 } }
		5 = { set_key = { lhs = Tmp_1 value = 5 } }
		4 = { set_key = { lhs = Tmp_1 value = 4 } }
		3 = { set_key = { lhs = Tmp_1 value = 3 } }
		2 = { set_key = { lhs = Tmp_1 value = 2 } }
		1 = { set_key = { lhs = Tmp_1 value = 1 } }
	}
	
	set_key = { lhs = Tmp_2 value = 0 }
	trigger_switch = {
		on_trigger = mil
		6 = { set_key = { lhs = Tmp_2 value = 6 } }
		5 = { set_key = { lhs = Tmp_2 value = 5 } }
		4 = { set_key = { lhs = Tmp_2 value = 4 } }
		3 = { set_key = { lhs = Tmp_2 value = 3 } }
		2 = { set_key = { lhs = Tmp_2 value = 2 } }
		1 = { set_key = { lhs = Tmp_2 value = 1 } }
	}
	subtract_key = { lhs = Tmp_0 which = Ruler_ADM }
	subtract_key = { lhs = Tmp_1 which = Ruler_DIP }
	subtract_key = { lhs = Tmp_2 which = Ruler_MIL }
	
	multiply_key = { lhs = Tmp_0 value = -1 }
	multiply_key = { lhs = Tmp_1 value = -1 }
	multiply_key = { lhs = Tmp_2 value = -1 }

	Ruler_SetHelper = { tmp=Tmp_0 type=ADM }
	Ruler_SetHelper = { tmp=Tmp_1 type=DIP }
	Ruler_SetHelper = { tmp=Tmp_2 type=MIL }
}
Ruler_SetHelper = {
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 6 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_6 } }
			add_country_modifier = { name = Ruler_$type$_6 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_6 }
		remove_country_modifier = Ruler_$type$_6
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 5 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_5 } }
			add_country_modifier = { name = Ruler_$type$_5 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_5 }
		remove_country_modifier = Ruler_$type$_5
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 4 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_4 } }
			add_country_modifier = { name = Ruler_$type$_4 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_4 }
		remove_country_modifier = Ruler_$type$_4
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 3 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_3 } }
			add_country_modifier = { name = Ruler_$type$_3 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_3 }
		remove_country_modifier = Ruler_$type$_3
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 2 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_2 } }
			add_country_modifier = { name = Ruler_$type$_2 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_2 }
		remove_country_modifier = Ruler_$type$_2
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = 1 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_1 } }
			add_country_modifier = { name = Ruler_$type$_1 duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_1 }
		remove_country_modifier = Ruler_$type$_1
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -6 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_6_neg } }
			add_country_modifier = { name = Ruler_$type$_6_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_6_neg }
		remove_country_modifier = Ruler_$type$_6_neg
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -5 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_5_neg } }
			add_country_modifier = { name = Ruler_$type$_5_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_5_neg }
		remove_country_modifier = Ruler_$type$_5_neg
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -4 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_4_neg } }
			add_country_modifier = { name = Ruler_$type$_4_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_4_neg }
		remove_country_modifier = Ruler_$type$_4_neg
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -3 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_3_neg } }
			add_country_modifier = { name = Ruler_$type$_3_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_3_neg }
		remove_country_modifier = Ruler_$type$_3_neg
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -2 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_2_neg } }
			add_country_modifier = { name = Ruler_$type$_2_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_2_neg }
		remove_country_modifier = Ruler_$type$_2_neg
	}
	if = {
		limit = { is_key_equal = { lhs = $tmp$ value = -1 } }
		if = {
			limit = { NOT = { has_country_modifier = Ruler_$type$_1_neg } }
			add_country_modifier = { name = Ruler_$type$_1_neg duration = -1 hidden = yes }
		}
	}
	else_if = {
		limit = { has_country_modifier = Ruler_$type$_1_neg }
		remove_country_modifier = Ruler_$type$_1_neg
	}
}

Ruler_Rounder = {
	# Round it off
	set_key = { lhs = Public_Tmp1 which = $var$ }
	multiply_key = { lhs = Public_Tmp1 value = 0.001 }
	multiply_key = { lhs = Public_Tmp1 value = 1000 }
	set_key = { lhs = Public_Tmp2 which = $var$ }
	subtract_key = { lhs = Public_Tmp2 which = Public_Tmp1 }
	
	set_key = { lhs = $var$ which = Public_Tmp1 }
	if = {
		limit = {
			check_key = { lhs = Public_Tmp2 value = 0.5 }
		}
		change_key = { lhs = $var$ value = 1 }
	}
}

Ruler_Calc = {
	# Update resting points
	Ruler_RestingPointCalc = { var=Ruler_AuthRuler }
	Ruler_RestingPointCalc = { var=Ruler_AuthInstitution }
	Ruler_Get = yes

	# Add up the monarchs power
	# Maximum monarch power is '18', used throughout the code
	# Algorithm for monarch power:	(((18 - ((18 * Limiters) * (0.5 + (Absolutism / 2)))) / 2) + ((MonarchAdmDipMil * Limiters) * (0.5 + (Absolutism / 2)))) / 18
	# Algorithm for monarch power:	(Ruler_AuthInstitution + (MonarchAdmDipMil * Limiters)) / 18 (current implementation)
	# 								
	set_key = { lhs = Ruler_Power value = 0 }
	
	# Caluclate the limitations of the monarch's power
	# Limiters
	set_key = { lhs = Ruler_Impact which = Ruler_AuthRuler }
	if = {
		limit = {
			check_key = { lhs = Ruler_Impact value = 100 }
		}
		set_key = { lhs = Ruler_Impact value = 100 }
	}


	set_key = { lhs = Ruler_ADM which = Ruler_SkillADM }
	set_key = { lhs = Ruler_DIP which = Ruler_SkillDIP }
	set_key = { lhs = Ruler_MIL which = Ruler_SkillMIL }

	multiply_key = { lhs = Ruler_ADM which = Ruler_Impact }
	multiply_key = { lhs = Ruler_DIP which = Ruler_Impact }
	multiply_key = { lhs = Ruler_MIL which = Ruler_Impact }

	multiply_key = { lhs = Ruler_ADM value = 0.01 }
	multiply_key = { lhs = Ruler_DIP value = 0.01 }
	multiply_key = { lhs = Ruler_MIL value = 0.01 }

	set_key = { lhs = Tmp_1 value = 4 }
	multiply_key = { lhs = Tmp_1 which = Ruler_AuthInstitution }
	multiply_key = { lhs = Tmp_1 value = 0.01 }

	# Institution Stat
	change_key = { lhs = Ruler_ADM which = Tmp_1 }
	# Institution Stat
	change_key = { lhs = Ruler_DIP which = Tmp_1 }
	# Institution Stat
	change_key = { lhs = Ruler_MIL which = Tmp_1 }

	Ruler_Rounder = { var=Ruler_ADM }
	Ruler_Rounder = { var=Ruler_DIP }
	Ruler_Rounder = { var=Ruler_MIL }

	set_key = { lhs = Ruler_Power which = Ruler_ADM }
	change_key = { lhs = Ruler_Power which = Ruler_DIP }
	change_key = { lhs = Ruler_Power which = Ruler_MIL }
	
	set_key = { lhs = Ruler_SkillScaled which = Ruler_Power }
	
	divide_key = { lhs = Ruler_Power value = 18 }

	if = {
		limit = {
			check_key = { lhs = Ruler_Power value = 1 }
		}
		set_key = { lhs = Ruler_Power value = 1 }
	}

	Ruler_Set = yes

	set_key = { lhs = Ruler_CrptImpact value = 1 }
	subtract_key = { lhs = Ruler_CrptImpact which = Ruler_Power }
	multiply_key = { lhs = Ruler_CrptImpact which = Ruler_CrptImpact }
	multiply_key = { lhs = Ruler_CrptImpact value = 100 }
	
	multiply_key = { lhs = Ruler_Power value = 100 }
	
	set_key = { lhs = Tmp_0 value = 0 }
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_2 value = 0 }
}

Ruler_SetSkill = {
	# Figure out the share of ADM/DIP/MIL in total skill
	if = {
		limit = {
			check_key = { lhs = Ruler_Skill value = 0.001 }
		}
		if = {
			limit = {
				check_key = { lhs = Ruler_SkillADM value = 0.001 }
			}
			set_key = { lhs = Tmp_0 which = Ruler_SkillADM }
			divide_key = { lhs = Tmp_0 which = Ruler_Skill }
		}
		else = {
			set_key = { lhs = Tmp_0 value = 0 }
		}
		if = {
			limit = {
				check_key = { lhs = Ruler_SkillDIP value = 0.001 }
			}
			set_key = { lhs = Tmp_1 which = Ruler_SkillDIP }
			divide_key = { lhs = Tmp_1 which = Ruler_Skill }
		}
		else = {
			set_key = { lhs = Tmp_1 value = 0 }
		}
		if = {
			limit = {
				check_key = { lhs = Ruler_SkillMIL value = 0.001 }
			}
			set_key = { lhs = Tmp_2 which = Ruler_SkillMIL }
			divide_key = { lhs = Tmp_2 which = Ruler_Skill }
		}
		else = {
			set_key = { lhs = Tmp_2 value = 0 }
		}
		set_key = { lhs = Tmp_4 value = 1 }
		subtract_key = { lhs = Tmp_4 which = Tmp_0 }
		subtract_key = { lhs = Tmp_4 which = Tmp_1 }
		subtract_key = { lhs = Tmp_4 which = Tmp_2 }
		if = {
			limit = {
				check_key = { lhs = Tmp_4 value = 0.001 }
			}
			change_key = { lhs = Tmp_0 which = Tmp_4 }
		}
	}
	else = {
		set_key = { lhs = Tmp_0 value = 0.34 }
		set_key = { lhs = Tmp_1 value = 0.33 }
		set_key = { lhs = Tmp_2 value = 0.33 }
	}
	# Ruler_SkillScaled is the raw skill save
	set_key = { lhs = Ruler_ADM which = Ruler_SkillScaled }
	set_key = { lhs = Ruler_DIP which = Ruler_SkillScaled }
	set_key = { lhs = Ruler_MIL which = Ruler_SkillScaled }
	multiply_key = { lhs = Ruler_ADM which = Tmp_0 }
	multiply_key = { lhs = Ruler_DIP which = Tmp_1 }
	multiply_key = { lhs = Ruler_MIL which = Tmp_2 }

	Ruler_Rounder = { var=Ruler_ADM }
	Ruler_Rounder = { var=Ruler_DIP }
	Ruler_Rounder = { var=Ruler_MIL }

	# 
	set_key = { lhs = Tmp_4 which = Ruler_SkillScaled }
	subtract_key = { lhs = Tmp_4 which = Ruler_ADM }
	subtract_key = { lhs = Tmp_4 which = Ruler_DIP }
	subtract_key = { lhs = Tmp_4 which = Ruler_MIL }

	# Continually assign the rest as needed
	while = {
		limit = {
			check_key = { lhs = Tmp_4 value = 1 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_4 value = 1 }
				NOT = { check_key = { lhs = Ruler_ADM value = 6 } }
				OR = {
					AND = {
						check_key = { lhs = Ruler_DIP which = Ruler_ADM }
						check_key = { lhs = Ruler_MIL which = Ruler_ADM }
					}
					AND = {
						is_key_equal = { lhs = Ruler_DIP which = Ruler_ADM }
						is_key_equal = { lhs = Ruler_MIL which = Ruler_ADM }
					}
				}
			}
			change_key = { lhs = Ruler_ADM value = 1 }
			subtract_key = { lhs = Tmp_4 value = 1 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_4 value = 1 }
				NOT = { check_key = { lhs = Ruler_DIP value = 6 } }
				check_key = { lhs = Ruler_ADM which = Ruler_DIP }
				check_key = { lhs = Ruler_MIL which = Ruler_DIP }
			}
			change_key = { lhs = Ruler_DIP value = 1 }
			subtract_key = { lhs = Tmp_4 value = 1 }
		}
		if = {
			limit = {
				check_key = { lhs = Tmp_4 value = 1 }
				NOT = { check_key = { lhs = Ruler_MIL value = 6 } }
				check_key = { lhs = Ruler_ADM which = Ruler_MIL }
				check_key = { lhs = Ruler_DIP which = Ruler_MIL }
			}
			change_key = { lhs = Ruler_MIL value = 1 }
			subtract_key = { lhs = Tmp_4 value = 1 }
		}
	}
	while = {
		limit = {
			NOT = { check_key = { lhs = Tmp_4 value = -0.999 } }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = Tmp_4 value = -0.999 } }
				check_key = { lhs = Ruler_MIL value = 1 }
				OR = {
					AND = {
						check_key = { lhs = Ruler_MIL which = Ruler_ADM }
						check_key = { lhs = Ruler_MIL which = Ruler_DIP }
					}
					AND = {
						is_key_equal = { lhs = Ruler_MIL which = Ruler_ADM }
						is_key_equal = { lhs = Ruler_MIL which = Ruler_DIP }
					}
				}
			}
			subtract_key = { lhs = Ruler_MIL value = 1 }
			change_key = { lhs = Tmp_4 value = 1 }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = Tmp_4 value = -0.999 } }
				check_key = { lhs = Ruler_DIP value = 1 }
				check_key = { lhs = Ruler_DIP which = Ruler_ADM }
				check_key = { lhs = Ruler_DIP which = Ruler_MIL }
			}
			subtract_key = { lhs = Ruler_DIP value = 1 }
			change_key = { lhs = Tmp_4 value = 1 }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = Tmp_4 value = -0.999 } }
				check_key = { lhs = Ruler_ADM value = 1 }
				check_key = { lhs = Ruler_ADM which = Ruler_DIP }
				check_key = { lhs = Ruler_ADM which = Ruler_MIL }
			}
			subtract_key = { lhs = Ruler_ADM value = 1 }
			change_key = { lhs = Tmp_4 value = 1 }
		}
	}
}
