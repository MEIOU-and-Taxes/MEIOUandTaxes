# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import pandas as pd
import codecs
import math

rights = pd.read_csv('RightsRaise.csv', index_col='Index', sep=';').dropna(how='all').replace({pd.np.nan:None}).to_dict(orient='index')
rights_lower = pd.read_csv('RightsLower.csv', index_col='Index', sep=';').dropna(how='all').replace({pd.np.nan:None}).to_dict(orient='index')
ui_matrix = pd.read_csv('RightsCrownlandButtonUI.csv', index_col='Index', sep=';').dropna(how='all').replace({pd.np.nan:None}).to_dict(orient='index')

file = codecs.open('common/estate_privileges/01_Rights.txt', 'w+', encoding='utf-8')
file2 = codecs.open('common/scripted_effects/SYS-RightsUIAssign.txt', 'w+', encoding='utf-8')
file3 = codecs.open('RightsList.txt', 'w+', encoding='utf-8')
file4 = codecs.open('localisation/SYS-Rights_UI_l_english.yml', 'w+', encoding='utf-8-sig')
file5 = codecs.open('common/estate_crown_land/01_UI_autogenerated.txt', 'w+', encoding='utf-8')

loc_input = codecs.open('localisation/SYS-Rights_l_english.yml', 'r', encoding='utf-8-sig')

base_loc = loc_input.readlines()

RightsP = ""
RightsList =""
RightsAssign = """
Rights_Assign = {
"""
RightsCrownlandButtons =""
RightsL = """l_english:
"""

for key in rights.keys():
	
	Right = rights[key]['Right']
	Codename = rights[key]['Codename']
	Ranks = int(rights[key]['Ranks'])
	Interactions = int(rights[key]['Interactions'])
	DefaultPosition = int(rights[key]['DefaultPosition'])
	Icon = rights[key]['Icon']

	index = 1

	for Rank in range(0,Ranks):
		if(DefaultPosition == 0):
			CurRank = Rank
		else:
			CurRank = Rank - DefaultPosition + 1
		RightsP += """
{Codename}{CodeRank} = {{
	icon = privilege_right_{CodeRank}
	land_share = 0
	max_absolutism = 0
	loyalty = 0
	influence = 0
	can_select = {{
		hidden_trigger = {{ ai = no }}
        is_key_equal = {{ lhs = {Codename} value = {ValueRank} }}
	}}
	on_granted = {{
	}}
	on_revoked = {{
		custom_tooltip = {Codename}{CodeRank}_description # Rank Description
		custom_tooltip = {Codename}{CodeRank}_effects # Main Effects
    }}
	penalties = {{
	}}
	benefits = {{
	}}
	ai_will_do = {{
		factor = 0
	}}
}}""".format(Codename=Codename,ValueRank=int(CurRank), CodeRank = Rank + 1, Icons=Icon)
		RightsList += """{Codename}{Rank}
""".format(Codename=Codename,Rank=Rank+1)

	## Create Localisation for Privilege Titles
	for Rank in range(0,Ranks):
		i = 0
		SearchGenTitle = ' ' + Codename + '_t'
		SearchNumTitle = ' ' + Codename + str(Rank+1) + '_t'
		for loc in base_loc:
			try:
				if loc.split(':')[0] == SearchGenTitle:
					index_gen_title = i
			except Exception:
				pass  # or you could use 'continue'
			
			try:
				if loc.split(':')[0] == SearchNumTitle:
					index_num_title = i
			except Exception:
				pass  # or you could use 'continue'
			i += 1
		
		if index_gen_title != -1:
			GenTitle = base_loc[index_gen_title].replace('\n', '').replace('\r', '')
			GenTitle = GenTitle.split(':')[1]
			GenTitle = GenTitle.split('"')[1] + GenTitle.split('"')[2]
		if index_num_title != -1:
			NumTitle = base_loc[index_num_title].replace('\n', '').replace('\r', '')
			NumTitle = NumTitle.split(':')[1]
			NumTitle = NumTitle.split('"')[1] + NumTitle.split('"')[2]
		RightsL += """ {Codename}{Rank}: "{NumTitle}\\n§G{GenTitle}§!"
 {Codename}{Rank}_mod: "§Y{GenTitle}: {NumTitle}§!"
 {Codename}{Rank}_desc: "[{Codename}_d]"
""".format(Codename=Codename,Rank=Rank+1, GenTitle = GenTitle, NumTitle = NumTitle)
	
	## Create Reset effects
	for Rank in range(0,Ranks):
		if(DefaultPosition == 0):
			CurRank = Rank
		else:
			CurRank = Rank - DefaultPosition + 1 
		RightsAssign += """	remove_estate_privilege = {Codename}{CodeRank}
""".format(Codename=Codename,ValueRank=int(CurRank), CodeRank = Rank + 1)

	## Create Assignment effects
	for Rank in range(0,Ranks):
		if(DefaultPosition == 0):
			CurRank = Rank
		else:
			CurRank = Rank - DefaultPosition + 1 
		if(Rank == 0):
			RightsAssign += """    if = {{
        limit = {{
            is_key_equal = {{ lhs = {Codename} value = {ValueRank} }}
        }}
        set_estate_privilege = {Codename}{CodeRank}
    }}
"""	.format(Codename=Codename,ValueRank=int(CurRank), CodeRank = Rank + 1)
		else:
			RightsAssign += """    else_if = {{
        limit = {{
            is_key_equal = {{ lhs = {Codename} value = {ValueRank} }}
        }}
		set_estate_privilege = {Codename}{CodeRank}
    }}
""".format(Codename=Codename,ValueRank=int(CurRank), CodeRank = Rank + 1)

RightsAssign += """}"""

# Create UP_DOWN Buttons
for i in ui_matrix.keys():
	
	Key = ui_matrix[i]['Key']
	Type = ui_matrix[i]['Type']
	if ui_matrix[i]['Event_ID'] != None:
		Event = "hidden_effect = { country_event = { id = "+ ui_matrix[i]['Event_ID'] +" } }"
	else:
		Event = ""
	if ui_matrix[i]['Effect'] != None:
		Effect = ui_matrix[i]['Effect']
	else:
		Effect = ""

	if ui_matrix[i]['Trigger'] != None:
		Trigger = ui_matrix[i]['Trigger']
	else:
		Trigger = ""
	if  ui_matrix[i]['HiddenTrigger']:
		HiddenTrigger = ui_matrix[i]['HiddenTrigger']
	else:
		HiddenTrigger = ""

	if ui_matrix[i]['Comment'] != None:
		Comment = '# ' + ui_matrix[i]['Comment']
	else:
		Comment = ""

	if ui_matrix[i]['Desc'] != None:
		Desc = 'custom_tooltip = ' + ui_matrix[i]['Desc']
	else:
		Desc = ""

	if ui_matrix[i]['Custom_Tooltip'] != None:
		Custom_Tooltip = 'custom_tooltip = ' + ui_matrix[i]['Custom_Tooltip']
	else:
		Custom_Tooltip = ""

	Cooldown = ui_matrix[i]['Cooldown']
	UD_Type = ui_matrix[i]['UD_Type']
	UD_Index = ui_matrix[i]['UD_Index']


	if Type == "Rights":
		Right = rights[UD_Index]['Right']
		Codename = rights[UD_Index]['Codename']
		Ranks = int(rights[UD_Index]['Ranks'])
		Interactions = int(rights[UD_Index]['Interactions'])
		DefaultPosition = int(rights[UD_Index]['DefaultPosition'])
		Mana_Ranks_Raise = rights[UD_Index]['Mana_Ranks'].split('|')
		Mana_Ranks_Lower = rights_lower[UD_Index]['Mana_Ranks'].split('|')
		
		effects_tmp = """if = {
			limit = {
				NOT = { stability = 1 }
				stability = -1
			}
        	custom_tooltip = Rights_LB
        	custom_tooltip = Rights_LowStab
			hidden_effect = {
				change_key = { lhs = NO_Mood value = -1 }
				change_key = { lhs = BG_Mood value = -1 }
				change_key = { lhs = CL_Mood value = -1 }
				change_key = { lhs = TR_Mood value = -1 }
			}
			custom_tooltip = NO_ReformMoodDispleased
			custom_tooltip = BG_ReformMoodDispleased
			custom_tooltip = CL_ReformMoodDispleased
			custom_tooltip = TR_ReformMoodDispleased
		}
		else_if = {
			limit = {
				NOT = { stability = -1 }
			}
        	custom_tooltip = Rights_LB
        	custom_tooltip = Rights_BadStab
			hidden_effect = {
				change_key = { lhs = NO_Mood value = -3 }
				change_key = { lhs = BG_Mood value = -3 }
				change_key = { lhs = CL_Mood value = -3 }
				change_key = { lhs = TR_Mood value = -3 }
			}
			custom_tooltip = NO_ReformMoodAngry
			custom_tooltip = BG_ReformMoodAngry
			custom_tooltip = CL_ReformMoodAngry
			custom_tooltip = TR_ReformMoodAngry
		}
		"""		
		index = 0
		for Rank in range(1,Ranks):
			if(DefaultPosition == 0):
				CurRank = Rank
			else:
				CurRank = Rank - DefaultPosition + 1

			if UD_Type == "Raise":
				CodeRank = Rank + 1
				if(int(Mana_Ranks_Raise[index].split(',')[0]) != 0):
					Adm_Pow_Trig = 'adm_power = ' + Mana_Ranks_Raise[index].split(',')[0]
					Adm_Pow_Eff = 'add_adm_power = -' + Mana_Ranks_Raise[index].split(',')[0]
				else:
					Adm_Pow_Trig = ''
					Adm_Pow_Eff = ''
				if(int(Mana_Ranks_Raise[index].split(',')[1]) != 0):
					Dip_Pow_Trig = 'dip_power = ' + Mana_Ranks_Raise[index].split(',')[1]
					Dip_Pow_Eff = 'add_dip_power = -' + Mana_Ranks_Raise[index].split(',')[1]
				else:
					Dip_Pow_Trig = ''
					Dip_Pow_Eff = ''
				if(int(Mana_Ranks_Raise[index].split(',')[2]) != 0):
					Mil_Pow_Trig = 'mil_power = ' + Mana_Ranks_Raise[index].split(',')[2]
					Mil_Pow_Eff = 'add_mil_power = -' + Mana_Ranks_Raise[index].split(',')[2]
				else:
					Mil_Pow_Trig = ''
					Mil_Pow_Eff = ''
			else:
				CodeRank = Rank
				if(int(Mana_Ranks_Raise[index].split(',')[0]) != 0):
					Adm_Pow_Trig = 'adm_power = ' + Mana_Ranks_Lower[index].split(',')[0]
					Adm_Pow_Eff = 'add_adm_power = -' + Mana_Ranks_Lower[index].split(',')[0]
				else:
					Adm_Pow_Trig = ''
					Adm_Pow_Eff = ''
				if(int(Mana_Ranks_Raise[index].split(',')[1]) != 0):
					Dip_Pow_Trig = 'dip_power = ' + Mana_Ranks_Lower[index].split(',')[1]
					Dip_Pow_Eff = 'add_dip_power = -' + Mana_Ranks_Lower[index].split(',')[1]
				else:
					Dip_Pow_Trig = ''
					Dip_Pow_Eff = ''
				if(int(Mana_Ranks_Raise[index].split(',')[2]) != 0):
					Mil_Pow_Trig = 'mil_power = ' + Mana_Ranks_Lower[index].split(',')[2]
					Mil_Pow_Eff = 'add_mil_power = -' + Mana_Ranks_Lower[index].split(',')[2]
				else:
					Mil_Pow_Trig = ''
					Mil_Pow_Eff = ''

			index += 1


			if Rank == 1:
				RightsL += ''' {Key}: ""
'''.format(Key = Key)
				trigger_tmp = """
		custom_trigger_tooltip = {{
			tooltip = Rights_ReformSelectionOngoing
			NOT = {{ has_country_flag = Rights_ReformSelectionOngoing }}
		}}
		custom_trigger_tooltip = {{
			tooltip = Reform_HighSeverity
			NOT = {{ check_key = {{ lhs = Rights_SeverityR value = 10.001 }} }}
		}}
		hidden_trigger = {{
			NOT = {{ has_country_modifier = Reform_CD }}
			if = {{
				limit = {{ {Codename}{Rank}{Interaction_Type}Potential = yes }}

				{Adm_Pow}
				{Dip_Pow}
				{Mil_Pow}
				custom_trigger_tooltip = {{
					tooltip = Rights_UI_MetReqs
					{Codename}{Rank}{Interaction_Type}Allow = yes
				}}
			}}
		""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type, Adm_Pow = Adm_Pow_Trig, Dip_Pow = Dip_Pow_Trig, Mil_Pow = Mil_Pow_Trig)
				effects_tmp2 = 	"""if = {{
			limit = {{ {Codename}{Rank}{Interaction_Type}Potential = yes }}
			{Codename}{Rank}{Interaction_Type}Reqs = yes
			custom_tooltip = Rights_LB
			custom_tooltip = {Codename}{Rank}{Interaction_Type}_description
			{Codename}{Rank}{Interaction_Type} = yes
			custom_tooltip = Rights_LB
			{Adm_Pow}
			{Dip_Pow}
			{Mil_Pow}
		}}""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type,  Adm_Pow = Adm_Pow_Eff, Dip_Pow = Dip_Pow_Eff, Mil_Pow = Mil_Pow_Eff)
				effects_tmp3 = """if = {{
			limit = {{
				has_country_modifier = Reform_CD
			}}
            custom_tooltip = Rights_ReformCD
		}}
		if = {{
			limit = {{
				{Codename}{Rank}{Interaction_Type}Potential = yes
				{Codename}{Rank}{Interaction_Type}Allow = yes
			}}
			custom_tooltip = Rights_UI_Success
		}}""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type)
			else:
				trigger_tmp += """
			else_if = {{
				limit = {{ {Codename}{Rank}{Interaction_Type}Potential = yes }}
			
				{Adm_Pow}
				{Dip_Pow}
				{Mil_Pow}
				custom_trigger_tooltip = {{
					tooltip = Rights_UI_MetReqs
					{Codename}{Rank}{Interaction_Type}Allow = yes
				}}
			}}""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type,  Adm_Pow = Adm_Pow_Trig, Dip_Pow = Dip_Pow_Trig, Mil_Pow = Mil_Pow_Trig)

				effects_tmp2 +=	"""
		else_if = {{
			limit = {{ {Codename}{Rank}{Interaction_Type}Potential = yes }}
			{Codename}{Rank}{Interaction_Type}Reqs = yes
			custom_tooltip = Rights_LB
			custom_tooltip = {Codename}{Rank}{Interaction_Type}_description
			custom_tooltip = Rights_LB
			{Codename}{Rank}{Interaction_Type} = yes
			custom_tooltip = Rights_LB
			{Adm_Pow}
			{Dip_Pow}
			{Mil_Pow}
		}}
		""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type,  Adm_Pow = Adm_Pow_Eff, Dip_Pow = Dip_Pow_Eff, Mil_Pow = Mil_Pow_Eff)


				effects_tmp3 += """
		else_if = {{
			limit = {{
				{Codename}{Rank}{Interaction_Type}Potential = yes
				{Codename}{Rank}{Interaction_Type}Allow = yes
			}}
			custom_tooltip = Rights_UI_Success
		}}""".format(Codename=Codename, Rank = CodeRank, Interaction_Type = UD_Type)

		effects_tmp3 += """
		else = {
            custom_tooltip = Rights_UI_Failed
        }
		
		"""

		Effect += effects_tmp3 + effects_tmp2 + effects_tmp
		Trigger += trigger_tmp + """
			else = {
				custom_trigger_tooltip = {
					tooltip = Rights_UI_NotAvail
					always = no
				}
			}
		}"""


	RightsCrownlandButtons += """interaction={{ {Comment}
    key = {key}
	random_seed = random 
	cooldown_months = {cooldown} 
    trigger = {{
		hidden_trigger = {{
			{hidden_trigger}
		}}
		{trigger}
	}}
	effect = {{
		{effects}
		{event}
		{Desc}
		{Custom_Tooltip}
	}}
	ai_will_do = {{
		factor = 0
	}}
}}
""".format(key = Key, event = Event, cooldown = Cooldown, effects = Effect, trigger = Trigger, hidden_trigger = HiddenTrigger, Comment = Comment, Desc=Desc, Custom_Tooltip=Custom_Tooltip)


file.write(RightsP)
file2.write(RightsAssign)
file3.write(RightsList)
file4.write(RightsL)
file5.write(RightsCrownlandButtons)

file.close
file2.close
file3.close
file4.close
file5.close