namespace = POP_Vassal_Siphon

country_event = {
	id = POP_Vassal_Siphon.001
	title = "POP_Vassal_Siphon.001.t"
	desc = "POP_Vassal_Siphon.001.d"
	picture = CITY_DEVELOPMENT_eventPicture
	
	is_triggered_only = yes
	hidden = yes
	
	immediate = {
		#preparing saved values from the previous iteration
		every_country = {
			limit = {
				NOT = { tag = AAA }
			}
			if = {
				limit = {
					isValidCountry = yes
				}
				if = {
					limit = {
						check_variable = { which = French_SubsidyIncome value = 0.001 }
					}
					set_variable = { which = French_SubsidyIncomeSave which = French_SubsidyIncome } # Used to ensure there isnt exponential growth in income
					divide_key = { lhs = French_SubsidyIncomeSave value = 12 } # Used in monthly form
				}
				set_variable = { which = French_SubsidyIncome value = 0 } # Wipe out any old income, old income is stored now in French_SubsidyIncomeSave
				if = {
					limit = {
						check_variable = { which = French_Subsidy value = 0.001 }
					}
					set_variable = { which = French_SubsidySave which = French_Subsidy } # Used to ensure there isnt exponential growth in income
				}
			}
			else = {
				set_variable = { which = French_SubsidyMultiplier value = 0 }
				set_variable = { which = French_Subsidy value = 0 }
				set_variable = { which = French_SubsidyIncome value = 0 }
				clr_country_flag = dont_subsidise_colonies
			}
		}
		#next part
		every_country = {
			limit = {
				isValidCountry = yes
			}
			# Only distribute income if theres subjects to send it to
			if = {
				limit = {
					any_subject_country = {
						overlord = {
							tag = FRA
						}
					}
				}
				if = { # If there is an existing subsidy to distribute, then its time to send it to the colonies
					limit = {
						check_variable = { which = French_Subsidy value = 0.001 }
					}
					set_variable = { which = French_SubsidyOutput which = French_Subsidy }
					set_variable = { which = French_Subsidy value = 0 }
						
					set_variable = { which = French_WeightCur value = 0 }
					#calculate how to distribute French_SubsidyOutput between CNs
					#distribution is based on monthly income, with bigger income CNs getting less subsidies (no checks for balance)
					every_subject_country = {
						limit = {
							isValidCountry = yes
							is_colonial_nation = no
							overlord = {
								tag = FRA
							}
						}
						
						export_to_key = {
							lhs = French_WeightCur
							value = monthly_income
						}
						if = {
							limit = {
								check_variable = { which = French_SubsidyIncomeSave value = 0.001 }
							}
							subtract_key = { lhs = French_WeightCur which = French_SubsidyIncomeSave } # Used to ensure there isnt exponential growth in income (monthly income of the CN - monthly subsidies pool from previous iteration)
							set_variable = { which = French_SubsidyIncomeSave value = 0 } # Used to ensure there isnt exponential growth in income
						}
						if = {
							limit = {
								NOT = { check_variable = { which = French_WeightCur value = 0.1 } } #if monthly income of the CN < monthly subsidies pool from previous iteration
							}
							set_variable = { which = French_WeightCur value = 0.1 } # Prevent negative incomes from contributing
						}
						PREV = { change_key = { lhs = French_WeightCur which = PREV } } #summing (monthly income of the CN - monthly subsidies pool from previous iteration) values on the overlord level
					}
					
					# Inversely weigh each province income, using French_WeightTotal / French_WeightCur. More of a contribution means less weight
					# for example, (250 / 33 = 15), while (250 / 2 = 250 )
					set_variable = { which = French_WeightTotal which = French_WeightCur } # Use the tally as a total income to distribute
					set_variable = { which = French_WeightCur value = 0 }
					set_variable = { which = French_WeightHighest value = 0 }
					
					every_subject_country = {
						limit = {
							isValidCountry = yes
							is_colonial_nation = no
							overlord = {
								tag = FRA
							}
						}
						# Grab country level vars
						set_variable = { which = French_WeightTotal which = PREV }
						set_variable = { which = French_WeightHighest which = PREV }
						
						divide_key = { lhs = French_WeightTotal which = French_WeightCur }
						
						set_variable = { which = French_WeightCur which = French_WeightTotal }
						set_variable = { which = French_WeightTotal value = 0 }
						
						if = { # Store the highest income for the next step
							limit = {
								check_variable = { which = French_WeightCur which = French_WeightHighest }
							}
							set_variable = { which = French_WeightHighest which = French_WeightCur }
							PREV = { set_variable = { which = French_WeightHighest which = PREV } }
						}
						set_variable = { which = French_WeightHighest value = 0 }
						
						PREV = { change_key = { lhs = French_WeightCur which = PREV } }
					}
					
					set_variable = { which = French_WeightTotal which = French_WeightCur } # Use the tally as a total weight to distribute
					set_variable = { which = French_WeightCur value = 0 }
					
					# Run another pass, and ensure no nation is weighed higher than 12x the highest nation
					every_subject_country = {
						limit = {
							is_colonial_nation = no
							overlord = {
								tag = FRA
							}
						}
						# Grab country level vars
						set_variable = { which = French_WeightHighest which = PREV }
						
						multiply_key = { lhs = French_WeightHighest value = 0.083 }
						
						if = {
							limit = {
								check_variable = { which = French_WeightHighest which = French_WeightCur }
							}
							set_variable = { which = French_WeightCur which = French_WeightHighest }
						}
						set_variable = { which = French_WeightHighest value = 0 }
						
						PREV = { change_key = { lhs = French_WeightCur which = PREV } }
					}
					
					set_variable = { which = French_WeightTotal which = French_WeightCur } # Use the tally as a total weight to distribute
					set_variable = { which = French_WeightCur value = 0 }
					set_variable = { which = French_WeightHighest value = 0 }
					
					if = {
						limit = {
							check_variable = { which = French_WeightTotal value = 0.001 }
						}
						every_subject_country = {
							limit = {
								isValidCountry = yes
								is_colonial_nation = no
								overlord = {
									tag = FRA
								}
							}
							# Grab country level vars
							set_variable = { which = French_WeightTotal which = PREV }
							set_variable = { which = French_SubsidyOutput which = PREV }
							set_variable = { which = French_SubsidyIncome which = French_SubsidyOutput } # French_SubsidyIncome is the final variable
							
							# Use a 100% scale instead of a 0-1% scale, less chance of overflow or DBZ
							multiply_key = { lhs = French_WeightCur value = 100 }
							divide_key = { lhs = French_WeightCur which = French_WeightTotal }
							
							# Take the countries share of the total subsidies
							multiply_key = { lhs = French_SubsidyIncome which = French_WeightCur }
							multiply_key = { lhs = French_SubsidyIncome value = 0.01 } # Rescale subsidy income back down from the 100% scale.
							
							# When trickle down is implemented
							#set_variable = { which = French_SubsidySF which = French_SubsidyIncome }
							#multiply_key = { lhs = French_SubsidySF value = 0.3 }
							#multiply_key = { lhs = French_SubsidyIncome value = 0.7 }
							
							#change_key = { lhs = SF_NatTrickleDown which = French_SubsidySF }
							
							# Cleanup
							set_variable = { which = French_Tmp4 value = 0 }
							set_variable = { which = French_WeightCur value = 0 }
							set_variable = { which = French_SubsidyOutput value = 0 }
							set_variable = { which = French_WeightTotal value = 0 }
							set_variable = { which = French_SubsidySF value = 0 }
						}
						set_variable = { which = French_WeightTotal value = 0 }
					}
					else = {
						every_subject_country = {
							limit = {
								isValidCountry = yes
								is_colonial_nation = no
								overlord = {
									tag = FRA
								}
							}
							set_variable = { which = French_WeightCur value = 0 }
						}
					}
					set_variable = { which = French_SubsidyOutput value = 0 }
				}
				set_variable = { which = French_Subsidy value = 0 }
				set_variable = { which = French_SubsidyDisp value = 0 }

				export_to_key = {
					lhs = French_Subsidy
					value = monthly_income
				}
				
				# Effect country expenditure based on country's treasury
				multiply_key = { lhs = French_Subsidy value = 6 } # Half year of income				
				if = {
					limit = {
						check_variable = { which = French_SubsidySave value = 0.001 }
					}
					change_key = { lhs = French_Subsidy which = French_SubsidySave } # Used to ensure there isnt exponential growth in income
					set_variable = { which = French_SubsidySave value = 0 } # Used to ensure there isnt exponential growth in income
				}
				
				if = {
					limit = {
						check_variable = { which = French_SubsidyMultiplier value = 0.001 }
					}
					multiply_key = { lhs = French_Subsidy which = French_SubsidyMultiplier }
				
					set_variable = { which = French_SubsidyDisp which = French_Subsidy }
				}
				else_if = {
					limit = {
						has_country_flag = dont_subsidise_dukes
					}
					set_variable = { which = French_Subsidy value = 0 }
					set_variable = { which = French_SubsidyDisp value = 0 }
				}
				else = {
					set_variable = { which = French_Subsidy value = 0 }
					set_variable = { which = French_SubsidyDisp value = 0 }
					country_event = {
						id = POP_Vassal_Siphon.002
						days = 10
						random = 5
					}
				}
			}
			# Otherwise, dump any subsidy back into the treasury
			else = {
				set_variable = { which = French_SubsidyMultiplier value = 0 }
				if = {
					limit = {
						check_variable = { which = French_Subsidy value = 0.001 }
					}
					set_variable = { which = French_Tmp4 which = French_Subsidy }
					POP_GetDucat = {
						type = which
						inp = French_Tmp4
					}
					set_variable = { which = French_Subsidy value = 0 }
					set_variable = { which = French_SubsidyDisp value = 0 }
					set_variable = { which = French_Tmp4 value = 0 }
				}
				#clr_country_flag = dont_subsidise_dukes
			}
		}
		every_country = {
			limit = {
				isValidCountry = yes
			}
			set_variable = { which = French_Tmp4 which = French_SubsidyIncome }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 1638.4 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 819.2 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 409.6 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 204.8 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 102.4 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 51.2 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 25.6 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 12.8 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 6.4 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 3.2 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 1.6 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 0.8 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 0.4 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 0.2 }
			POP_SetMod = { varname = French_Tmp4 modname = ColonialIncome type = country value = 0.1 }
			
			set_variable = { which = French_SubsidySave value = 0 }
			set_variable = { which = French_SubsidyIncomeSave value = 0 }
			set_variable = { which = French_Tmp4 value = 0 }
		}
	}
	
	option = {
		name = POP_Vassal_Siphon.001.a
	}
}
country_event = {
	id = POP_Vassal_Siphon.002
	title = "POP_Vassal_Siphon.002.t"
	desc = "POP_Vassal_Siphon.002.d"
	picture = TRADEGOODS_eventPicture
	
	is_triggered_only = yes
	
	immediate = {
		hidden_effect = {
			set_variable = { which = French_SubsidyMultiplier value = 0.05 }
		}
	}
	
	option = {
		name = POP_Vassal_Siphon.002.a
		ai_chance = {
			factor = 100
		}
	}
	
	option = {
		name = POP_Vassal_Siphon.002.b
		hidden_effect = {
			set_variable = { which = French_SubsidyMultiplier value = 0 }
			set_country_flag = dont_subsidise_dukes
		}
	}
}